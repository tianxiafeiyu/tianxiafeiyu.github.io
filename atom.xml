<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dalin blog</title>
  
  
  <link href="https://tianxiafeiyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://tianxiafeiyu.github.io/"/>
  <updated>2022-12-15T16:08:19.927Z</updated>
  <id>https://tianxiafeiyu.github.io/</id>
  
  <author>
    <name>Dalin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/os/Linux%20shell%20%E5%90%84%E7%A7%8D%E7%AC%A6%E5%8F%B7%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/os/Linux%20shell%20%E5%90%84%E7%A7%8D%E7%AC%A6%E5%8F%B7%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、小括号，圆括号（）"><a href="#一、小括号，圆括号（）" class="headerlink" title="一、小括号，圆括号（）"></a>一、小括号，圆括号（）</h1><h2 id="1、单小括号"><a href="#1、单小括号" class="headerlink" title="1、单小括号 ()"></a>1、单小括号 ()</h2><p>①命令组。括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格。</p><p>②命令替换。等同于cmd，shell扫描一遍命令行，发现了结构，便将(cmd)结构，便将(cmd)中的cmd执行一次，得到其标准输出，再将此输出放到原来命令。有些shell不支持，如tcsh。</p><p>③用于初始化数组。如：array&#x3D;(a b c d)</p><h2 id="2、双小括号"><a href="#2、双小括号" class="headerlink" title="2、双小括号 (( ))"></a>2、双小括号 (( ))</h2><p>①整数扩展。这种扩展计算是整数型的计算，不支持浮点型。((exp))结构扩展并计算一个算术表达式的值，如果表达式的结果为0，那么返回的退出状态码为1，或者 是”假”，而一个非零值的表达式所返回的退出状态码将为0，或者是”true”。若是逻辑判断，表达式exp为真则为1,假则为0。</p><p>②只要括号中的运算符、表达式符合C语言运算规则，都可用在((exp))中，甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。如：echo((16#5f)) 结果为95 (16进位转十进制)</p><p>③单纯用 (( )) 也可重定义变量值，比如 a&#x3D;5; ((a++)) 可将 $a 重定义为6</p><p>④常用于算术运算比较，双括号中的变量可以不使用符号前缀。括号内支持多个表达式用逗号分开。只要括号中的表达式符合C语言运算规则,比如可以直接使用for((i&#x3D;0;i&lt;5;i++)),如果不使用双括号,则为foriin‘seq04‘或者foriin0..4。再如可以直接使用if((i&lt;5)), 如果不使用双括号, 则为if [ $i -lt 5 ]。</p><h1 id="二、中括号，方括号"><a href="#二、中括号，方括号" class="headerlink" title="二、中括号，方括号[]"></a>二、中括号，方括号[]</h1><h2 id="1、单中括号"><a href="#1、单中括号" class="headerlink" title="1、单中括号 []"></a>1、单中括号 []</h2><p>①bash 的内部命令，[和test是等同的。如果我们不用绝对路径指明，通常我们用的都是bash自带的命令。if&#x2F;test结构中的左中括号是调用test的命令标识，右中括号是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试，并且根据比较的结果来返回一个退出状态码。if&#x2F;test结构中并不是必须右中括号，但是新版的Bash中要求必须这样。</p><p>②Test和[]中可用的比较运算符只有&#x3D;&#x3D;和!&#x3D;，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq，-gt这种形式。无论是字符串比较还是整数比较都不支持大于号小于号。如果实在想用，对于字符串比较可以使用转义形式，如果比较”ab”和”bc”：[ ab &lt; bc ]，结果为真，也就是返回状态为0。[ ]中的逻辑与和逻辑或使用-a 和-o 表示。</p><p>③字符范围。用作正则表达式的一部分，描述一个匹配的字符范围。作为test用途的中括号内不能使用正则。</p><p>④在一个array 结构的上下文中，中括号用来引用数组中每个元素的编号。</p><h2 id="2、双中括号"><a href="#2、双中括号" class="headerlink" title="2、双中括号[[ ]]"></a>2、双中括号[[ ]]</h2><p>①[[是 bash 程序语言的关键字。并不是一个命令，[[ ]] 结构比[ ]结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。</p><p>②支持字符串的模式匹配，使用&#x3D;~操作符时甚至支持shell的正则表达式。字符串比较时可以把右边的作为一个模式，而不仅仅是一个字符串，比如[[ hello &#x3D;&#x3D; hell? ]]，结果为真。[[ ]] 中匹配字符串或通配符，不需要引号。</p><p>③使用[[ … ]]条件判断结构，而不是[ … ]，能够防止脚本中的许多逻辑错误。比如，&amp;&amp;、||、&lt;和&gt; 操作符能够正常存在于[[ ]]条件判断结构中，但是如果出现在[ ]结构中的话，会报错。比如可以直接使用if [[ $a !&#x3D; 1 &amp;&amp; $a !&#x3D; 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] &amp;&amp; [ $a !&#x3D; 2 ]或者if [ $a -ne 1 -a $a !&#x3D; 2 ]。</p><p>④bash把双中括号中的表达式看作一个单独的元素，并返回一个退出状态码。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if ($i&lt;5) </span><br><span class="line">if [ $i -lt 5 ] </span><br><span class="line">if [ $a -ne 1 -a $a != 2 ] </span><br><span class="line">if [ $a -ne 1] &amp;&amp; [ $a != 2 ] </span><br><span class="line">if [[ $a != 1 &amp;&amp; $a != 2 ]] </span><br><span class="line">for i in $(seq 0 4);do echo $i;done</span><br><span class="line">for i in `seq 0 4`;do echo $i;done</span><br><span class="line">for ((i=0;i&lt;5;i++));do echo $i;done</span><br><span class="line">for i in &#123;0..4&#125;;do echo $i;done</span><br></pre></td></tr></table></figure><h1 id="三、大括号、花括号"><a href="#三、大括号、花括号" class="headerlink" title="三、大括号、花括号 {}"></a>三、大括号、花括号 {}</h1><h2 id="1、常规用法"><a href="#1、常规用法" class="headerlink" title="1、常规用法"></a>1、常规用法</h2><p>①大括号拓展。(通配(globbing))将对大括号中的文件名做扩展。在大括号中，不允许有空白，除非这个空白被引用或转义。第一种：对大括号中的以逗号分割的文件列表进行拓展。如 touch {a,b}.txt 结果为a.txt b.txt。第二种：对大括号中以点点（..）分割的顺序文件列表起拓展作用，如：touch {a..d}.txt 结果为a.txt b.txt c.txt d.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ls &#123;ex1,ex2&#125;.sh </span><br><span class="line">ex1.sh ex2.sh </span><br><span class="line"># ls &#123;ex&#123;1..3&#125;,ex4&#125;.sh </span><br><span class="line">ex1.sh ex2.sh ex3.sh ex4.sh </span><br><span class="line"># ls &#123;ex[1-3],ex4&#125;.sh </span><br><span class="line">ex1.sh ex2.sh ex3.sh ex4.sh</span><br></pre></td></tr></table></figure><p>②代码块，又被称为内部组，这个结构事实上创建了一个匿名函数 。与小括号中的命令不同，大括号内的命令不会新开一个子shell运行，QQ号码买卖即脚本余下部分仍可使用括号内变量。括号内的命令间用分号隔开，最后一个也必须有分号。{}的第一个命令和左括号之间必须要有一个空格。</p><h2 id="2、几种特殊的替换结构"><a href="#2、几种特殊的替换结构" class="headerlink" title="2、几种特殊的替换结构"></a>2、几种特殊的替换结构</h2><p>${var:-string},${var:+string},${var:&#x3D;string},${var:?string}</p><p>①${var:-string}和${var:&#x3D;string}:若变量var为空，则用在命令行中用string来替换${var:-string}，否则变量var不为空时，则用变量var的值来替换${var:-string}；对于${var:&#x3D;string}的替换规则和${var:-string}是一样的，所不同之处是${var:&#x3D;string}若var为空时，用string替换${var:&#x3D;string}的同时，把string赋给变量var：${var:&#x3D;string}很常用的一种用法是，判断某个变量是否赋值，没有的话则给它赋上一个默认值。</p><p>② ${var:+string}的替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var为空时则不替换或者说是替换成变量 var的值，即空值。(因为变量var此时为空，所以这两种说法是等价的) </p><p>③${var:?string}替换规则为：若变量var不为空，则用变量var的值来替换${var:?string}；若变量var为空，则把string输出到标准错误中，并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。</p><p>补充扩展：在上面这五种替换结构中string不一定是常值的，可用另外一个变量的值或是一种命令的输出。</p><h2 id="3、四种模式匹配替换结构"><a href="#3、四种模式匹配替换结构" class="headerlink" title="3、四种模式匹配替换结构"></a>3、四种模式匹配替换结构</h2><p>模式匹配记忆方法：</p><p>#是去掉左边(在键盘上#在$之左边)</p><p>%是去掉右边(在键盘上%在$之右边)</p><p>#和%中的单一符号是最小匹配，两个相同符号是最大匹配。</p><p>${var%pattern},${var%%pattern},${var#pattern},${var##pattern}<br>第一种模式：${variable%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最短的匹配模式</p><p>第二种模式：${variable%%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式</p><p>第三种模式：${variable#pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern开始，如果是，就从命令行把variable中的内容去掉左边最短的匹配模式</p><p>第四种模式：${variable##pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式</p><p>这四种模式中都不会改变variable的值，其中，只有在pattern中使用了<em>匹配符号时，%和%%，#和##才有区别。结构中的pattern支持通配符，</em>表示零个或多个任意字符，?表示仅与一个任意字符匹配，[…]表示匹配中括号里面的字符，[!…]表示不匹配中括号里面的字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># var=testcase </span><br><span class="line"># echo $var </span><br><span class="line">testcase </span><br><span class="line"># echo $&#123;var%s*e&#125; </span><br><span class="line">testca </span><br><span class="line"># echo $var </span><br><span class="line">testcase </span><br><span class="line"># echo $&#123;var%%s*e&#125; </span><br><span class="line">te </span><br><span class="line"># echo $&#123;var#?e&#125; </span><br><span class="line">stcase </span><br><span class="line"># echo $&#123;var##?e&#125; </span><br><span class="line">stcase </span><br><span class="line"># echo $&#123;var##*e&#125;</span><br><span class="line"># echo $&#123;var##*s&#125; </span><br><span class="line">e </span><br><span class="line"># echo $&#123;var##test&#125; </span><br><span class="line">case</span><br></pre></td></tr></table></figure><h2 id="4、字符串提取和替换"><a href="#4、字符串提取和替换" class="headerlink" title="4、字符串提取和替换"></a>4、字符串提取和替换</h2><p>${var:num},${var:num1:num2},${var&#x2F;pattern&#x2F;pattern},${var&#x2F;&#x2F;pattern&#x2F;pattern}</p><p>第一种模式：${var:num}，这种模式时，shell在 var中提取第num个字符到末尾的所有字符。若num为正数，从左边0处开始；若num为负数，从右边开始提取字串，但必须使用在冒号后面加空格或一个数字或整个num加上括号，如${var: -2}、${var:1-3}或${var:(-2)}。       </p><p>第二种模式：${var:num1:num2}，num1是位置，num2是长度。表示从$var字符串的第$num1个位置开始提取长度为$num2的子串。不能为负数。</p><p>第三种模式：${var&#x2F;pattern&#x2F;pattern}表示将var字符串的第一个匹配的pattern替换为另一个pattern。</p><p>第四种模式：${var&#x2F;&#x2F;pattern&#x2F;pattern}表示将var字符串中的所有能匹配的pattern替换为另一个pattern。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# var=/home/centos </span><br><span class="line">[root@centos ~]# echo $var </span><br><span class="line">/home/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var:5&#125; </span><br><span class="line">/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var: -6&#125; </span><br><span class="line">centos </span><br><span class="line">[root@centos ~]# echo $&#123;var:(-6)&#125; </span><br><span class="line">centos </span><br><span class="line">[root@centos ~]# echo $&#123;var:1:4&#125; </span><br><span class="line">home </span><br><span class="line">[root@centos ~]# echo $&#123;var/o/h&#125; </span><br><span class="line">/hhme/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var//o/h&#125; </span><br><span class="line">/hhme/cenths</span><br></pre></td></tr></table></figure><h1 id="四、符号-后的括号"><a href="#四、符号-后的括号" class="headerlink" title="四、符号$后的括号"></a>四、符号$后的括号</h1><p>（1）${a} 变量a的值, 在不引起歧义的情况下可以省略大括号。</p><p>（2）$(cmd) 命令替换，和<code>cmd</code>效果相同，结果为shell命令cmd的输，过某些Shell版本不支持$()形式的命令替换, 如tcsh。</p><p>（3）$((expression)) 和<code>exprexpression</code>效果相同, 计算数学表达式exp的数值, 其中exp只要符合C语言的运算规则即可, 甚至三目运算符和逻辑表达式都可以计算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、小括号，圆括号（）&quot;&gt;&lt;a href=&quot;#一、小括号，圆括号（）&quot; class=&quot;headerlink&quot; title=&quot;一、小括号，圆括号（）&quot;&gt;&lt;/a&gt;一、小括号，圆括号（）&lt;/h1&gt;&lt;h2 id=&quot;1、单小括号&quot;&gt;&lt;a href=&quot;#1、单小括号&quot; cla</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="os" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/os/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/2020%20%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%EF%BC%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%EF%BC%89/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/2020%20%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%EF%BC%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%EF%BC%89/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<p>2020 学习计划（成长之路）</p><p>领导怎么说：</p><p>k8s</p><p>docker</p><p>多读源码</p><p>逛逛开源社区</p><p>提高英文文档阅读能力</p><p>设计模式，工作中体现</p><p>一个优秀的软件架构师，首先一定是一个出色的程序员</p><p>eBay的架构师[RandyShoup先生]是如何总结架构师在项目中的职责的：</p><p>l 具备丰富的一线大中型开发项目的整体规划、方案设计及技术队伍管理经验。</p><p>2 具备软件行业工作经验，熟悉业务领域的技术应用和发展。</p><p>3 具有项目管理理论基础，并在应用系统开发平台和项目管理上有实践经验。</p><p>4 对相关的技术标准有深刻的认识，对软件工程标准规范有良好的把握。 具备C&#x2F;S或B&#x2F;S体系结构或特定领域软件产品开发及架构和设计的经验。</p><p>5 具有面向对象分析（Object-Oriented Analysis, OOA）、设计（OOD）、开发（OOP）能力，精通UML和XML等，熟练使用Rational Rose、PowerDesigner等CASE工具进行设计开发。</p><p>6 对相关编程技术及整个解决方案有深刻的理解及熟练的应用，并且精通架构和设计模式，并在此基础上设计产品框架。</p><p>7 精通大型数据库如Oracle、Sql Server、MySQL等的开发。l 对计算机系统、网络和安全、应用系统架构等有全面的认识。</p><p>8 良好的团队意识和写作精神，有较强的内外沟通能力。</p><p>学习计划：</p><p>\1. Java 基础知识的深入理解</p><p>反射、IO、接口&#x2F;抽象类、内部类、异常、Enum、序列化、static、final、Iterator，Iterable和Comparable,Comparator 等等知识点，虽然都有学习，按实际上还差得很远，还有很多细节与需要深入学习理解。还应该尝试看 Java 源码，源码阅读理解是程序员成长中的必经之路，在源码中可以得到更多细节。最近在看《On Java 8》(事实上的 《Java 编程思想》第五版)这本书，书中讲解真的很详细，内容也非常多，需要反复深入学习。2020 年需要攻克完成这本书，不单单只是阅读浏览一遍，应该要融会贯通，对晦涩难懂的知识多思考，争取掌握。</p><p>\2. 设计模式</p><p>设计模式很重要，支撑起代码的整个生命历程。设计模式应该被理解，被应用到项目中，而不是只是简单的概念层面上的了解，当然，也不应该生搬硬套。能够简化流程，优化项目的设计模式，才是好的设计模式。2020年希望能够掌握常用的设计模式，理解设计模式的套路，加深编程经验。完成《大话设计模式》这本书的学习理解。四人帮(GOF)的书籍《. Design Patterns》可能较之有一定的学习难度，但是经典还是需要了解。</p><p>\3. 微服务、容器等知识</p><p>现如今，微服务非常重要，阿里系的Dubbo+Zookeeper，Spring系的SpringCloud，以及在此基础上二次开发可能更优秀的SpringCloud。主要学习SpringCloud。</p><p>Docker 是微服务中至关重要的工具，也需要学习。之前有比较简单的学习，还需要深入学习，注意在实践中多使用 Docker 技术，争取融会贯通，学以致用。</p><p>kubernetes 也需要学习理解，这是基于容器的集群管理平台，现在事实上的标准，需要掌握。主要通过网课学习。</p><p>\4. 分布式架构</p><p>分布式缓存、分布式存储、分布式锁、幂等性、分布式事务、流量削峰、服务容错、服务降级等等，现在的分布式太火了，必须要对分布式有一定的理解和把握。计划是通过网课学习分布式架构。</p><p>\5. 数据库等知识</p><p>常用的关系型数据库有MySQL、Oracle、DB2等，MySQL应该是使用最多的，深入学习和掌握MySQL，是高级程序员的基本要求。还又 Redis、消息中间件等也需要有一定的知识储备。</p><p>\6. 开发工具</p><p>开发工具保证了开发效率，现在基本上离不开开发工具了，一个项目的开发到部署的过程都设计到许多的软件工具。作为使用者和潜在使用者，更应该对它们有深入的了解，就算是最熟悉的 idea, 我也不敢说完全掌握，Idea、maven、git、svn、jenkins、tomcat 等等也需要学习掌握。</p><p>\7. 提高英语水平</p><p>如今流行的编程语言都是贴近英语语法。大家更倾向于写出来的代码是好读易懂的。能够快速的理解原作者的用词，就可以更快的读懂代码结构，这比纯粹的分析编程语法要简单且自然的多。</p><p>能够流畅的阅读英文文档，对于程序员而言，是非常重要的。这也是非常艰难的，英语也确实是我的短板，提高的英语的阅读能力，通过逼迫自己去看，去理解英文来实现，尝试去读英文的工具文档、逛外国的开发论坛，stackoverflow、github。YouTube、Reddit、ins 等也可以多逛逛。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020 学习计划（成长之路）&lt;/p&gt;
&lt;p&gt;领导怎么说：&lt;/p&gt;
&lt;p&gt;k8s&lt;/p&gt;
&lt;p&gt;docker&lt;/p&gt;
&lt;p&gt;多读源码&lt;/p&gt;
&lt;p&gt;逛逛开源社区&lt;/p&gt;
&lt;p&gt;提高英文文档阅读能力&lt;/p&gt;
&lt;p&gt;设计模式，工作中体现&lt;/p&gt;
&lt;p&gt;一个优秀的软件架构师，首先</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/JTW%E8%AF%A6%E8%A7%A3/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/JTW%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JTW详解</strong></p><p><strong>spring boot集成jwt实现token认证；</strong></p><p>\1. 什么是jwt?</p><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).定义了一种简洁的，自包含的方法用于通信双方之间以JSON对象的形式安全的传递信息。因为数字签名的存在，这些信息是可信的，JWT可以使用HMAC算法或者是RSA的公私秘钥对进行签名。</p><p>\2. jwt的工作流程</p><p>\1. 用户使用账号和密码发出post请求；</p><p>\2. 服务器使用私钥创建一个jwt；</p><p>\3. 服务器返回这个jwt给浏览器；</p><p>\4. 浏览器将该jwt串在请求头中向服务器发送请求；</p><p>\5. 服务器验证该jwt；</p><p>\6. 返回响应的资源给浏览器。</p><p><img src="C:\Users\14133\AppData\Local\YNote\data\m18378511016@163.com\f5f9098e49bc44e887b4c730a09776c1\jwt.png" alt="img"></p><p>\3. jwt结构</p><p>1）Header 头部：JWT的头部承载两部分信息：token类型和采用的加密算法。</p><p>2）Payload：存放有效信息的地方。</p><p>3）Signature：签证信息。</p><p>（完整见博客<a href="https://www.jianshu.com/p/e88d3f8151db%EF%BC%89">https://www.jianshu.com/p/e88d3f8151db）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;JTW详解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;spring boot集成jwt实现token认证；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;\1. 什么是jwt?&lt;/p&gt;
&lt;p&gt;Json web token (JWT), 是为了在网络应用环境间传递声明</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/JVM%E4%B8%8EJava%E7%A8%8B%E5%BA%8F/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/JVM%E4%B8%8EJava%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<p>当启动一个Java程序时，一个JVM实例也就产生。当该程序关闭退出，这个JVM实例也就随之消亡。</p><p>JVM实例负责运行一个Java程序</p><h4 id="Java虚拟机及程序的生命周期："><a href="#Java虚拟机及程序的生命周期：" class="headerlink" title="Java虚拟机及程序的生命周期："></a>Java虚拟机及程序的生命周期：</h4><p>（1）通过java命令运行一个Java程序时，启动一个Java虚拟机进程；</p><p>（2）Java虚拟机进程从启动到终止的过程，称为Java虚拟机生命周期；</p><p>（3）程序生命周期和Java虚拟机生命周期是一致的，因为Java虚拟机进程从创建起的任务就是执行Java程序。</p><p>（4）每个运行中的Java程序会有独立的Java堆和非堆等物理资源，程序之间的jvm运行时状态是区分的。</p><h4 id="类的加载，连接和初始化："><a href="#类的加载，连接和初始化：" class="headerlink" title="类的加载，连接和初始化："></a>类的加载，连接和初始化：</h4><p>Java程序要使用某个类时，Java虚拟机要确保这个类被加载，连接和运行，其中连接包括验证，准备和解析。</p><p>1、装载：查找并加载类的二进制数据</p><p>装载的最终目标是实现将编译后的class文件（class文件采用字节码，是JVM的机器语言）装入内存运行时数据区的方法区中，并在内存运行时数据区的堆区生成一个class对象，这个对象可以引用到方法区中的类定义</p><p>2、连接</p><p>（1）验证：确保加载类的正确性；</p><p>（2）准备：为静态变量分配内存，并将其初始化为默认值；</p><p>（3）解析：将类中的符号引用转换为直接引用。</p><p>3、初始化：</p><p>类的初始化过程是执行类的初始化语句，包括静态变量的声明语句，以及静态代码块，静态代码块的作用即是为静态变量赋初始化值。</p><p>4、卸载</p><p>只有没有任何引用指向Class对象的时候，这时候才会卸载类，结束类的生命周期。</p><p>装载验证准备解析初始化对象实例化垃圾收集对象终结卸载</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当启动一个Java程序时，一个JVM实例也就产生。当该程序关闭退出，这个JVM实例也就随之消亡。&lt;/p&gt;
&lt;p&gt;JVM实例负责运行一个Java程序&lt;/p&gt;
&lt;h4 id=&quot;Java虚拟机及程序的生命周期：&quot;&gt;&lt;a href=&quot;#Java虚拟机及程序的生命周期：&quot; class</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%20%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E3%80%90%E8%BD%AC%E3%80%91/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%20%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E3%80%90%E8%BD%AC%E3%80%91/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h3 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h3><p>归并排序是一种概念上最简单的排序算法，与快速排序一样，归并排序也是基于分治法的。归并排序将待排序的元素序列分成两个长度相等的子序列，为每一个子序列排序，然后再将他们合并成一个子序列。合并两个子序列的过程也就是两路归并。</p><h3 id="2、复杂度"><a href="#2、复杂度" class="headerlink" title="2、复杂度"></a>2、复杂度</h3><p>归并排序是一种稳定的排序算法，归并排序的主要问题在于它需要一个与待排序数组一样大的辅助数组空间。由于归并排序每次划分时两个子序列的长度基本一样，所以归并排序最好、最差和平均时间复杂度都是nlog2n。 </p><p>我们可以通过下图非常容易看懂归并排序的过程： </p><p><img src="https://note.youdao.com/yws/api/personal/file/F94C8510579B48B38D52AC97D3E6C1B7?method=download&shareKey=65d334fbb49d6f315cc8421850dd33a4" alt="归并排序过程"></p><p>时间复杂度：</p><p><img src="https://note.youdao.com/yws/api/personal/file/E039B66FD79B46A4937A8C90D1AD018A?method=download&shareKey=f45e4224c86dbd0af47e81c6b20cb574" alt="归并排序复杂度"></p><h3 id="3、完整Java代码"><a href="#3、完整Java代码" class="headerlink" title="3、完整Java代码"></a>3、完整Java代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Test;</span><br><span class="line">public class MergeSort &#123;</span><br><span class="line">    //两路归并算法，两个排好序的子序列合并为一个子序列</span><br><span class="line">    public void merge(int []a,int left,int mid,int right)&#123;</span><br><span class="line">        int []tmp=new int[a.length];//辅助数组</span><br><span class="line">        int p1=left,p2=mid+1,k=left;//p1、p2是检测指针，k是存放指针</span><br><span class="line"></span><br><span class="line">        while(p1&lt;=mid &amp;&amp; p2&lt;=right)&#123;</span><br><span class="line">            if(a[p1]&lt;=a[p2])</span><br><span class="line">                tmp[k++]=a[p1++];</span><br><span class="line">            else</span><br><span class="line">                tmp[k++]=a[p2++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while(p1&lt;=mid) tmp[k++]=a[p1++];//如果第一个序列未检测完，直接将后面所有元素加到合并的序列中</span><br><span class="line">        while(p2&lt;=right) tmp[k++]=a[p2++];//同上</span><br><span class="line"></span><br><span class="line">        //复制回原素组</span><br><span class="line">        for (int i = left; i &lt;=right; i++) </span><br><span class="line">            a[i]=tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void mergeSort(int [] a,int start,int end)&#123;</span><br><span class="line">        if(start&lt;end)&#123;//当子序列中只有一个元素时结束递归</span><br><span class="line">            int mid=(start+end)/2;//划分子序列</span><br><span class="line">            mergeSort(a, start, mid);//对左侧子序列进行递归排序</span><br><span class="line">            mergeSort(a, mid+1, end);//对右侧子序列进行递归排序</span><br><span class="line">            merge(a, start, mid, end);//合并</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        int[] a = &#123; 49, 38, 65, 97, 76, 13, 27, 50 &#125;;</span><br><span class="line">        mergeSort(a, 0, a.length-1);</span><br><span class="line">        System.out.println(&quot;排好序的数组：&quot;);</span><br><span class="line">        for (int e : a)</span><br><span class="line">            System.out.print(e+&quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/qq_36442947/article/details/81612870">https://blog.csdn.net/qq_36442947/article/details/81612870</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h1&gt;&lt;h3 id=&quot;1、原理&quot;&gt;&lt;a href=&quot;#1、原理&quot; class=&quot;headerlink&quot; title=&quot;1、原理&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java8新特性</strong></p><p>（转载自<a href="https://www.runoob.com/java/java8-new-features.html%EF%BC%8C%E5%85%B7%E4%BD%93%E5%86%85%E5%AE%B9%E8%A7%81%E9%93%BE%E6%8E%A5%EF%BC%8C%E9%9D%9E%E5%B8%B8%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%94%A8%EF%BC%89">https://www.runoob.com/java/java8-new-features.html，具体内容见链接，非常详细实用）</a></p><p>Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。</p><p>Java8 新增了非常多的特性，我们主要讨论以下几个：</p><ul><li><strong>Lambda 表达式</strong> − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。</li><li><strong>方法引用</strong> − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</li><li><strong>默认方法</strong> − 默认方法就是一个在接口里面有了一个实现的方法。</li><li><strong>新工具</strong> − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。</li><li><strong>Stream API</strong> −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。</li><li><strong>Date Time API</strong> − 加强对日期与时间的处理。</li><li><strong>Optional 类</strong> − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</li><li><strong>Nashorn, JavaScript 引擎</strong> − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java8新特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（转载自&lt;a href=&quot;https://www.runoob.com/java/java8-new-features.html%EF%BC%8C%E5%85%B7%E4%BD%93%E5%86%85%E5%</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h4 id="1-线程与进程"><a href="#1-线程与进程" class="headerlink" title="1. 线程与进程"></a>1. 线程与进程</h4><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p><p>线程，有时被称为轻量级进程(Lightweight Process，LWP），是程序执行流的最小单元。线程是程序中一个单一的顺序控制流程，在单个程序中同时运行多个线程完成不同的工作，称为多线程</p><h3 id="2-同步与异步"><a href="#2-同步与异步" class="headerlink" title="2. 同步与异步"></a>2. 同步与异步</h3><p>同步（Synchronous）：同步是指一个进程在执行某个请求的时候，如果该请求需要一段时间才能返回信息，那么这个进程会一直等待下去，直到收到返回信息才继续执行下去。</p><p>异步（Asynchronous）：异步是指进程不需要一直等待下去，而是继续执行下面的操作，不管其他进程的状态，当有信息返回的时候会通知进程进行处理。</p><p>通俗地讲，也就是说，同步需要按部就班地走完一整个流程，完成一整个动作。而异步则不需要按部就班，可以在等待那个动作的时候同时做别的动作</p><h3 id="3-并行与并发"><a href="#3-并行与并发" class="headerlink" title="3. 并行与并发"></a>3. 并行与并发</h3><p>并行：时间上是由重叠的，也就是说并行才是真正意义上的同一时刻可以有多个任务同时执行。</p><p>并发：任务在执行的时候，并发是没有时间上的重叠的，两个任务是交替执行的，由于切换的非常快，对于外界调用者来说相当于同一时刻多个任务一起执行了。</p><h3 id="二、Java创建线程的3种方式"><a href="#二、Java创建线程的3种方式" class="headerlink" title="二、Java创建线程的3种方式"></a>二、Java创建线程的3种方式</h3><h4 id="1-继承-Thread-类"><a href="#1-继承-Thread-类" class="headerlink" title="1. 继承 Thread 类"></a>1. 继承 Thread 类</h4><ol><li>定义 Thread 类的子类,并重写该类的 run() 方法,该 run() 方法的方法体就代表了线程需要完成的任务.因此把 run() 方法称为线程执行体。</li><li>创建 Thread 子类的实例,即创建了线程对象。</li><li>调用线程对象的 start() 方法来启动该线程。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread &#123;</span><br><span class="line">public MyThread() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread()+&quot;:&quot;+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">MyThread mThread1=new MyThread();</span><br><span class="line">MyThread mThread2=new MyThread();</span><br><span class="line">MyThread myThread3=new MyThread();</span><br><span class="line">mThread1.start();</span><br><span class="line">mThread2.start();</span><br><span class="line">myThread3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-实现-Runnable-接口"><a href="#2-实现-Runnable-接口" class="headerlink" title="2. 实现 Runnable 接口"></a>2. 实现 Runnable 接口</h4><ol><li>定义 Runnable 接口的实现类,并重写该接口的 run() 方法,该 run() 方法的方法体同样是该线程的线程执行体。</li><li>创建 Runnable 实现类的实例,并以此实例作为 Thread 的target来创建 Thread 对象,该 Thread 对象才是真正的线程对象。</li><li>调用线程对象的 start() 方法来启动该线程。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread implements Runnable&#123;</span><br><span class="line">public static int count=20;</span><br><span class="line">public void run() &#123;</span><br><span class="line">while(count&gt;0) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(200);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;-当前剩余票数:&quot;+count--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">MyThread Thread1=new MyThread();</span><br><span class="line">Thread mThread1=new Thread(Thread1,&quot;线程1&quot;);</span><br><span class="line">Thread mThread2=new Thread(Thread1,&quot;线程2&quot;);</span><br><span class="line">Thread mThread3=new Thread(Thread1,&quot;线程3&quot;);</span><br><span class="line">mThread1.start();</span><br><span class="line">mThread2.start();</span><br><span class="line">myThread3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用此方式</p><h4 id="3-使用-Callable-和-Future"><a href="#3-使用-Callable-和-Future" class="headerlink" title="3. 使用 Callable 和 Future"></a>3. 使用 Callable 和 Future</h4><ol><li>创建 Callable 接口的实现类,并实现 call() 方法,该 call() 方法将作为线程执行体,且该 call() 方法有返回值,再创建 Callable 实现类的实例。</li><li>使用 FutureTask 类来包装 Callable 对象,该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li><li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li><li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.FutureTask;</span><br><span class="line"> </span><br><span class="line">public class MyThread implements Callable&lt;String&gt; &#123;</span><br><span class="line">private int count = 20;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public String call() throws Exception &#123;</span><br><span class="line">for (int i = count; i &gt; 0; i--) &#123;</span><br><span class="line">        //Thread.yield();</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;当前票数：&quot; + i);</span><br><span class="line">&#125;</span><br><span class="line">return &quot;sale out&quot;;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">Callable&lt;String&gt; callable  =new MyThread();</span><br><span class="line">FutureTask &lt;String&gt;futureTask=new FutureTask&lt;&gt;(callable);</span><br><span class="line">Thread mThread=new Thread(futureTask);</span><br><span class="line">Thread mThread2=new Thread(futureTask);</span><br><span class="line">Thread mThread3=new Thread(futureTask);</span><br><span class="line">        //mThread.setName(&quot;hhh&quot;);</span><br><span class="line">mThread.start();</span><br><span class="line">mThread2.start();</span><br><span class="line">mThread3.start();</span><br><span class="line">System.out.println(futureTask.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-使用线程池"><a href="#4-使用线程池" class="headerlink" title="4. 使用线程池"></a>4. 使用线程池</h4><p>通过 <code>java.util.concurrent.Executors</code> 的工具类可以创建三种类型的普通线程池：</p><h5 id="1-SingleThreadPoolExecutor-单线程池"><a href="#1-SingleThreadPoolExecutor-单线程池" class="headerlink" title="(1)SingleThreadPoolExecutor :单线程池"></a>(1)SingleThreadPoolExecutor :单线程池</h5><p>适用于需要保证顺序执行各个任务的场景。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"> </span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ExecutorService ex=Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;5;i++) &#123;</span><br><span class="line">ex.submit(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int j=0;j&lt;10;j++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">ex.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-FixThreadPool-int-n-固定大小的线程池"><a href="#2-FixThreadPool-int-n-固定大小的线程池" class="headerlink" title="(2) FixThreadPool(int n); 固定大小的线程池"></a>(2) FixThreadPool(int n); 固定大小的线程池</h5><p>使用于为了满足资源管理需求而需要限制当前线程数量的场合。使用于负载比较重的服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"> </span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ExecutorService ex=Executors.newFixedThreadPool(5);</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;5;i++) &#123;</span><br><span class="line">ex.submit(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int j=0;j&lt;10;j++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">ex.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-CashedThreadPool-缓存线程池"><a href="#5-CashedThreadPool-缓存线程池" class="headerlink" title="(5)CashedThreadPool(); 缓存线程池"></a>(5)CashedThreadPool(); 缓存线程池</h5><p>当提交任务速度高于线程池中任务处理速度时，缓存线程池会不断的创建线程 适用于提交短期的异步小程序，以及负载较轻的服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"> </span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ExecutorService ex=Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;5;i++) &#123;</span><br><span class="line">ex.submit(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int j=0;j&lt;10;j++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">ex.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h3&gt;&lt;h4 id=&quot;1-线程与进程&quot;&gt;&lt;a href=&quot;#1-线程与进程&quot; class=&quot;headerlink&quot; title=&quot;1. </summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、序列化"><a href="#1、序列化" class="headerlink" title="1、序列化"></a>1、序列化</h4><p>把对象转换为字节序列的过程。</p><h4 id="2、反序列化"><a href="#2、反序列化" class="headerlink" title="2、反序列化"></a>2、反序列化</h4><p>把字节序列恢复为对象的过程。</p><h4 id="3、对象的序列化主要有两种用途："><a href="#3、对象的序列化主要有两种用途：" class="headerlink" title="3、对象的序列化主要有两种用途："></a>3、对象的序列化主要有两种用途：</h4><p>1） 把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；</p><p>2） 在网络上传送对象的字节序列。</p><h4 id="4、serialVersionUID的作用"><a href="#4、serialVersionUID的作用" class="headerlink" title="4、serialVersionUID的作用"></a>4、serialVersionUID的作用</h4><p>对象序列化的版本号，凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量。</p><p>如果没有显式定义serialVersionUID，那么java编译器会自动给这个class进行一个摘要算法，类似于指纹算法，只要这个文件多一个空格，得到的UID就会截然不同的，可以保证在这么多类中，这个编号是唯一的。所以class有了修改之后，已修改类的serialVersionUID和之前已经序列化的文件流中的类的的serialVersionUID是不一致的，处于安全机制考虑，程序抛出了错误，并且拒绝载入。</p><p>如果显式定义了serialVersionUID，在序列化后，在类中添加字段，或者方法，不会影响到后期的还原。可以说serialVersionUID是序列化和反序列化之间彼此认识的唯一信物。</p><p>显式地定义serialVersionUID有两种用途：</p><p>1、 在某些场合，希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有相同的serialVersionUID；</p><p>2、 在某些场合，不希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有不同的serialVersionUID。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、序列化&quot;&gt;&lt;a href=&quot;#1、序列化&quot; class=&quot;headerlink&quot; title=&quot;1、序列化&quot;&gt;&lt;/a&gt;1、序列化&lt;/h4&gt;&lt;p&gt;把对象转换为字节序列的过程。&lt;/p&gt;
&lt;h4 id=&quot;2、反序列化&quot;&gt;&lt;a href=&quot;#2、反序列化&quot; class</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<p>一直都有接触正则表达式，但是都是照搬过来使用的程度，没有能系统的学习，也没有留下一些笔记，下次使用还需网上查找资料。此次正好稍微做点记录，方便遗忘后重拾。</p><h3 id="1-什么是正则表达式"><a href="#1-什么是正则表达式" class="headerlink" title="1. 什么是正则表达式"></a>1. 什么是正则表达式</h3><p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p><h3 id="2-正则表达式知识点"><a href="#2-正则表达式知识点" class="headerlink" title="2. 正则表达式知识点"></a>2. 正则表达式知识点</h3><ol><li>一个字符串其实就是一个简单的正则表达式，例如 Hello World 正则表达式匹配 “Hello World” 字符串。  </li><li>java.util.regex 包主要包括以下三个类：</li></ol><ul><li><p>Pattern 类：<br>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p></li><li><p>Matcher 类：<br>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p></li><li><p>PatternSyntaxException：<br>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p></li></ul><p>以下实例中使用了正则表达式 .<em>runoob.</em> 用于查找字符串中是否包了 runoob 子串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.*;</span><br><span class="line"> </span><br><span class="line">class RegexExample1&#123;</span><br><span class="line">   public static void main(String args[])&#123;</span><br><span class="line">      String content = &quot;I am noob &quot; +</span><br><span class="line">        &quot;from runoob.com.&quot;;</span><br><span class="line"> </span><br><span class="line">      String pattern = &quot;.*runoob.*&quot;;</span><br><span class="line"> </span><br><span class="line">      boolean isMatch = Pattern.matches(pattern, content);</span><br><span class="line">      System.out.println(&quot;字符串中是否包含了 &#x27;runoob&#x27; 子字符串? &quot; + isMatch);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Java-正则表达式语法"><a href="#3-Java-正则表达式语法" class="headerlink" title="3. Java 正则表达式语法"></a>3. Java 正则表达式语法</h3><p>在其他语言中，\ 表示：我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。 </p><p>在 Java 中，\ 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。 </p><p>所以，在其他的语言中（如Perl），一个反斜杠 \ 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 \ 代表其他语言中的一个 \，这也就是为什么表示一位数字的正则表达式是 \d，而表示一个普通的反斜杠是 \\。</p><table><thead><tr><th align="center">字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，”n”匹配字符”n”。”\n”匹配换行符。序列”\\“匹配”\“，”\(“匹配”(“。</td></tr><tr><td align="center">^</td><td align="center">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与”\n”或”\r”之后的位置匹配。</td></tr><tr><td align="center">$</td><td align="center">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与”\n”或”\r”之前的位置匹配。</td></tr></tbody></table><ul><li>| 零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。<br>+ | 一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。<br>? | 零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。<br>{n} | n 是非负整数。正好匹配 n 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。<br>{n,} | n 是非负整数。至少匹配 n 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。<br>{n,m} | m 和 n 是非负整数，其中 n &lt;&#x3D; m。匹配至少 n 次，至多 m 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。<br>? | 当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。<br>x|y | 匹配 x 或 y。例如，’z|food’ 匹配”z”或”food”。’(z|f)ood’ 匹配”zood”或”food”。<br>[xyz] | 字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。<br>[^xyz] | 反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。<br>[a-z] | 字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。<br>[^a-z] | 反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。<br>\b | 匹配一个字边界，即字与空格间的位置。例如，”er\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。<br>\B | 非字边界匹配。”er\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。<br>\cx | 匹配 x 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是”c”字符本身。<br>\d | 数字字符匹配。等效于 [0-9]。<br>\D | 非数字字符匹配。等效于 [^0-9]。<br>\f | 换页符匹配。等效于 \x0c 和 \cL。<br>\n | 换行符匹配。等效于 \x0a 和 \cJ。<br>\r | 匹配一个回车符。等效于 \x0d 和 \cM。<br>\s | 匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。<br>\S | 匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。<br>\t | 制表符匹配。与 \x09 和 \cI 等效。<br>\v | 垂直制表符匹配。与 \x0b 和 \cK 等效。<br>\w | 匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效。<br>\W | 与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效。</li></ul><h3 id="4-正则表达式应用"><a href="#4-正则表达式应用" class="headerlink" title="4. 正则表达式应用"></a>4. 正则表达式应用</h3><ol><li>匹配字符串，如 手机号校验、邮箱校验</li><li>切割字符串，提取字符串信息</li></ol><p>场景：需要从一串字符串中提取出其中的主机ip信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;ip地址是127.0.0.1:8848，真的，不骗你&quot;</span><br><span class="line">Pattern pattern = Pattern.compile(&quot;(((localhost)|(\\d+.&#123;1&#125;\\d+.&#123;1&#125;\\d+.&#123;1&#125;\\d+))\\:&#123;1&#125;\\d+)&quot;);</span><br><span class="line">Matcher matcher = pattern.matcher(str);</span><br><span class="line">while (matcher.find())&#123; // 一定要先调用 find()函数！</span><br><span class="line">    host = matcher.group();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>详情见： <a href="https://www.runoob.com/java/java-regular-expressions.html">菜鸟教程：Java 正则表达式</a><br>&amp;emsp;&amp;emsp; &amp;emsp; &amp;ensp;<a href="https://www.cnblogs.com/ggjucheng/p/3423731.html">JAVA正则表达式：Pattern类与Matcher类详解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一直都有接触正则表达式，但是都是照搬过来使用的程度，没有能系统的学习，也没有留下一些笔记，下次使用还需网上查找资料。此次正好稍微做点记录，方便遗忘后重拾。&lt;/p&gt;
&lt;h3 id=&quot;1-什么是正则表达式&quot;&gt;&lt;a href=&quot;#1-什么是正则表达式&quot; class=&quot;header</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8E%9F%E5%88%99/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8E%9F%E5%88%99/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java的异常处理原则</strong></p><p>Java异常处理中的“反例”：</p><ol><li>丢弃异常</li></ol><p>捕获了异常却不作任何处理，可以算得上Java编程中的杀手。调用一下printStackTrace算不上“处理异常”。既然捕获了异常，就要对它进行适当的处理。不要捕获异常之后又把它丢弃，不予理睬。</p><ol><li>不指定具体的异常</li></ol><p>用一个catch语句捕获所有的异常。最常见的情形就是使用catch（Exception ex）语句。在catch语句中尽可能指定具体的异常类型，必要时使用多个catch.不要试图处理所有可能出现的异常。 </p><ol><li>占用资源不释放</li></ol><p>如果程序用到了文件、Socket、JDBC连接之类的资源，即使遇到了异常，也要正确释放占用的资源。Java提供了一个简化这类操作的关键词finally。 保证所有资源都被正确释放。充分运用finally关键词。 </p><ol><li>不说明异常的详细信息</li></ol><p>在出现异常时，最好能够提供一些文字信息，例如当前正在执行的类、方法和其他状态信息，包括以一种更适合阅读的方式整理和组织printStackTrace提供的信息。 </p><ol><li>过于庞大的try块</li></ol><p>一些新手常常把大量的代码放入单个try块，然后再在catch语句中声明Exception，而不是分离各个可能出现异常的段落并分别捕获其异常。这种做法为分析程序抛出异常的原因带来了困难，因为一大段代码中有太多的地方可能抛出Exception。应尽量减小try块的体积。 </p><ol><li>输出数据不完整</li></ol><p>不完整的数据是Java程序的隐形杀手。出现异常导致输出数据不完整，应该加入提示说明。全面考虑可能出现的异常以及这些异常对执行流程的影响。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java的异常处理原则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java异常处理中的“反例”：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;丢弃异常&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;捕获了异常却不作任何处理，可以算得上Java编程中的杀手。调用一下printStackTrace算不上“处</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%86%E8%8A%82/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%86%E8%8A%82/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<p>（1）. 当类中没有定义构造函数时，系统会指定给该类加上一个空参数的构造函数。这个是类中默认的构造函数。当类中如果自定义了构造函数，这时默认的构造函数就没有了。</p><p>注意: 有时候无参构造函数是必须的，比如用 @RequestBody 接收参数对象，如果没有无参数构造函数，无法正确接收参数，报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON parse error: Can not construct instance of xxx: no suitable constructor found, can not deserialize from Object value</span><br></pre></td></tr></table></figure><p>（2）. 在一个类中可以定义多个构造函数，以进行不同的初始化。多个构造函数存在于类中，是以重载的形式体现的。因为构造函数的名称都相同。</p><p>构造函数与普通函数的区别：</p><ol><li>一般函数是用于定义对象应该具备的功能。而构造函数定义的是，对象在调用功能之前，在建立时，应该具备的一些内容。也就是对象的初始化内容。</li><li>构造函数是在对象建立时由 jvm 调用, 给对象初始化。一般函数是对象建立后，当对象调用该功能时才会执行。</li><li>普通函数可以使用对象多次调用，构造函数就在创建对象时调用。</li><li>构造函数的函数名要与类名一样，而普通的函数只要符合标识符的命名规则即可。</li><li>构造函数没有返回值类型。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;（1）. 当类中没有定义构造函数时，系统会指定给该类加上一个空参数的构造函数。这个是类中默认的构造函数。当类中如果自定义了构造函数，这时默认的构造函数就没有了。&lt;/p&gt;
&lt;p&gt;注意: 有时候无参构造函数是必须的，比如用 @RequestBody 接收参数对象，如果没有无参数</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7%E7%B1%BB/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> format：时间格式，例：yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTimeNow</span><span class="params">(String format)</span>&#123;</span><br><span class="line">        Calendar calendar= Calendar.getInstance();</span><br><span class="line">        SimpleDateFormat dateFormat= <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间的前n天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> format：时间格式，例：yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTimeDayBefore</span><span class="params">(<span class="type">int</span> n, String format)</span>&#123;</span><br><span class="line">        Calendar calendar= Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH, - n); </span><br><span class="line">        SimpleDateFormat dateFormat= <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更加自由的时间字符串获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 当前时间之间 n 个单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> step 步进单位，如 Calendar.MONTH(2)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format 时间格式，如：yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTimeBefore</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> step, String format)</span>&#123;</span><br><span class="line">        Calendar calendar= Calendar.getInstance();</span><br><span class="line">        calendar.add(step, - n); </span><br><span class="line">        SimpleDateFormat dateFormat= <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Jenkins%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Jenkins%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>一开始是仓库没有jar包，编译报错，上传jar后仍然报错，确认信息填写正确。 报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failure to find com.github.sanjusoftware:yamlbeans:jar:1.11 in http://nexus.apusic.net/content/groups/public was cached in the local repository, resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced</span><br></pre></td></tr></table></figure><p>由于之前编译有了缓存信息，后面再编译不会再从远程仓库拉取，需要删掉本地仓库缓存文件。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一开始是仓库没有jar包，编译报错，上传jar后仍然报错，确认信息填写正确。 报错：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Skywalking%E4%BD%BF%E7%94%A8graphql%E6%9F%A5%E8%AF%A2/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Skywalking%E4%BD%BF%E7%94%A8graphql%E6%9F%A5%E8%AF%A2/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查询单个服务的数据信息"><a href="#查询单个服务的数据信息" class="headerlink" title="查询单个服务的数据信息"></a>查询单个服务的数据信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;query&quot;</span>:</span><br><span class="line"><span class="string">&quot;query queryData($serviceId: ID!,$duration: Duration!) &#123;</span></span><br><span class="line"><span class="string">  serviceApdexScore: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_apdex\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;value&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceResponseTime: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_resp_time\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;value&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceThroughput: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_cpm\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;</span></span><br><span class="line"><span class="string">      value</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceSLA: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_sla\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;</span></span><br><span class="line"><span class="string">      value</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  globalPercentile: getMultipleLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;all_percentile\&quot;</span></span><br><span class="line"><span class="string">  &#125;, numOfLinear: 5, duration: $duration) &#123; values &#123; value &#125; &#125;</span></span><br><span class="line"><span class="string">  servicePercentile: getMultipleLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_percentile\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, numOfLinear: 5, duration: $duration) &#123; values &#123; value &#125; &#125;</span></span><br><span class="line"><span class="string">  serviceSlowEndpoint: getEndpointTopN(</span></span><br><span class="line"><span class="string">    serviceId: $serviceId</span></span><br><span class="line"><span class="string">    duration: $duration</span></span><br><span class="line"><span class="string">    name: \&quot;endpoint_avg\&quot;,</span></span><br><span class="line"><span class="string">    topN: 10,</span></span><br><span class="line"><span class="string">    order: DES</span></span><br><span class="line"><span class="string">  ) &#123;</span></span><br><span class="line"><span class="string">    key: id</span></span><br><span class="line"><span class="string">    label: name</span></span><br><span class="line"><span class="string">    value</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceInstanceThroughput: getServiceInstanceTopN(</span></span><br><span class="line"><span class="string">    serviceId: $serviceId</span></span><br><span class="line"><span class="string">    duration: $duration</span></span><br><span class="line"><span class="string">    name: \&quot;service_instance_cpm\&quot;,</span></span><br><span class="line"><span class="string">    topN: 10,</span></span><br><span class="line"><span class="string">    order: DES</span></span><br><span class="line"><span class="string">  ) &#123;</span></span><br><span class="line"><span class="string">    key: id</span></span><br><span class="line"><span class="string">    label: name</span></span><br><span class="line"><span class="string">    value</span></span><br><span class="line"><span class="string">  &#125;&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;variables&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;atabaseId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;duration&quot;</span>:&#123;<span class="string">&quot;start&quot;</span>: <span class="string">&quot;2020-05-18&quot;</span>, <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2020-05-21&quot;</span>, <span class="string">&quot;step&quot;</span>: <span class="string">&quot;DAY&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;endpointId&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line"><span class="string">&quot;endpointName&quot;</span>:<span class="string">&quot;/api/items&quot;</span>,</span><br><span class="line"><span class="string">&quot;instanceId&quot;</span>:<span class="string">&quot;5&quot;</span>,</span><br><span class="line"><span class="string">&quot;serviceId&quot;</span>:<span class="string">&quot;4&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;serviceApdexScore&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">10000</span>&#125;]&#125;,<span class="string">&quot;serviceResponseTime&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,<span class="string">&quot;serviceThroughput&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;]&#125;,<span class="string">&quot;serviceSLA&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">10000</span>&#125;]&#125;,<span class="string">&quot;globalPercentile&quot;</span>:[&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">370</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">410</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">410</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">1560</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">1560</span>&#125;]&#125;],<span class="string">&quot;servicePercentile&quot;</span>:[&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">370</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;],<span class="string">&quot;serviceSlowEndpoint&quot;</span>:[&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;4&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;/api/items&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;],<span class="string">&quot;serviceInstanceThroughput&quot;</span>:[&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;5&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;provider-pid:4920@KFW7BT1P01V035&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-查询一段时间内的服务id和名称"><a href="#2-查询一段时间内的服务id和名称" class="headerlink" title="2. 查询一段时间内的服务id和名称"></a>2. 查询一段时间内的服务id和名称</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: <span class="string">&quot;query queryServices($duration: Duration!) &#123;services: getAllServices(duration: $duration) &#123;id, name&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;variables&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;duration&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;start&quot;</span>: <span class="string">&quot;2020-05-21&quot;</span>,</span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2020-05-22&quot;</span>,</span><br><span class="line">      <span class="string">&quot;step&quot;</span>: <span class="string">&quot;DAY&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;services&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;consumer&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;SpringBootWithSkywalking-HelloTomcat&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello-world-demo&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;provider&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得服务的id和name，可以用来查询响应时间、可用性等指标</p><h4 id="3-根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量"><a href="#3-根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量" class="headerlink" title="3. 根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量"></a>3. 根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;query&quot;</span>:</span><br><span class="line"><span class="string">&quot;query queryData($serviceIds: [ID!]!,$duration: Duration!) &#123;</span></span><br><span class="line"><span class="string">serviceResponseTime: getValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_resp_time\&quot;</span></span><br><span class="line"><span class="string"> ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">  values &#123;id, value&#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">serviceApdexScore: getValues(metric: &#123;</span></span><br><span class="line"><span class="string"> name: \&quot;service_apdex\&quot;</span></span><br><span class="line"><span class="string"> ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123; id,value&#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">    serviceSLA: getValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_sla\&quot;</span></span><br><span class="line"><span class="string">    ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;id, value&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">serviceThroughput: getValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_cpm\&quot;</span></span><br><span class="line"><span class="string">    ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;id, value&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;variables&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;duration&quot;</span>:&#123;<span class="string">&quot;start&quot;</span>: <span class="string">&quot;2020-05-21&quot;</span>, <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2020-05-22&quot;</span>, <span class="string">&quot;step&quot;</span>: <span class="string">&quot;DAY&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;serviceIds&quot;</span>:[<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;7&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;serviceResponseTime&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">191</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">989</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">380</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">144</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serviceApdexScore&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">7500</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serviceSLA&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serviceThroughput&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;查询单个服务的数据信息&quot;&gt;&lt;a href=&quot;#查询单个服务的数据信息&quot; class=&quot;headerlink&quot; title=&quot;查询单个服务的数据信息&quot;&gt;&lt;/a&gt;查询单个服务的数据信息&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Skywalking%E5%AD%A6%E4%B9%A0/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Skywalking%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<p>SkyWalking 中非常重要的三个概念：</p><ul><li>服务(Service) ：表示对请求提供相同行为的一系列或一组工作负载。在使用 Agent 或 SDK 的时候，你可以定义服务的名字。如果不定义的话，SkyWalking 将会使用你在平台（例如说 Istio）上定义的名字。</li><li>服务实例(Service Instance) ：上述的一组工作负载中的每一个工作负载称为一个实例。就像 Kubernetes 中的 pods 一样, 服务实例未必就是操作系统上的一个进程。但当你在使用 Agent 的时候, 一个服务实例实际就是操作系统上的一个真实进程。</li><li>端点(Endpoint) ：对于特定服务所接收的请求路径, 如 HTTP 的 URI 路径和 gRPC 服务的类名 + 方法签名。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SkyWalking 中非常重要的三个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务(Service) ：表示对请求提供相同行为的一系列或一组工作负载。在使用 Agent 或 SDK 的时候，你可以定义服务的名字。如果不定义的话，SkyWalking 将会使用你在平台（例如说 Is</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20boot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20boot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<p>公司职级认证有单元测试要求，花了一天时间把欠下的的补完了。。。</p><h4 id="spring-boot引入单元测试"><a href="#spring-boot引入单元测试" class="headerlink" title="spring boot引入单元测试"></a>spring boot引入单元测试</h4><p>pom.xml 文件中写入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>spring boot中单元测试目录与main同级</p><h4 id="spring-boot使用单元测试"><a href="#spring-boot使用单元测试" class="headerlink" title="spring boot使用单元测试"></a>spring boot使用单元测试</h4><ol><li>快捷生成测试类<br>idea 中选中要测试的类 -&gt; Ctrl+Shift+T 打开创建测试类窗口 -&gt; 选择要测试的方法，创建测试类 生成的类路径为 Test 包下的同名路径。</li><li>自己创建测试类<br>Test 目录下自己创建类。。。</li></ol><p>类创建完成后还需要加上注解，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不同场景下的单元测试"><a href="#不同场景下的单元测试" class="headerlink" title="不同场景下的单元测试"></a>不同场景下的单元测试</h4><ol><li>对于 Controller 层单元测试，使用 @AutoConfigureMockMvc，示例代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LicenseInfoResourceTest</span> <span class="keyword">extends</span> <span class="title class_">AbstractRestControllerTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化MockMvc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试的controller</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> LicenseInfoResource licenseInfoResource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        SecurityContextHolder.clearContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@WithMockUser(username = &quot;admin&quot;, password = &quot;admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getLicenseInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MvcResult</span> <span class="variable">mvcResult</span> <span class="operator">=</span> mvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/license/get_platform_info&quot;</span>))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andReturn();</span><br><span class="line">        System.out.println(<span class="string">&quot;content&quot;</span> + mvcResult.getResponse().getContentAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>对于有运行时环境的要求，当前用户记录等，需要在类或者方法上加上注册变量：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@WithMockUser(username = &quot;admin&quot;, password = &quot;admin&quot;)</span><br></pre></td></tr></table></figure><ol><li>对于单点登陆应用，调用接口需要 token ,可以先获取token，然后加入到请求头中：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取token工具类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LogInUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">OBJECT_MAPPER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">LogInUtils</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTokenForLogin</span><span class="params">(String username, String password, MockMvc mockMvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="comment">// 设置验证码</span></span><br><span class="line">      <span class="type">MockHttpSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockHttpSession</span>();</span><br><span class="line">      session.setAttribute(<span class="string">&quot;vrifyCode&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> mockMvc.perform(post(<span class="string">&quot;/api/authenticate&quot;</span>)</span><br><span class="line">         .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">         .session(session)</span><br><span class="line">         .content(<span class="string">&quot;&#123;\&quot;password\&quot;: \&quot;&quot;</span> + password + <span class="string">&quot;\&quot;, \&quot;username\&quot;: \&quot;&quot;</span> + username + <span class="string">&quot;\&quot;, \&quot;code\&quot;: \&quot;&quot;</span>+ code + <span class="string">&quot;\&quot;&#125;&quot;</span>))</span><br><span class="line">         .andReturn()</span><br><span class="line">         .getResponse()</span><br><span class="line">         .getContentAsString();</span><br><span class="line">      <span class="type">AuthenticationResponse</span> <span class="variable">authResponse</span> <span class="operator">=</span> OBJECT_MAPPER.readValue(content, AuthenticationResponse.class);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> authResponse.getIdToken();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AuthenticationResponse</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@JsonAlias(&quot;id_token&quot;)</span></span><br><span class="line">      <span class="keyword">private</span> String idToken;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIdToken</span><span class="params">(String idToken)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.idToken = idToken;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getIdToken</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> idToken;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 获取token加入到请求头 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createRole</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> LogInUtils.getTokenForLogin(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;admin&quot;</span>, mvc);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;超级管理员2\&quot;,\&quot;remark\&quot;:\&quot;权限\&quot;,\&quot;permissionIds\&quot;:\&quot;1\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">MvcResult</span> <span class="variable">mvcResult</span> <span class="operator">=</span> mvc.perform(MockMvcRequestBuilders.post(<span class="string">&quot;/role/create_role&quot;</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">            .content(json)</span><br><span class="line">            .header(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span> + token))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">            .andDo(MockMvcResultHandlers.print())</span><br><span class="line">            .andReturn();</span><br><span class="line">    System.out.println(<span class="string">&quot;status: &quot;</span> + mvcResult.getResponse().getStatus());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MocMvc详解"><a href="#MocMvc详解" class="headerlink" title="MocMvc详解"></a>MocMvc详解</h4><p>转载自 <a href="https://blog.csdn.net/wo541075754/article/details/88983708">https://blog.csdn.net/wo541075754/article/details/88983708</a></p><ol><li>什么是Mock?<br>模拟对象（mock object），是以可控的方式模拟真实对象行为的假对象。在编程过程中，通常通过模拟一些输入数据，来验证程序是否达到预期结果。使用模拟对象，可以模拟复杂的、真实的对象行为。如果在单元测试中无法使用真实对象，可采用模拟对象进行替代。</li><li>什么是MockMvc？<br>MockMvc是由spring-test包提供，实现了对Http请求的模拟，能够直接使用网络的形式，转换到Controller的调用，使得测试速度快、不依赖网络环境。同时提供了一套验证的工具，结果的验证十分方便。</li><li>spring使用MocMvc<br>spring中使用MockMvcBuilder来构造MocMvc。它有两种实现方式：StandaloneMockMvcBuilder和DefaultMockMvcBuilder，分别对应两种测试方式，即独立安装和集成Web环境测试（并不会集成真正的web环境，而是通过相应的Mock API进行模拟测试，无须启动服务器）。<br>代码示例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringBoot1.4版本之前用的是SpringJUnit4ClassRunner.class</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="comment">//SpringBoot1.4版本之前用的是@SpringApplicationConfiguration(classes = Application.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="comment">//测试环境使用，用来表示测试环境使用的ApplicationContext将是WebApplicationContext类型的</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 实例化方式一</span></span><br><span class="line">mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> <span class="title class_">HelloWorldController</span>()).build();</span><br><span class="line"><span class="comment">// 实例化方式二</span></span><br><span class="line"><span class="comment">//mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单元测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1、mockMvc.perform执行一个请求。</span></span><br><span class="line"><span class="comment"> * 2、MockMvcRequestBuilders.get(&quot;XXX&quot;)构造一个请求。</span></span><br><span class="line"><span class="comment"> * 3、ResultActions.param添加请求传值</span></span><br><span class="line"><span class="comment"> * 4、ResultActions.accept(MediaType.TEXT_HTML_VALUE))设置返回类型</span></span><br><span class="line"><span class="comment"> * 5、ResultActions.andExpect添加执行完成后的断言。</span></span><br><span class="line"><span class="comment"> * 6、ResultActions.andDo添加一个结果处理器，表示要对结果做点什么事情</span></span><br><span class="line"><span class="comment"> *   比如此处使用MockMvcResultHandlers.print()输出整个响应结果信息。</span></span><br><span class="line"><span class="comment"> * 7、ResultActions.andReturn表示执行完成后返回相应的结果。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mockMvc.perform(MockMvcRequestBuilders</span><br><span class="line">.get(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line"><span class="comment">// 设置返回值类型为utf-8，否则默认为ISO-8859-1</span></span><br><span class="line">.accept(MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line">.param(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>))</span><br><span class="line">.andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">.andExpect(MockMvcResultMatchers.content().string(<span class="string">&quot;Hello Tom!&quot;</span>))</span><br><span class="line">.andDo(MockMvcResultHandlers.print());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、准备测试环境</span><br><span class="line">2、通过MockMvc执行请求</span><br><span class="line">3、添加验证断言</span><br><span class="line">4、添加结果处理器</span><br><span class="line">5、得到MvcResult进行自定义断言/进行下一步的异步请求</span><br><span class="line">6、卸载测试环境</span><br></pre></td></tr></table></figure><p>Sping boot2.0后使用MocMvc更加方便，只需要在测试类加上<code>@AutoConfigureMockMvc</code>注解，就可以注入MocMvc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">Test</span>  &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化MockMvc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：如果使用DefaultMockMvcBuilder进行MockMvc实例化时需在SpringBoot启动类上添加组件扫描的package的指定，否则会出现404。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.secbro2&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="一些常用的测试"><a href="#一些常用的测试" class="headerlink" title="一些常用的测试"></a>一些常用的测试</h4><ol><li>测试普通控制器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mockMvc.perform(get(<span class="string">&quot;/user/&#123;id&#125;&quot;</span>, <span class="number">1</span>)) <span class="comment">//执行请求  </span></span><br><span class="line">            .andExpect(model().attributeExists(<span class="string">&quot;user&quot;</span>)) <span class="comment">//验证存储模型数据  </span></span><br><span class="line">            .andExpect(view().name(<span class="string">&quot;user/view&quot;</span>)) <span class="comment">//验证viewName  </span></span><br><span class="line">            .andExpect(forwardedUrl(<span class="string">&quot;/WEB-INF/jsp/user/view.jsp&quot;</span>))<span class="comment">//验证视图渲染时forward到的jsp  </span></span><br><span class="line">            .andExpect(status().isOk())<span class="comment">//验证状态码  </span></span><br><span class="line">            .andDo(print()); <span class="comment">//输出MvcResult到控制台</span></span><br></pre></td></tr></table></figure><ol><li>得到MvcResult自定义验证</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MvcResult result = mockMvc.perform(get(&quot;/user/&#123;id&#125;&quot;, 1))//执行请求  </span><br><span class="line">        .andReturn(); //返回MvcResult  </span><br><span class="line">Assert.assertNotNull(result.getModelAndView().getModel().get(&quot;user&quot;)); //自定义断言 </span><br></pre></td></tr></table></figure><ol><li>验证请求参数绑定到模型数据及Flash属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mockMvc.perform(post(<span class="string">&quot;/user&quot;</span>).param(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhang&quot;</span>)) <span class="comment">//执行传递参数的POST请求(也可以post(&quot;/user?name=zhang&quot;))  </span></span><br><span class="line">            .andExpect(handler().handlerType(UserController.class)) <span class="comment">//验证执行的控制器类型  </span></span><br><span class="line">            .andExpect(handler().methodName(<span class="string">&quot;create&quot;</span>)) <span class="comment">//验证执行的控制器方法名  </span></span><br><span class="line">            .andExpect(model().hasNoErrors()) <span class="comment">//验证页面没有错误  </span></span><br><span class="line">            .andExpect(flash().attributeExists(<span class="string">&quot;success&quot;</span>)) <span class="comment">//验证存在flash属性  </span></span><br><span class="line">            .andExpect(view().name(<span class="string">&quot;redirect:/user&quot;</span>)); <span class="comment">//验证视图  </span></span><br></pre></td></tr></table></figure><ol><li>文件上传</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">byte[] bytes = new byte[] &#123;1, 2&#125;;  </span><br><span class="line">mockMvc.perform(fileUpload(&quot;/user/&#123;id&#125;/icon&quot;, 1L).file(&quot;icon&quot;, bytes)) //执行文件上传  </span><br><span class="line">        .andExpect(model().attribute(&quot;icon&quot;, bytes)) //验证属性相等性  </span><br><span class="line">        .andExpect(view().name(&quot;success&quot;)); //验证视图 </span><br></pre></td></tr></table></figure><ol><li>JSON请求&#x2F;响应验证</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">requestBody</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:1, \&quot;name\&quot;:\&quot;zhang\&quot;&#125;&quot;</span>;  </span><br><span class="line">    mockMvc.perform(post(<span class="string">&quot;/user&quot;</span>)  </span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON).content(requestBody)  </span><br><span class="line">            .accept(MediaType.APPLICATION_JSON)) <span class="comment">//执行请求  </span></span><br><span class="line">            .andExpect(content().contentType(MediaType.APPLICATION_JSON)) <span class="comment">//验证响应contentType  </span></span><br><span class="line">            .andExpect(jsonPath(<span class="string">&quot;$.id&quot;</span>).value(<span class="number">1</span>)); <span class="comment">//使用Json path验证JSON 请参考http://goessner.net/articles/JsonPath/  </span></span><br><span class="line">      </span><br><span class="line">    <span class="type">String</span> <span class="variable">errorBody</span> <span class="operator">=</span> <span class="string">&quot;&#123;id:1, name:zhang&#125;&quot;</span>;  </span><br><span class="line">    <span class="type">MvcResult</span> <span class="variable">result</span> <span class="operator">=</span> mockMvc.perform(post(<span class="string">&quot;/user&quot;</span>)  </span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON).content(errorBody)  </span><br><span class="line">            .accept(MediaType.APPLICATION_JSON)) <span class="comment">//执行请求  </span></span><br><span class="line">            .andExpect(status().isBadRequest()) <span class="comment">//400错误请求  </span></span><br><span class="line">            .andReturn();  </span><br><span class="line">      </span><br><span class="line">    Assert.assertTrue(HttpMessageNotReadableException.class.isAssignableFrom(result.getResolvedException().getClass()));<span class="comment">//错误的请求内容体</span></span><br></pre></td></tr></table></figure><ol><li>异步测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Callable  </span></span><br><span class="line">    <span class="type">MvcResult</span> <span class="variable">result</span> <span class="operator">=</span> mockMvc.perform(get(<span class="string">&quot;/user/async1?id=1&amp;name=zhang&quot;</span>)) <span class="comment">//执行请求  </span></span><br><span class="line">            .andExpect(request().asyncStarted())  </span><br><span class="line">            .andExpect(request().asyncResult(CoreMatchers.instanceOf(User.class))) <span class="comment">//默认会等10秒超时  </span></span><br><span class="line">            .andReturn();  </span><br><span class="line">      </span><br><span class="line">    mockMvc.perform(asyncDispatch(result))  </span><br><span class="line">            .andExpect(status().isOk())  </span><br><span class="line">            .andExpect(content().contentType(MediaType.APPLICATION_JSON))  </span><br><span class="line">            .andExpect(jsonPath(<span class="string">&quot;$.id&quot;</span>).value(<span class="number">1</span>));  </span><br><span class="line"><span class="comment">//Callable  </span></span><br><span class="line">    <span class="type">MvcResult</span> <span class="variable">result</span> <span class="operator">=</span> mockMvc.perform(get(<span class="string">&quot;/user/async1?id=1&amp;name=zhang&quot;</span>)) <span class="comment">//执行请求  </span></span><br><span class="line">            .andExpect(request().asyncStarted())  </span><br><span class="line">            .andExpect(request().asyncResult(CoreMatchers.instanceOf(User.class))) <span class="comment">//默认会等10秒超时  </span></span><br><span class="line">            .andReturn();  </span><br><span class="line">      </span><br><span class="line">    mockMvc.perform(asyncDispatch(result))  </span><br><span class="line">            .andExpect(status().isOk())  </span><br><span class="line">            .andExpect(content().contentType(MediaType.APPLICATION_JSON))  </span><br><span class="line">            .andExpect(jsonPath(<span class="string">&quot;$.id&quot;</span>).value(<span class="number">1</span>));  </span><br></pre></td></tr></table></figure><ol><li>全局配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mockMvc = webAppContextSetup(wac)  </span><br><span class="line">            .defaultRequest(get(<span class="string">&quot;/user/1&quot;</span>).requestAttr(<span class="string">&quot;default&quot;</span>, <span class="literal">true</span>)) <span class="comment">//默认请求 如果其是Mergeable类型的，会自动合并的哦mockMvc.perform中的RequestBuilder  </span></span><br><span class="line">            .alwaysDo(print())  <span class="comment">//默认每次执行请求后都做的动作  </span></span><br><span class="line">            .alwaysExpect(request().attribute(<span class="string">&quot;default&quot;</span>, <span class="literal">true</span>)) <span class="comment">//默认每次执行后进行验证的断言  </span></span><br><span class="line">            .build();  </span><br><span class="line">      </span><br><span class="line">    mockMvc.perform(get(<span class="string">&quot;/user/1&quot;</span>))  </span><br><span class="line">            .andExpect(model().attributeExists(<span class="string">&quot;user&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;公司职级认证有单元测试要求，花了一天时间把欠下的的补完了。。。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot引入单元测试&quot;&gt;&lt;a href=&quot;#spring-boot引入单元测试&quot; class=&quot;headerlink&quot; title=&quot;spring boot引入单元测试&quot;&gt;</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20boot%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20boot%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-加载自定义文件"><a href="#1-加载自定义文件" class="headerlink" title="1. 加载自定义文件"></a>1. 加载自定义文件</h4><blockquote><p>YAML files cannot be loaded by using the @PropertySource annotation. So, in the case that you need to load values that way, you need to use a properties file.<br>即@PropertySource不支持YAML文件。</p></blockquote><p>要让@PropertySource支持Yaml文件，可以做如下配置：</p><p>继承DefaultPropertySourceFactory类并修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YamlConfigFactory</span> <span class="keyword">extends</span> <span class="title class_">DefaultPropertySourceFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sourceName</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name : resource.getResource().getFilename();</span><br><span class="line">        <span class="keyword">if</span> (!resource.getResource().exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertiesPropertySource</span>(sourceName, <span class="keyword">new</span> <span class="title class_">Properties</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sourceName.endsWith(<span class="string">&quot;.yml&quot;</span>) || sourceName.endsWith(<span class="string">&quot;.yaml&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">propertiesFromYaml</span> <span class="operator">=</span> loadYml(resource);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertiesPropertySource</span>(sourceName, propertiesFromYaml);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.createPropertySource(name, resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties <span class="title function_">loadYml</span><span class="params">(EncodedResource resource)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">YamlPropertiesFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YamlPropertiesFactoryBean</span>();</span><br><span class="line">        factory.setResources(resource.getResource());</span><br><span class="line">        factory.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> factory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:application-my.yml&quot;&#125;,factory = YamlConfigFactory.class)</span></span><br></pre></td></tr></table></figure><h4 id="2-spring-boot中配置文件访问优先级"><a href="#2-spring-boot中配置文件访问优先级" class="headerlink" title="2. spring boot中配置文件访问优先级"></a>2. spring boot中配置文件访问优先级</h4><p>优先级如下</p><ol><li>第一种是在执行命令的目录下建config文件夹，然后把配置文件放到这个文件夹下。(在jar包的同一个目录下建config文件夹，执行命令需要在jar包所在目录下才行)</li><li>第二种是直接把配置文件放到jar包的同级目录</li><li>第三种在classpath下建一个config文件夹，然后把配置文件放进去。</li><li>第四种是在classpath下直接放配置文件。</li></ol><p>springboot默认是优先读取它本身同级目录下的一个config&#x2F;application.properties文件的。在src&#x2F;main&#x2F;resource文件夹下创建的application.properties文件的优先级是最低的</p><p>所以springboot启动读取外部配置文件，只需要在外面加一层配置文件覆盖默认的即可，不用修改代码</p><h4 id="3-指定配置文件路径启动程序"><a href="#3-指定配置文件路径启动程序" class="headerlink" title="3. 指定配置文件路径启动程序"></a>3. 指定配置文件路径启动程序</h4><p>#通过 –spring.config.location指定配置文件路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -Xms256M -Xmx1024M -jar  mailgateway-<span class="number">2.0</span><span class="number">.0</span><span class="number">.12</span>.jar --spring.config.location=/usr/ums_chenly/application-prod.properties --spring.profiles.active=prod &gt; mailgateway_nohup_out_`date +%Y%m%d`.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><p>说明</p><ol><li>如果启动程序时指定配置文件路径，则程序运行时只读取指定的配置文件。指定配置文件不存在则报错，程序启动失败。</li><li>如果不指定配置文件路径，则按上述优先级加载，如果优先级高的配置文件中没有某个配置项，则会到优先级低的配置文件中找该配置项，即具有互补功能(文件名相同才会互补，比如classpath下的application-prod.properties会补jar包的同级目录下application-prod.properties的某个配置项，但是classpath下的application.properties不会补application-prod.properties的某个配置项)。如果指定配置文件路径，则不互补，只会读取指定的配置文件。</li><li>如果spring.config.location和 spring.profiles.active都不指定， 默认找application.properties文件。如果spring.profiles.active指定dev，则默认找application-dev.properties文件。如果spring.profiles.active指定prod,则会找application-prod.properties文件</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-加载自定义文件&quot;&gt;&lt;a href=&quot;#1-加载自定义文件&quot; class=&quot;headerlink&quot; title=&quot;1. 加载自定义文件&quot;&gt;&lt;/a&gt;1. 加载自定义文件&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;YAML files cannot be loaded</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20security%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20security%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<p>配置适配器 WebSecurityConfigurerAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  spring security 核心配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrowerSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span>  <span class="comment">//自定义的安全元   数据源     实现FilterInvocationSecurityMetadataSource</span></span><br><span class="line">    <span class="keyword">private</span> MyInvocationSecurityMetadataSourceService myInvocationSecurityMetadataSourceService;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//自定义访问决策器</span></span><br><span class="line">    <span class="keyword">private</span> MyAccessDecisionManager myAccessDecisionManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  from表单登录设置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;&quot;</span>)                      <span class="comment">//登录页面                      /login</span></span><br><span class="line">                .passwordParameter(<span class="string">&quot;&quot;</span>)              <span class="comment">//设置form表单中对应的name参数  默认为 password   下同</span></span><br><span class="line">                .usernameParameter(<span class="string">&quot;&quot;</span>)              <span class="comment">//</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;&quot;</span>)            <span class="comment">//认证成功后的跳转页面 默认跳转页面   可以设置是否总是默认  不是的话可以跳转与用户的target-url</span></span><br><span class="line">                .failureUrl(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                .failureForwardUrl(<span class="string">&quot;&quot;</span>)            <span class="comment">//登录失败 转发 的url</span></span><br><span class="line">                .successForwardUrl(<span class="string">&quot;&quot;</span>)              <span class="comment">//登录成功 转发 的url  与successHandler对应  即处理完后请求转发的url</span></span><br><span class="line">                .failureHandler(<span class="literal">null</span>)               <span class="comment">//自定义的认证失败 做什么处理</span></span><br><span class="line">                .successHandler(<span class="literal">null</span>)               <span class="comment">//自定义认证成功 后做的处理    ----- 例如 想记录用户信息判断用户状态等</span></span><br><span class="line">                .permitAll()                      <span class="comment">//对于需要所有用户都可以访问的界面 或者url进行设置</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;&quot;</span>)             <span class="comment">//自定义处理认证的url    默认为    /login</span></span><br><span class="line">                .authenticationDetailsSource(<span class="literal">null</span>)  <span class="comment">//自定义身份验证的数据源  理解为查出数据库中的密码 和权限（可以不加） 然后再交给security</span></span><br><span class="line">                <span class="comment">////修改和替换配置     已经配置好的修改   例如下面修改  安全拦截器的安全数据源</span></span><br><span class="line">                .withObjectPostProcessor(<span class="keyword">new</span> <span class="title class_">ObjectPostProcessor</span>&lt;FilterSecurityInterceptor&gt;() &#123;</span><br><span class="line">                    <span class="keyword">public</span> &lt;O <span class="keyword">extends</span> <span class="title class_">FilterSecurityInterceptor</span>&gt; O <span class="title function_">postProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">                            O fsi)</span> &#123;</span><br><span class="line">                        fsi.setPublishAuthorizationSuccess(<span class="literal">true</span>);</span><br><span class="line">                        <span class="comment">//修改成自定义的     安全元数据源  权限的源  ！！！！！</span></span><br><span class="line">                        fsi.setSecurityMetadataSource(myInvocationSecurityMetadataSourceService);</span><br><span class="line">                        <span class="comment">//修改成自定义的     访问决策器  自定义的</span></span><br><span class="line">                        fsi.setAccessDecisionManager(myAccessDecisionManager);</span><br><span class="line">                        <span class="comment">//使用系统的</span></span><br><span class="line">                        fsi.setAuthenticationManager(authenticationManager);</span><br><span class="line">                        <span class="keyword">return</span> fsi;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  请求认证管理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;url匹配路径&quot;</span>).permitAll()          <span class="comment">//url匹配路径 permitAll 运行 全部访问 不用认证</span></span><br><span class="line">                .accessDecisionManager(<span class="literal">null</span>)                                 <span class="comment">//访问决策器</span></span><br><span class="line">                .filterSecurityInterceptorOncePerRequest(<span class="literal">true</span>)               <span class="comment">//过滤每个请求一次的安全拦截器 ？？？</span></span><br><span class="line">                .anyRequest().authenticated()                                <span class="comment">//其他的请求 需要认证，</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)      <span class="comment">//url匹配路径  具有怎样的角色</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;</span>)   <span class="comment">//url匹配路径    具有怎样的角色 或者是权限</span></span><br><span class="line">        ;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  anonymous</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  匿名访问时  存在默认 用户名  annonymousUser</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.anonymous().disable().csrf().disable();                         <span class="comment">//禁止匿名  关闭csrf</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 登出操作管理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.logout()                                                        <span class="comment">//登出处理</span></span><br><span class="line">                .logoutUrl(<span class="string">&quot;/my/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/my/index&quot;</span>)</span><br><span class="line">                .logoutSuccessHandler(<span class="literal">null</span>)</span><br><span class="line">                .invalidateHttpSession(<span class="literal">true</span>)</span><br><span class="line">                .addLogoutHandler(<span class="literal">null</span>)</span><br><span class="line">                .deleteCookies(<span class="string">&quot;cookieNamesToClear&quot;</span>)</span><br><span class="line">        ;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  session  会话管理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.sessionManagement()                                            <span class="comment">//session管理</span></span><br><span class="line">                .maximumSessions(<span class="number">2</span>)                                         <span class="comment">//最大session 数量 --用户</span></span><br><span class="line">                .maxSessionsPreventsLogin(<span class="literal">false</span>)                            <span class="comment">//超过最大sessin数量后时候阻止登录</span></span><br><span class="line">                .expiredUrl(<span class="string">&quot;/&quot;</span>)                                            <span class="comment">//会话失效后跳转的url</span></span><br><span class="line">                .expiredSessionStrategy(<span class="literal">null</span>)                               <span class="comment">//自定义session 过期错略</span></span><br><span class="line">                .sessionRegistry(<span class="literal">null</span>)                                     <span class="comment">//自定义的session 注册 表</span></span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *   基础的配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        auth</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 认证 时触发的事件</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .authenticationEventPublisher(<span class="literal">null</span>)</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 *  用户细节服务</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 *  认证管理器数据的来源 吧  用户身份凭证信息和 权限信息</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .userDetailsService(<span class="literal">null</span>)</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 *  密码编辑器 对密码进行加密</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .passwordEncoder(<span class="literal">null</span>)</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 不进行拦截的mvc</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        web.ignoring().mvcMatchers();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加自定义的 安全过滤器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        web.addSecurityFilterChainBuilder(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;配置适配器 WebSecurityConfigurerAdapter&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/acmp%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/acmp%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得到Instant格式的今天的最小日期，用于比对。"><a href="#1-数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得到Instant格式的今天的最小日期，用于比对。" class="headerlink" title="1. 数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得到Instant格式的今天的最小日期，用于比对。"></a>1. 数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得到Instant格式的今天的最小日期，用于比对。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">minTime</span> <span class="operator">=</span> localDate.atTime(LocalTime.MIN);</span><br><span class="line"><span class="type">Instant</span> <span class="variable">today</span> <span class="operator">=</span> minTime.toInstant(ZoneOffset.of(<span class="string">&quot;+0&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="2-物理分页查询（数据库分页）"><a href="#2-物理分页查询（数据库分页）" class="headerlink" title="2. 物理分页查询（数据库分页）"></a>2. 物理分页查询（数据库分页）</h4><p>业务场景：查询数据库表联系人分页，筛选条件pid、status、name；按创建时间降序排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Specification&lt;AlarmContact&gt; specification = (Specification&lt;AlarmContact&gt;) (root, query, criteriaBuilder) -&gt; &#123;</span><br><span class="line">            List&lt;Predicate&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(criteriaBuilder.equal(root.get(<span class="string">&quot;projectId&quot;</span>), projectId));</span><br><span class="line">            list.add(criteriaBuilder.equal(root.get(<span class="string">&quot;status&quot;</span>), ResourceStatus.ENABLE));</span><br><span class="line">            <span class="keyword">if</span> (name.length() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 此处为查询含有name的数据</span></span><br><span class="line">                list.add(criteriaBuilder.like(root.get(<span class="string">&quot;name&quot;</span>),<span class="string">&quot;%&quot;</span>+ name +<span class="string">&quot;%&quot;</span> ));</span><br><span class="line">            &#125;</span><br><span class="line">            Predicate[] p = <span class="keyword">new</span> <span class="title class_">Predicate</span>[list.size()];</span><br><span class="line">            <span class="keyword">return</span> criteriaBuilder.and(list.toArray(p));</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageRequest</span>(page, limit, Sort.Direction.DESC, <span class="string">&quot;createdDate&quot;</span>);</span><br><span class="line">Page&lt;AlarmContact&gt; alarmContact，Page = alarmContactRepository.findAll(specification, pageable);</span><br></pre></td></tr></table></figure><h4 id="3-集合分页"><a href="#3-集合分页" class="headerlink" title="3. 集合分页"></a>3. 集合分页</h4><p>业务场景：拥有用户的集合，需要将这个集合进行分页返回给前端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList;<span class="comment">//默认已经有List数据</span></span><br><span class="line"><span class="comment">//根据传进来的用户名字进行模糊筛选</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> != name.length())&#123;</span><br><span class="line">            List&lt;User&gt; temList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            temList.addAll(userList);</span><br><span class="line">            <span class="keyword">for</span>(User user : temList)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!user.getUsername().contains(name))&#123;</span><br><span class="line">                    userList.remove(user);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//集合转Page</span></span><br><span class="line"><span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageRequest</span>(page, limit, Sort.Direction.ASC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">// 当前页第一条数据在List中的位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> (<span class="type">int</span>)pageable.getOffset();</span><br><span class="line"><span class="comment">// 当前页最后一条数据在List中的位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> (start + pageable.getPageSize()) &gt; userList.size() ? userList.size() : ( start + pageable.getPageSize());</span><br><span class="line"><span class="comment">// 配置分页数据</span></span><br><span class="line">Page&lt;User&gt; userPagePage = <span class="keyword">new</span> <span class="title class_">PageImpl</span>&lt;&gt;(userList.subList(start, end), pageable, userList.size());</span><br></pre></td></tr></table></figure><h4 id="4-树的相关操作"><a href="#4-树的相关操作" class="headerlink" title="4. 树的相关操作"></a>4. 树的相关操作</h4><p>业务场景：在做权限控制的时候，权限是树的形式，根据前端需求需要提供不同的数据格式。</p><ol><li>求出当前用户的所有具体权限（叶子节点）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;Permission&gt; <span class="title function_">getEXactPermission</span><span class="params">()</span> &#123;</span><br><span class="line">    Set&lt;Role&gt; roles = userRoleRepository.findByUserId(userCache.getId()).stream().map(userRole -&gt; userRole.getRole()).collect(Collectors.toSet());</span><br><span class="line">    Set&lt;Permission&gt; permissions = roles.stream().flatMap(role -&gt; role.getPermissions().stream()).collect(Collectors.toSet());</span><br><span class="line">    Set&lt;Permission&gt; exactPermissions = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Permission permission : permissions)&#123;</span><br><span class="line">    Set&lt;Permission&gt; permissions1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    findTreeleafs(permission, permissions1);</span><br><span class="line">    exactPermissions.addAll(permissions1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exactPermissions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归遍历树的叶子节点，如果只有一个节点，它也是叶子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findTreeleafs</span><span class="params">(Permission permission, Set&lt;Permission&gt; permissionSet)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(permission.getChildren().size() == <span class="number">0</span>)&#123;</span><br><span class="line">        permissionSet.add(permission);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(Permission permission1 : permission.getChildren())&#123;</span><br><span class="line">        <span class="keyword">if</span> (permission.getChildren().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            permissionSet.addAll(permission.getChildren());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            findTreeleafs(permission1, permissionSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>获取权限子树。就是用户拥有权限的完整路径</li></ol><p>思路：获取用户的具体权限集合（叶子节点），删除完整树中没有达到集合中的路径。</p><h4 id="5-spring-boot-JPA多条件查询"><a href="#5-spring-boot-JPA多条件查询" class="headerlink" title="5. spring boot JPA多条件查询"></a>5. spring boot JPA多条件查询</h4><p>1）Repository需要继承JpaRepository和JpaSpecificationExecutor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">projectRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Project, Long&gt;, JpaSpecificationExecutor&lt;Project&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）构建筛选器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分页查询获取分页列表</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> companyId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> Page&lt;Project&gt; <span class="title function_">getListByCompanyPage</span><span class="params">(PageFilter pageFilter,String companyId,Date beginDate,Date endDate,String projectName)</span> &#123;</span><br><span class="line">       Page&lt;Project&gt; l=projectRepository.findAll(<span class="keyword">new</span> <span class="title class_">Specification</span>&lt;Project&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Predicate <span class="title function_">toPredicate</span><span class="params">(Root&lt;Project&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder cBuilder)</span> &#123;</span><br><span class="line">               <span class="comment">//开始，定义一个Predicate</span></span><br><span class="line">               Predicat  <span class="type">e</span> <span class="variable">p</span> <span class="operator">=</span> cBuilder.conjunction();</span><br><span class="line">               <span class="comment">/**精确查询**/</span></span><br><span class="line">               p = cBuilder.and(p, cBuilder.equal(root.get(<span class="string">&quot;companyId&quot;</span>), companyId));</span><br><span class="line">               <span class="comment">/**模糊查询**/</span></span><br><span class="line">               p = cBuilder.and(p, cBuilder.like(root.get(<span class="string">&quot;projectName&quot;</span>), <span class="string">&quot;%&quot;</span>+projectName+<span class="string">&quot;%&quot;</span>));</span><br><span class="line">               <span class="comment">/**时间段查询**/</span></span><br><span class="line">               <span class="comment">//大于等于开始时间</span></span><br><span class="line">               p = cBuilder.and(p, cBuilder.greaterThanOrEqualTo(root.get(<span class="string">&quot;createTime&quot;</span>), beginDate));</span><br><span class="line">               <span class="comment">//小于等于结束时间</span></span><br><span class="line">               p = cBuilder.and(p, cBuilder.lessThanOrEqualTo(root.get(<span class="string">&quot;createTime&quot;</span>), endDate));</span><br><span class="line">               <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, pageFilter.getPageRequest());</span><br><span class="line">       <span class="keyword">return</span> l;</span><br></pre></td></tr></table></figure><h4 id="6-jpa-delete无法删除"><a href="#6-jpa-delete无法删除" class="headerlink" title="6. jpa delete无法删除"></a>6. jpa delete无法删除</h4><p>问题描述：两张表表1和表2通过一张中间表表3关联，都是一对多关系。表1的一条记录 a 已经和表2的记录 b 关联起来了。逻辑删除 a 记录，现在需要删除 b 记录，表3的关联记录还存在，要先根据 b 记录删掉表3的关联记录，但是此时用 JPA 的 deleteAllBy… 不生效，非常疑惑，自定义 sql 删除生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query(&quot;delete from UserRole where role.id = ?1&quot;)</span></span><br></pre></td></tr></table></figure><p>解答：看到网上有说法说是 JPA 的 entity 对象生命周期问题，由于表 1 还存在记录的引用，之后会更新回来。。。</p><h4 id="7-分页查询结果集中某个属性等于某个值的元素排在前面"><a href="#7-分页查询结果集中某个属性等于某个值的元素排在前面" class="headerlink" title="7. 分页查询结果集中某个属性等于某个值的元素排在前面"></a>7. 分页查询结果集中某个属性等于某个值的元素排在前面</h4><p>业务场景：分页查询数据库，状态为 ON 的值排在前面，且根据最后修改时间排序。</p><p>分析讨论：Java分页查询的排序并不是很难，特别是使用Pagable时排序非常方便，但是一般的排序都市按照升序或者降序排序，根据某个属性的特定值排序很少看见，头疼。</p><p>问题解决：</p><p>1）偷懒办法，如果只有两种状态，仍然可以用升序降序进行排序，这时候比较的就是两种不同值的相对大小（数值、字符串类型等）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Sort</span> <span class="variable">sort</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Sort</span>(Sort.Direction.DESC, <span class="string">&quot;status&quot;</span>).and(<span class="keyword">new</span> <span class="title class_">Sort</span>(Sort.Direction.DESC, <span class="string">&quot;lastModifiedDate&quot;</span>));</span><br><span class="line"><span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageRequest</span>(page, limit, sort);</span><br></pre></td></tr></table></figure><p>2）有多种不同状态时，可以使用 sql 语句进行查询 </p><p>3）查询出元素集合列表，进行排序，然后对集合进行分页。</p><h4 id="8-读取-jar-包中MANIFEST-MF文件信息"><a href="#8-读取-jar-包中MANIFEST-MF文件信息" class="headerlink" title="8. 读取 jar 包中MANIFEST.MF文件信息"></a>8. 读取 jar 包中MANIFEST.MF文件信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过JarFile的getJarEntry方法读取META-INF/MANIFEST.MF</span></span><br><span class="line">jarFile = <span class="keyword">new</span> <span class="title class_">JarFile</span>(jarFilePath);</span><br><span class="line"><span class="type">JarEntry</span> <span class="variable">entry</span> <span class="operator">=</span> jarFile.getJarEntry(<span class="string">&quot;META-INF/MANIFEST.MF&quot;</span>);</span><br><span class="line"><span class="comment">// 如果读取到MANIFEST.   F文件内容，则转换为string</span></span><br><span class="line"><span class="keyword">if</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span>  jarFile.getInputStream(entry);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        sb.append(line+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="9-编写泛型方法"><a href="#9-编写泛型方法" class="headerlink" title="9. 编写泛型方法"></a>9. 编写泛型方法</h4><p>错误示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Page&lt;T&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> limit, List&lt;T&gt; data)</span>&#123;    <span class="comment">// ... &#125;</span></span><br></pre></td></tr></table></figure><p>实际使用时候会报类型无法匹配的错误。</p><p>正确写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; Page&lt;T&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> limit, List&lt;T&gt; data)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-Java中父类能不能强转为子类？"><a href="#10-Java中父类能不能强转为子类？" class="headerlink" title="10. Java中父类能不能强转为子类？"></a>10. Java中父类能不能强转为子类？</h4><p>一般来说父类是不能强转为子类对象的，因为子类中可能包含父类没有的属性或方法，父类强转子类会存在不确定性。</p><blockquote><p>《java面向对象程序设计（第2版）》，一个父类类型的对象如果是用子类new出来的时候, 就不能称之为父类对象，而是一个子类的上转型对象。这两者是有区别的，区别的其中一点就是父类对象不可强制转换为子类对象，而子类的上转型对象可以强制转换回子类对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">       <span class="type">Father</span> <span class="variable">father2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">       <span class="type">Son</span> <span class="variable">son1</span> <span class="operator">=</span> (Son) father1;<span class="comment">//报错</span></span><br><span class="line">       <span class="type">Son</span> <span class="variable">son2</span> <span class="operator">=</span> (Son) father2;<span class="comment">//不报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上看到很搞笑的一段描述：孙子可能会装大爷，大爷永远不会装孙子。</p><p>哈哈，非常贴切生动了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得到Instant格式的今天的最小日期，用于比对。&quot;&gt;&lt;a href=&quot;#1-数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/idea+maven+git%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/15/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/idea+maven+git%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</id>
    <published>2022-12-15T16:08:19.927Z</published>
    <updated>2022-12-15T16:08:19.927Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-jdk安装"><a href="#1-jdk安装" class="headerlink" title="1. jdk安装"></a>1. jdk安装</h4><p>网上下载jdk，运行安装程序</p><p>配置环境变量：</p><ul><li>系统变量-&gt;新增-&gt;变量名：JAVA_HOME，变量值：java安装根目录</li><li>path变量-&gt;新增 -&gt;%JAVA_HOME%\bin</li></ul><p>控制台输入<code>java -version</code>验证</p><h4 id="2-idea安装"><a href="#2-idea安装" class="headerlink" title="2. idea安装"></a>2. idea安装</h4><p>百度搜索下载安装、破解，没啥好说的</p><h4 id="3-maven安装"><a href="#3-maven安装" class="headerlink" title="3. maven安装"></a>3. maven安装</h4><p><a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a> 下载二进制安装包，直接解压到磁盘</p><p>配置环境变量：</p><ul><li>系统变量-&gt;新增-&gt;变量名：MAVEN_HOME，变量值：maven根目录</li><li>path变量-&gt;新增 -&gt;%MAVEN_HOME%\bin</li></ul><p>控制台输入<code>mvn -v</code>验证</p><p>配置本地仓库和远程仓库：打开%MAVEN_HOME%\conf\settings.xml文件，编辑</p><ul><li>本地仓库：解开localRepository标签注释，将地址改为要设置的本地仓库地址</li><li>远程仓库：在mirrors标签中添加子标签如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;      </span><br><span class="line">  &lt;id&gt;nexus-aliyun&lt;/id&gt;    </span><br><span class="line">  &lt;name&gt;nexus-aliyun&lt;/name&gt;  </span><br><span class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;    </span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;      </span><br><span class="line">&lt;/mirror&gt;  </span><br></pre></td></tr></table></figure><h4 id="4-git安装"><a href="#4-git安装" class="headerlink" title="4. git安装"></a>4. git安装</h4><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 下载安装程序，会有很多安装选项，可以一路选择默认选项，安装完成</p><p>安装过程会自动添加git环境变量，不再需要手动配置</p><p>控制台输入<code>git --version</code>验证</p><p>配置git 用户和邮箱:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name [github注册用户名]</span><br><span class="line">git config --global user.email [github邮箱]</span><br><span class="line">git config --global user.password [用户密码]</span><br><span class="line">git config --list   查看当前配置</span><br><span class="line"># 需要修改信息的话重新运行以上命令即可</span><br></pre></td></tr></table></figure><p>常用命令：</p><ul><li>git init ：给项目添加仓库</li><li>git add . ：添加项目下的所有文件到仓库中，也可以指定文件</li><li>git commit -m [提交时的描述信息] ：提交时的附带信息</li><li>git remote add origin [自己的仓库url地址] ：将本地的仓库关联到github的仓库，需要先在github上创建仓库</li><li>git push -u origin master ：项目上传到github仓库中</li><li>git clone [github仓库url地址] :克隆项目到当前目录下</li></ul><h4 id="5-idea使用maven"><a href="#5-idea使用maven" class="headerlink" title="5. idea使用maven"></a>5. idea使用maven</h4><p>File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Maven :</p><ul><li>Maven home directory -&gt; 选择%MAVEN_HOME%</li><li>User settings file -&gt; 选择%MAVEN_HOME%\conf\settings</li><li>Local repository -&gt; 选择本地仓库</li></ul><p>出现版本不兼容的bug:<br>idea version：2019.1.1<br>maven version：3.6.3<br>问题描述：pom文件导入依赖包时报错<code>No implementation for org.apache.maven.model.path.PathTranslator was bound</code><br>解决办法：升级idea版本或者降低maven版本。</p><h4 id="6-idea使用git"><a href="#6-idea使用git" class="headerlink" title="6. idea使用git"></a>6. idea使用git</h4><p>从github仓库中下载项目到本地：</p><ul><li>settings -&gt; 配置git.exe</li><li>首页选择check out from version control，登录github，输入账号密码，就可以选择要下载的仓库了</li></ul><p>本地项目更新到gitbub仓库中：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-jdk安装&quot;&gt;&lt;a href=&quot;#1-jdk安装&quot; class=&quot;headerlink&quot; title=&quot;1. jdk安装&quot;&gt;&lt;/a&gt;1. jdk安装&lt;/h4&gt;&lt;p&gt;网上下载jdk，运行安装程序&lt;/p&gt;
&lt;p&gt;配置环境变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统变量-</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
</feed>

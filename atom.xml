<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dalin blog</title>
  
  
  <link href="https://tianxiafeiyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://tianxiafeiyu.github.io/"/>
  <updated>2022-12-16T07:12:54.168Z</updated>
  <id>https://tianxiafeiyu.github.io/</id>
  
  <author>
    <name>Dalin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python单例模式实现</title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/python/python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/python/python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-12-16T07:12:54.168Z</published>
    <updated>2022-12-16T07:12:54.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">def singleton(cls):</span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    @wraps(cls)</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        with lock:</span><br><span class="line">            if cls not in instances:</span><br><span class="line">                instances[cls] = cls(*args, **kwargs)</span><br><span class="line">            return instances[cls]</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@singleton</span><br><span class="line">class MyClass:</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        print(&#x27;MyClass.__init__ called.&#x27;)</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def cls_method(cls, *args, **kwargs):</span><br><span class="line">        print(&#x27;Myclass classmethod called.&#x27;)</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [2]: a = MyClass(1, 2)</span><br><span class="line">MyClass.__init__ called.</span><br><span class="line"></span><br><span class="line">In [3]: b = MyClass(3,4,5)</span><br><span class="line"></span><br><span class="line">In [4]: a is b</span><br><span class="line">Out[4]: True</span><br><span class="line"></span><br><span class="line">In [5]: a.__dict__</span><br><span class="line">Out[5]: &#123;&#x27;args&#x27;: (1, 2), &#x27;kwargs&#x27;: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">In [6]: b.__dict__</span><br><span class="line">Out[6]: &#123;&#x27;args&#x27;: (1, 2), &#x27;kwargs&#x27;: &#123;&#125;&#125;</span><br></pre></td></tr></table></figure><p>可见a和b两个实例其实是一个对象，Myclass只被调用了一次。加锁的目的是为了达到线程安全，防止在操作instances字典的时候被其他线程抢占到时间片执行而重复创建实例。这种方式确实实现了单例模式，但是MyClass现在变成一个函数了，所以不能直接用MyClass调用cls_method了，只能通过实例调用…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [7]: MyClass.cls_method()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-7-7bcbf0e7bf90&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 MyClass.cls_method()</span><br><span class="line"></span><br><span class="line">TypeError: &#x27;classmethod&#x27; object is not callable</span><br><span class="line"></span><br><span class="line">In [8]: a.cls_method()</span><br><span class="line">Myclass classmethod called.COPY</span><br></pre></td></tr></table></figure><h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><p>第二种方法是在一个独立模块中创建好实例后导入，由于Python不会重复导入已经导入的对象，因此这样也能实现单例模式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># one.py</span><br><span class="line"></span><br><span class="line">print(&#x27;one.py imported by others.&#x27;)</span><br><span class="line"></span><br><span class="line">class Foobar:</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line">foo = Foobar(1, &#x27;2&#x27;, x=3)</span><br><span class="line"></span><br><span class="line"># two.py</span><br><span class="line">from one import foo</span><br><span class="line">print(id(foo))</span><br><span class="line"></span><br><span class="line">from one import foo</span><br><span class="line">print(id(foo))</span><br></pre></td></tr></table></figure><p>运行two.py:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ python3 two.py                                                                                                                                                 </span><br><span class="line">one.py imported by others.</span><br><span class="line">140485279112104</span><br><span class="line">140485279112104COPY</span><br></pre></td></tr></table></figure><p>这样做的优点是简单，缺点和装饰器一样，只能通过实例来调用classmethod.</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a><strong>new</strong></h2><p>第三种，改写__new__方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">class Singleton:</span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        with cls.lock:</span><br><span class="line">            if cls not in cls.instances:</span><br><span class="line">                cls.instances[cls] = super().__new__(cls)</span><br><span class="line">            return cls.instances[cls]</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargsCOPY</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [2]: a = Singleton(1, &#x27;2&#x27;, x=3)</span><br><span class="line"></span><br><span class="line">In [3]: b = Singleton(3, &#x27;4&#x27;, y=5)</span><br><span class="line"></span><br><span class="line">In [4]: a is b</span><br><span class="line">Out[4]: True</span><br><span class="line"></span><br><span class="line">In [5]: a</span><br><span class="line">Out[5]: &lt;one.Singleton at 0x7f7132af6550&gt;</span><br><span class="line"></span><br><span class="line">In [6]: b</span><br><span class="line">Out[6]: &lt;one.Singleton at 0x7f7132af6550&gt;</span><br><span class="line"></span><br><span class="line">In [7]: a.__dict__</span><br><span class="line">Out[7]: &#123;&#x27;args&#x27;: (3, &#x27;4&#x27;), &#x27;kwargs&#x27;: &#123;&#x27;y&#x27;: 5&#125;&#125;</span><br><span class="line"></span><br><span class="line">In [8]: b.__dict__</span><br><span class="line">Out[8]: &#123;&#x27;args&#x27;: (3, &#x27;4&#x27;), &#x27;kwargs&#x27;: &#123;&#x27;y&#x27;: 5&#125;&#125;</span><br></pre></td></tr></table></figure><p>前后两个实例是同一个，这点证明确实是单例模式了，但为什么a的属性变了？这个问题，在第四种方法中一并解释。这种方法的缺点是，如果子类改写了__new__方法，那么单例模式就失效了，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">class Singleton:</span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        if cls not in cls.instances:</span><br><span class="line">            cls.instances[cls] = super().__new__(cls)</span><br><span class="line">        return cls.instances[cls]</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line">class Subclass(Singleton):</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        return object.__new__(cls)</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [2]: a = Subclass(1, &#x27;2&#x27;, x=3)</span><br><span class="line"></span><br><span class="line">In [3]: b = Subclass(3, &#x27;4&#x27;, y=5)</span><br><span class="line"></span><br><span class="line">In [4]: a</span><br><span class="line">Out[4]: &lt;one.Subclass at 0x7fe97ad65e80&gt;</span><br><span class="line"></span><br><span class="line">In [5]: b</span><br><span class="line">Out[5]: &lt;one.Subclass at 0x7fe97add2a20&gt;</span><br><span class="line"></span><br><span class="line">In [6]: a is b</span><br><span class="line">Out[6]: False</span><br></pre></td></tr></table></figure><h2 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h2><p>第四种方法，使用元类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">class Meta(type):</span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    def __call__(cls, *args, **kwargs):</span><br><span class="line">        with cls.lock:</span><br><span class="line">            if cls not in cls.instances:</span><br><span class="line">                cls.instances[cls] = super().__call__(*args, **kwargs)</span><br><span class="line">            return cls.instances[cls]</span><br><span class="line"></span><br><span class="line">class Singleton(metaclass=Meta):</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [2]: a = Singleton(1, &#x27;2&#x27;, x=3)</span><br><span class="line"></span><br><span class="line">In [3]: b = Singleton(3, &#x27;4&#x27;, y=5)</span><br><span class="line"></span><br><span class="line">In [4]: a is b</span><br><span class="line">Out[4]: True</span><br><span class="line"></span><br><span class="line">In [5]: a.__dict__</span><br><span class="line">Out[5]: &#123;&#x27;args&#x27;: (1, &#x27;2&#x27;), &#x27;kwargs&#x27;: &#123;&#x27;x&#x27;: 3&#125;&#125;</span><br><span class="line"></span><br><span class="line">In [6]: b.__dict__</span><br><span class="line">Out[6]: &#123;&#x27;args&#x27;: (1, &#x27;2&#x27;), &#x27;kwargs&#x27;: &#123;&#x27;x&#x27;: 3&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看到，a和b是同一个对象，确实是单例模式，但是跟第三种方法不同的是，实例属性是以第一次调用为准，为什么呢？</p><p>实例完整的创建过程是这样的：</p><p>1.调用Metaclass.<strong>call</strong></p><p>2.Metaclass.__call__调用Class.__new__创建instance</p><p>3.Metaclass.__call__以instance和其他参数去调用Class.__init__进行初始化</p><p>4.Metaclass.__call__返回instance<br>在第四种方法，实例已经创建后，就不会再去调用Class.__new__创建实例和Class.__init__进行初始化了，因此实例属性由第一次创建决定。而第三种方法，虽然Class.__new__不会重复创建实例，但是Class.__init__还是会被调用，因此属性随最后一次而定。<br>使用元类的好处是，元类会附着到子类上，单例模式不会因为继承而失效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Meta(type):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class SupClass(metaclass=Meta):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class SubClass(SupClass):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(type(SupClass), type(SubClass))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;__main__.Meta&#x27;&gt; &lt;class &#x27;__main__.Meta&#x27;&gt;</span><br></pre></td></tr></table></figure><p>因此，以上四种方法，元类的解决方案是最好的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="python" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/python/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p>看到一篇文章 GitHub Pages + Hexo 搭建个人博客，感觉效果不错</p><p>想当年，自己也曾用阿里云+spring boot搭建过个人博客，不过后面也是不了了之（甚至服务器到期都懒得去看了~~），现在有这个白嫖的方案怎么能错过呢</p><p>今天晚上下班就开整</p><h2 id="关于-github-pages"><a href="#关于-github-pages" class="headerlink" title="关于 github pages"></a>关于 github pages</h2><p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，然后来解析他们，发布服务。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>有三种类型的 GitHub Pages 站点：项目、用户和组织。&amp;#x20;</p><p>项目站点连接到 GitHub 上托管的特定项目，例如 JavaScript 库或配方集合。</p><p>若要发布用户站点，必须创建名为 <code>&lt;username&gt;.github.io</code> 的个人帐户拥有的存储库。 若要发布组织站点，必须创建名为 <code>&lt;organization&gt;.github.io</code> 的组织帐户拥有的存储库。 除非使用的是自定义域，否则用户和组织站点在 <code>http(s)://&lt;username&gt;.github.io</code> 或 <code>http(s)://&lt;organization&gt;.github.io</code> 中可用。</p><p>项目站点的源文件与其项目存储在同一个仓库中。 除非使用的是自定义域，否则项目站点在 <code>http(s)://&lt;username&gt;.github.io/&lt;repository&gt;</code> 或 <code>http(s)://&lt;organization&gt;.github.io/&lt;repository&gt;</code> 中可用。</p><p>GitHub 上的每个帐户创建一个用户或组织站点。 项目站点（无论是组织还是个人帐户拥有）没有限制。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>GitHub Pages 会发布您推送到仓库的任何静态文件。 您可以创建自己的静态文件或使用静态站点生成器为您构建站点。 您还可以在本地或其他服务器上自定义自己的构建过程。</p><p>如果使用自定义生成过程或 Jekyll 以外的静态站点生成器，可以编写 GitHub Actions 来生成和发布站点。</p><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><p>GitHub Pages 站点受到以下使用限制的约束：</p><ul><li>GitHub Pages 源存储库的建议限制为 1 GB。</li><li>发布的 GitHub Pages 站点不得超过 1 GB。</li><li>GitHub Pages 站点的软带宽限制为每月 100 GB。</li><li>GitHub Pages 站点的软限制为每小时 10 次生成。 如果使用自定义 GitHub Actions 工作流生成和发布站点，则此限制不适用</li><li>为了为所有 GitHub Pages 站点提供一致的服务质量，可能会实施速率限制。 这些速率限制无意干扰 GitHub Pages 的合法使用。 如果你的请求触发了速率限制，你将收到相应响应，其中包含 HTTP 状态代码 <code>429</code> 以及信息性 HTML 正文。</li></ul><h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>详细信息可阅读官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>我比较喜欢简洁的主题，这里选用我比较心水的一个主题，类wiki风格，非常的简洁和好用</p><p><a href="https://github.com/zthxxx/hexo-theme-Wikitten/blob/master/README_zh-CN.md">https://github.com/zthxxx/hexo-theme-Wikitten/blob/master/README_zh-CN.md</a></p><p><a href="https://github.com/Norcy/wiki/tree/HexoBackup/themes/Wikitten">https://github.com/Norcy/wiki/tree/HexoBackup/themes/Wikitten</a></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>hexo插件推荐：<a href="https://blog.csdn.net/qq_43701912/article/details/107310923">https://blog.csdn.net/qq_43701912/article/details/107310923</a></p><h2 id="一些使用心得"><a href="#一些使用心得" class="headerlink" title="一些使用心得"></a>一些使用心得</h2><h3 id="如何发布文章"><a href="#如何发布文章" class="headerlink" title="如何发布文章"></a>如何发布文章</h3><ol><li>使用github.dev，在仓库页面按下键盘 <code>.</code> 进入，或者仓库地址 <code>.com</code> 改为 <code>.dev</code> 进入 ,是一个在线vscode编辑器</li><li>本地修改新增md文件后push</li></ol><h3 id="amp-x20-参考资料"><a href="#amp-x20-参考资料" class="headerlink" title="&amp;#x20;参考资料"></a>&amp;#x20;参考资料</h3><ul><li><a href="https://blog.csdn.net/bbsyi/article/details/119101852">GitHub Pages + Hexo搭建个人博客网站，史上最全教程</a></li><li><a href="https://docs.github.com/cn/pages/getting-started-with-github-pages/about-github-pages">GitHub Pages Docs</a></li><li><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li><li><a href="https://github.com/zthxxx/hexo-theme-Wikitten">Wikitten</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看到一篇文章 GitHub Pages + Hexo 搭建个人博客，感觉效果不错&lt;/p&gt;
&lt;p&gt;想当年，自己也曾用阿里云+spring boot搭建过个人博客，不过后面也是不了了之（甚至服务器到期都懒得去看了~~），现在有这个白嫖的方案怎么能错过呢&lt;/p&gt;
&lt;p&gt;今天晚上下</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="grocery" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/%E5%90%84%E7%A7%8D%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC%E7%9A%84%20Helloworld/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/%E5%90%84%E7%A7%8D%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC%E7%9A%84%20Helloworld/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p>接触过C、C++、Java、C#、Python、Go，自认为接触过的编程语言很多了，那么各种语言的经典程序 Hello World 都是什么样的呢？</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;Hello,World!&quot;);</span><br><span class="line">    return (0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void main()                 </span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;Hello,World!\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Helloworld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;Hello,World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">namespace log&#123;</span><br><span class="line">    class helloworld&#123;</span><br><span class="line">        static void  Main(string[] args)&#123;</span><br><span class="line">            Console.WriteLine(&quot;Hello,World!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Python2.x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print &quot;Hello,World!&quot;</span><br></pre></td></tr></table></figure><p>Python3.x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Hello,World!&quot;)</span><br></pre></td></tr></table></figure><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main()&#123;</span><br><span class="line">    fmt.Printf(&quot;Hello,World!\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;Hello,World!&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接触过C、C++、Java、C#、Python、Go，自认为接触过的编程语言很多了，那么各种语言的经典程序 Hello World 都是什么样的呢？&lt;/p&gt;
&lt;h3 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C&quot;&gt;&lt;/a&gt;C</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="grocery" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/%E6%9C%8D%E5%8A%A1%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/%E6%9C%8D%E5%8A%A1%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p>内存缓存作为最方便的提升效率的手段，很多程序都有使用到。</p><p>缓存痛点：</p><ol><li>内存占用</li><li>缓存一致性</li><li>缓存并发</li></ol><p>怎么解决时效性，保证缓存能够及时更新：</p><p>更新方法：</p><ol><li>定时更新</li><li>动态更新</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内存缓存作为最方便的提升效率的手段，很多程序都有使用到。&lt;/p&gt;
&lt;p&gt;缓存痛点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内存占用&lt;/li&gt;
&lt;li&gt;缓存一致性&lt;/li&gt;
&lt;li&gt;缓存并发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;怎么解决时效性，保证缓存能够及时更新：&lt;/p&gt;
&lt;p&gt;更新方法：&lt;/</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="grocery" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/%E7%81%AB%E7%84%B0%E5%9B%BE%E6%80%8E%E4%B9%88%E7%9C%8B/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/%E7%81%AB%E7%84%B0%E5%9B%BE%E6%80%8E%E4%B9%88%E7%9C%8B/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p>y 轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数。</p><p>x 轴表示抽样数，如果一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长。注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺序排列的。</p><p>火焰图就是看顶层的哪个函数占据的宽度最大。只要有 “平顶”（plateaus），就表示该函数可能存在性能问题。</p><p>y 轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数。</p><p>x 轴表示抽样数，如果一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长。注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺序排列的。</p><p>火焰图就是看顶层的哪个函数占据的宽度最大。只要有 “平顶”（plateaus），就表示该函数可能存在性能问题。</p><p>颜色没有特殊含义，因为火焰图表示的是 CPU 的繁忙程度，所以一般选择暖色调。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;y 轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数。&lt;/p&gt;
&lt;p&gt;x 轴表示抽样数，如果一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长。注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="grocery" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p>转自 <a href="https://my.oschina.net/taogang/blog/4313908">https://my.oschina.net/taogang/blog/4313908</a></p><p>最早在Unix&#x2F;Linux的编程领域，提供了进程间通信的手段，例如：管道，信号量，消息队列，套接字（Socket）等。如果你的应用是由不同语言编写的，那么这里只能选择Socket通信作为应用之间的API手段。但是Socket通信是一种非常低Level的通信手段，它以底层的数据包作为抽象和通信内容，很难维护和使用。</p><p>早期的进程间通信技术包括：</p><ul><li>DCOM （ Distributed Component Object Model ）分布式组件对象模型，这个是微软的技术，只能用于Windows平台， 通过网络实现远程对象间的通信</li><li>RMI （ Remote Method Call) Java的远程方法调用，这个是Java自己的RPC，只能用于Java应用之间的远程调用。</li><li>JNI Java的本地接口， 支持Java应用调用本地方法，这个是跨越语言障碍的，但是仅仅局限于Java应用调用其它的本地应用，不具备互操作性，是个单项通道。</li></ul><h3 id="CORBA"><a href="#CORBA" class="headerlink" title="CORBA"></a>CORBA</h3><p>1991年一种名叫CORBA （ Common Object Request Broker Architecture ） 的技术出现。</p><p>CORBA和之前提到的DCOM和RMI类似，都提供了远程的对象&#x2F;方法调用，但是CORBA是一种与语言和实现无关的技术</p><p>CORBA定了与语言解耦的系统间通信的标准。开发CORAB的过程从IDL的定义开始，用户通过IDL定义了对象，然后在Server端实现该对象的应用逻辑，在Client端调用该对象。</p><p>CORBA存在的主要问题：</p><ul><li>对象的生命周期管理比较复杂。远程对象的发现，创建和销毁都会带来问题</li><li>整个CORAB的架构比较复杂</li></ul><h3 id="XML-RPC-x2F-SOAP"><a href="#XML-RPC-x2F-SOAP" class="headerlink" title="XML-RPC &#x2F; SOAP"></a>XML-RPC &#x2F; SOAP</h3><p>XML-RPC发表于1998年，由UserLand Software（UserLand Software）的Dave Winer及Microsoft共同发表。后来在新的功能不断被引入下，这个标准慢慢演变成为今日的SOAP协议。</p><p>下面是一个 XML-RPC的请求&#x2F;响应的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">  &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</span><br><span class="line">  &lt;params&gt;</span><br><span class="line">    &lt;param&gt;</span><br><span class="line">        &lt;value&gt;&lt;i4&gt;40&lt;/i4&gt;&lt;/value&gt;</span><br><span class="line">    &lt;/param&gt;</span><br><span class="line">  &lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;methodResponse&gt;</span><br><span class="line">  &lt;params&gt;</span><br><span class="line">    &lt;param&gt;</span><br><span class="line">        &lt;value&gt;&lt;string&gt;South Dakota&lt;/string&gt;&lt;/value&gt;</span><br><span class="line">    &lt;/param&gt;</span><br><span class="line">  &lt;/params&gt;</span><br><span class="line">&lt;/methodResponse&gt;</span><br></pre></td></tr></table></figure><p>SOAP是 Simple Object Access Protocol 的缩写。SOAP为Web服务提供了Web服务协议栈的Messaging Protocol层。它是一个基于XML的协议，由三部分组成：</p><ol><li>一个信封，它定义了消息结构以及如何处理它</li><li>一组用于表达应用程序定义的数据类型实例的编码规则</li><li>表示过程调用和响应的约定</li></ol><p>SOAP具有三个主要特征：</p><ol><li>可扩展性（安全性和WS-Addressing在开发中）</li><li>中立性（SOAP可以通过HTTP，SMTP，TCP，UDP等任何协议进行操作）</li><li>独立性（SOAP允许任何编程语言）</li></ol><p>作为SOAP过程可以执行的操作的示例，应用程序可以将SOAP请求发送到启用了带有搜索参数的Web服务的服务器（例如，房地产价格数据库）。然后，服务器返回SOAP响应（包含结果数据的XML格式的文档），例如价格，位置，功能。由于生成的数据采用标准化的机器可解析格式，因此发出请求的应用程序可以直接将其集成。</p><p>SOAP体系结构由以下几层规范组成：</p><ul><li>讯息格式</li><li>邮件交换模式（MEP）</li><li>底层传输协议绑定</li><li>消息处理模型</li><li>协议可扩展性</li></ul><p>下面是一个SOAP消息的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /InStock HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Content-Type: application/soap+xml; charset=utf-8</span><br><span class="line">Content-Length: 299</span><br><span class="line">SOAPAction: &quot;http://www.w3.org/2003/05/soap-envelope&quot;</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:m=&quot;http://www.example.org&quot;&gt;</span><br><span class="line">  &lt;soap:Header&gt;</span><br><span class="line">  &lt;/soap:Header&gt;</span><br><span class="line">  &lt;soap:Body&gt;</span><br><span class="line">    &lt;m:GetStockPrice&gt;</span><br><span class="line">      &lt;m:StockName&gt;T&lt;/m:StockName&gt;</span><br><span class="line">    &lt;/m:GetStockPrice&gt;</span><br><span class="line">  &lt;/soap:Body&gt;</span><br><span class="line">&lt;/soap:Envelope&gt;</span><br></pre></td></tr></table></figure><p>相比较XML-RPC，他的功能更多，当然消息结构也更复杂。</p><p>SOAP是W3C推荐的Webservice标准，一度也是非常的流行，但是我们看到基于XML的消息比较复杂，消息本身因为XML的原因，有相当多的开销。于是后面又有了基于JSON的RPC格式。但总的来说，SOAP也已经是昨日黄花，当今的应用构建，你选它的概率应该也不大了。</p><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p>REST是当今最为流行的API。因为大量的Web应用采用REST作为其API的选择。REST是 Representational State Transfer 的缩写。是Roy Thomas Fielding博士于2000年在他的博士论文中提出来的一种万维网软件架构风格，目的是便于不同软件&#x2F;程序在网络（例如互联网）中互相传递信息。表现层状态转换是根基于超文本传输协议（HTTP）之上而确定的一组约束和属性，是一种设计提供万维网络服务的软件构建风格。符合或兼容于这种架构风格（简称为 REST 或 RESTful）的网络服务，允许客户端发出以统一资源标识符访问和操作网络资源的请求，而与预先定义好的无状态操作集一致化。因此表现层状态转换提供了在互联网络的计算系统之间，彼此资源可交互使用的协作性质（interoperability）。相对于其它种类的网络服务，例如SOAP服务，则是以本身所定义的操作集，来访问网络上的资源。目前在三种主流的Web服务实现方案中，因为REST模式与复杂的SOAP和XML-RPC相比更加简洁，越来越多的Web服务开始采用REST风格设计和实现。所以我么可以看到软件的发展，大体是从复杂变得简单，只有简单的东西才会变的更有生命力。</p><p>为了使任何应用程序真正实现RESTful，必须遵循六个体系结构约束：</p><ol><li>统一接口：意味着必须向Web应用程序中的API使用者提供API接口。</li><li>客户端服务器：客户端和服务器必须彼此独立，并且客户端应仅知道资源的URI。</li><li>无状态：服务器不得存储与客户端请求相关的任何内容。 客户端负责维护应用程序的状态。</li><li>可缓存的：资源必须可缓存。</li><li>分层系统：体系结构必须是分层的，这意味着体系结构的组件可以位于多个服务器中。</li><li>按需代码：客户端必须能够获取可执行代码作为响应。 这是一个可选约束。</li></ol><p>基于REST的Web服务被称为RESTful Web服务。 在这些应用程序中，每个组件都是一种资源，可以使用HTTP标准方法通过公共接口访问这些资源。 以下四种HTTP方法通常用于基于REST的体系结构中：</p><ol><li>GET-对资源的只读访问。</li><li>POST —创建一个新资源。</li><li>DELETE—删除资源。</li><li>PUT-更新现有资源&#x2F;创建新资源。</li></ol><p>RESTFul风格API所有的操作都是一个动词，对应HTTP请求的一种类型。每一个操作都定义了对操作的资源的某种行为。这种抽象，特别适合相当多的Web应用，后台是一个数据库，每一个REST的端点对应了一张数据库的表，很自然的利用REST操作来实现表的增删查改。</p><p>当然RESTFul的风格也有它的不足：</p><ul><li>不是所有的应用操作都可以用资源的增删查改来对应，在实际的开发中经常会需要把一个操作映射为一个资源这种不伦不类的行为。</li><li>REST是同步服务，如果需要可能要引入回调机制。例如Webhook。</li><li>REST只提供客户端调用服务器的选项，不支持服务器端发起请求。</li></ul><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><p>GraphQL是一个开源的API数据查询和操作语言及实现为了实现上述操作的相应运行环境。 2012年，GraphQL由Facebook内部开发，2015年公开公布。 2018年11月7日，Facebook将GraphQL项目转移到新成立的GraphQL基金会 。</p><p>GraphQL规范概述了5条设计原则，这使其成为现代前端开发的精心设计的解决方案:</p><ul><li>查询是分层结构的，具有分层和嵌套字段，查询与响应数据一对一匹配。 查询和响应的形状像树，可以查询每个项目的其他嵌套字段。</li><li>该结构以产品为中心，着重于前端希望如何接收数据，并构建交付所需的运行时。 这样一来，就可以向后端请求一个所需的所有数据，然后让服务器根据GraphQL的规范从不同的端点获取数据。</li><li>它使用特定于应用程序的类型系统，使开发人员能够确保查询使用有效类型，并且在执行之前在语法上正确。</li><li>GraphQL查询是在客户端指定的，因此客户端确切知道它将以什么格式接收数据。</li><li>带有GraphQL的服务器结构必须是自省的，或者可由GraphQL本身查询。 这将启用功能强大的开发人员工具，例如GraphiQL或GraphQL Playground，这两种工具都将使开发人员能够准确查看哪些查询和字段可供他们在服务器中使用。</li></ul><p>像RESTful API一样，GraphQL API旨在处理HTTP请求并提供对这些请求的响应。 但是，相似之处到此结束。 在REST API建立在请求方法和端点之间的连接上的情况下，GraphQL API设计为仅使用一个始终通过POST请求查询的端点，通常使用URL <a href="http://yourdomain.com/graphql%E3%80%82">yourdomain.com&#x2F;graphql。</a></p><p>达到GraphQL端点后，客户端请求的负担将完全在请求主体内处理。 该请求主体必须遵守GraphQL规范，并且API必须具有适当的服务器端逻辑来处理这些请求并提供适当的响应。 与RESTful API相比，这提供了更流畅的客户端体验，后者可能要求客户端对多个数据进行多次请求，并在数据返回后进行操作。</p><p>GraphQL提供的性能优于REST API，可以为前端开发人员带来回报。 使用GraphQL规范创建服务器可能需要更多设置和编写预测性服务器端逻辑来解析和处理请求。 尽管GraphQL的安装成本可能会高于传统的REST架构，但更具可维护性的代码，强大的开发工具以及简化的客户端查询，这些都是不错的收益。</p><p>除了灵活性这个最大的优点外，GraphQL还有以下的优点：</p><ul><li>声明性的数据获取，避免了客户端和服务器端的额外交互</li><li>优秀的开发体验，不需要版本控制，因为引入新的字段不会影响到API查询。同时客户端和服务器端的团队可以并行的独立工作。</li><li>强类型的GraphQL模式使得代码可预测，并及早发现错误。</li></ul><p>当然，GraphQL也不是没有缺点：</p><ul><li>使用GraphQL，如果您需要查找有关列表或记录集合的信息，则处理起来会很棘手。 例如，如果您想获取包含其地址的用户列表的详细信息，则它将执行n + 1个查询。 一个用于用户列表，然后n查询每个用户的地址。现在它会严重影响性能，因此必须非常小心地处理它。</li><li>很难缓存，缓存API响应的目的主要是为了更快地从将来的请求中获取响应。 与GraphQL不同，RESTful API可以利用HTTP规范中内置的缓存。 正如前面提到的，GraphQL查询可以请求资源的任何字段，因此缓存本质上是困难的。</li></ul><h3 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h3><p>gRPC是一个开源的远程过程调用框架，用于在服务之间进行高性能的通信。 这是将以不同语言编写的服务与可插拔支持（用于负载平衡，跟踪，运行状况检查和身份验证）相连接的有效方法。 默认情况下，gRPC使用Protobuf（协议缓冲区）序列化结构化数据。 通常，对于微服务体系结构，gRPC被认为是REST协议的更好替代方案。 gRPC中的” g”可以归因于最初开发该技术的Google。</p><p>gRPC是对传统RPC框架的改编。 那么，它与现有的RPC框架有何不同？</p><p>最重要的区别是gRPC使用protobuf 协议缓冲区作为接口定义语言进行序列化和通信，而不是JSON &#x2F; XML。 协议缓冲区可以描述数据的结构，并且可以从该描述中生成代码，以生成或解析表示结构化数据的字节流。 这就是为什么gRPC首选多语言（使用不同技术实现）的Web应用程序的原因。 二进制数据格式使通信更轻松。 gRPC也可以与其他数据格式一起使用，但是首选的是protobuf。</p><p>同样，gRPC建立在HTTP &#x2F; 2之上，它支持双向通信以及传统的请求&#x2F;响应。 gRPC允许服务器和客户端之间的松散耦合。 在实践中，客户端打开与gRPC服务器的长期连接，并且将为每个RPC调用打开一个新的HTTP &#x2F; 2流。</p><p>与使用JSON（主要是JSON）的REST不同，gRPC使用Protobuf，这是编码数据的更好方法。 由于JSON是基于文本的格式，因此它比protobuf格式的压缩数据要重得多。与REST相比，gRPC的另一个显着改进是它使用HTTP 2作为其传输协议。 REST使用的HTTP 1.1基本上是一个请求-响应模型。 gRPC利用HTTP 2的双向通信功能以及传统的响应请求结构。 在HTTP 1.1中，当多个请求来自多个客户端时，它们将被一一处理。 这会降低系统速度。 HTTP 2允许多路复用，因此可以同时处理多个请求和响应。</p><p>gRPC的开发模式和之前提到的CORBA有些类似。Protobuf充当了IDL的角色，然后利用工具生成各种语言的代码，最后在生成的代码上实现服务器端和客户端的逻辑。</p><p>gRPC的优点是：</p><ul><li>出色的性能，因为采用protobuf编码和http&#x2F;2</li><li>支持服务器端和客户端的双向通信</li><li>易用，相比REST开发，需要更少的代码</li></ul><p>缺点：</p><ul><li>更陡峭的学习曲线</li><li>支持的语言的种类没有REST多，当然它还在发展中</li><li>因为需要Protobuf的编译，这带来了服务器和客户端一定的耦合，因为接口变动的时候需要重新编译生成代码。REST的化，基于不同的工具链可能由不同的解决方案</li></ul><p>因为其高性能，gRPC更适合被用于系统内部组件的通信选择。比如微服务架构中，对外的服务采用了REST或者GraphQL的API，而内部微服务之间使用的是gRPC。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转自 &lt;a href=&quot;https://my.oschina.net/taogang/blog/4313908&quot;&gt;https://my.oschina.net/taogang/blog/4313908&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最早在Unix&amp;#x2F;Linux的编程领域，提</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="grocery" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/os/Linux%20shell%20%E5%90%84%E7%A7%8D%E7%AC%A6%E5%8F%B7%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/os/Linux%20shell%20%E5%90%84%E7%A7%8D%E7%AC%A6%E5%8F%B7%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、小括号，圆括号（）"><a href="#一、小括号，圆括号（）" class="headerlink" title="一、小括号，圆括号（）"></a>一、小括号，圆括号（）</h1><h2 id="1、单小括号"><a href="#1、单小括号" class="headerlink" title="1、单小括号 ()"></a>1、单小括号 ()</h2><p>①命令组。括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格。</p><p>②命令替换。等同于cmd，shell扫描一遍命令行，发现了结构，便将(cmd)结构，便将(cmd)中的cmd执行一次，得到其标准输出，再将此输出放到原来命令。有些shell不支持，如tcsh。</p><p>③用于初始化数组。如：array&#x3D;(a b c d)</p><h2 id="2、双小括号"><a href="#2、双小括号" class="headerlink" title="2、双小括号 (( ))"></a>2、双小括号 (( ))</h2><p>①整数扩展。这种扩展计算是整数型的计算，不支持浮点型。((exp))结构扩展并计算一个算术表达式的值，如果表达式的结果为0，那么返回的退出状态码为1，或者 是”假”，而一个非零值的表达式所返回的退出状态码将为0，或者是”true”。若是逻辑判断，表达式exp为真则为1,假则为0。</p><p>②只要括号中的运算符、表达式符合C语言运算规则，都可用在((exp))中，甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。如：echo((16#5f)) 结果为95 (16进位转十进制)</p><p>③单纯用 (( )) 也可重定义变量值，比如 a&#x3D;5; ((a++)) 可将 $a 重定义为6</p><p>④常用于算术运算比较，双括号中的变量可以不使用符号前缀。括号内支持多个表达式用逗号分开。只要括号中的表达式符合C语言运算规则,比如可以直接使用for((i&#x3D;0;i&lt;5;i++)),如果不使用双括号,则为foriin‘seq04‘或者foriin0..4。再如可以直接使用if((i&lt;5)), 如果不使用双括号, 则为if [ $i -lt 5 ]。</p><h1 id="二、中括号，方括号"><a href="#二、中括号，方括号" class="headerlink" title="二、中括号，方括号[]"></a>二、中括号，方括号[]</h1><h2 id="1、单中括号"><a href="#1、单中括号" class="headerlink" title="1、单中括号 []"></a>1、单中括号 []</h2><p>①bash 的内部命令，[和test是等同的。如果我们不用绝对路径指明，通常我们用的都是bash自带的命令。if&#x2F;test结构中的左中括号是调用test的命令标识，右中括号是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试，并且根据比较的结果来返回一个退出状态码。if&#x2F;test结构中并不是必须右中括号，但是新版的Bash中要求必须这样。</p><p>②Test和[]中可用的比较运算符只有&#x3D;&#x3D;和!&#x3D;，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq，-gt这种形式。无论是字符串比较还是整数比较都不支持大于号小于号。如果实在想用，对于字符串比较可以使用转义形式，如果比较”ab”和”bc”：[ ab &lt; bc ]，结果为真，也就是返回状态为0。[ ]中的逻辑与和逻辑或使用-a 和-o 表示。</p><p>③字符范围。用作正则表达式的一部分，描述一个匹配的字符范围。作为test用途的中括号内不能使用正则。</p><p>④在一个array 结构的上下文中，中括号用来引用数组中每个元素的编号。</p><h2 id="2、双中括号"><a href="#2、双中括号" class="headerlink" title="2、双中括号[[ ]]"></a>2、双中括号[[ ]]</h2><p>①[[是 bash 程序语言的关键字。并不是一个命令，[[ ]] 结构比[ ]结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。</p><p>②支持字符串的模式匹配，使用&#x3D;~操作符时甚至支持shell的正则表达式。字符串比较时可以把右边的作为一个模式，而不仅仅是一个字符串，比如[[ hello &#x3D;&#x3D; hell? ]]，结果为真。[[ ]] 中匹配字符串或通配符，不需要引号。</p><p>③使用[[ … ]]条件判断结构，而不是[ … ]，能够防止脚本中的许多逻辑错误。比如，&amp;&amp;、||、&lt;和&gt; 操作符能够正常存在于[[ ]]条件判断结构中，但是如果出现在[ ]结构中的话，会报错。比如可以直接使用if [[ $a !&#x3D; 1 &amp;&amp; $a !&#x3D; 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] &amp;&amp; [ $a !&#x3D; 2 ]或者if [ $a -ne 1 -a $a !&#x3D; 2 ]。</p><p>④bash把双中括号中的表达式看作一个单独的元素，并返回一个退出状态码。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if ($i&lt;5) </span><br><span class="line">if [ $i -lt 5 ] </span><br><span class="line">if [ $a -ne 1 -a $a != 2 ] </span><br><span class="line">if [ $a -ne 1] &amp;&amp; [ $a != 2 ] </span><br><span class="line">if [[ $a != 1 &amp;&amp; $a != 2 ]] </span><br><span class="line">for i in $(seq 0 4);do echo $i;done</span><br><span class="line">for i in `seq 0 4`;do echo $i;done</span><br><span class="line">for ((i=0;i&lt;5;i++));do echo $i;done</span><br><span class="line">for i in &#123;0..4&#125;;do echo $i;done</span><br></pre></td></tr></table></figure><h1 id="三、大括号、花括号"><a href="#三、大括号、花括号" class="headerlink" title="三、大括号、花括号 {}"></a>三、大括号、花括号 {}</h1><h2 id="1、常规用法"><a href="#1、常规用法" class="headerlink" title="1、常规用法"></a>1、常规用法</h2><p>①大括号拓展。(通配(globbing))将对大括号中的文件名做扩展。在大括号中，不允许有空白，除非这个空白被引用或转义。第一种：对大括号中的以逗号分割的文件列表进行拓展。如 touch {a,b}.txt 结果为a.txt b.txt。第二种：对大括号中以点点（..）分割的顺序文件列表起拓展作用，如：touch {a..d}.txt 结果为a.txt b.txt c.txt d.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ls &#123;ex1,ex2&#125;.sh </span><br><span class="line">ex1.sh ex2.sh </span><br><span class="line"># ls &#123;ex&#123;1..3&#125;,ex4&#125;.sh </span><br><span class="line">ex1.sh ex2.sh ex3.sh ex4.sh </span><br><span class="line"># ls &#123;ex[1-3],ex4&#125;.sh </span><br><span class="line">ex1.sh ex2.sh ex3.sh ex4.sh</span><br></pre></td></tr></table></figure><p>②代码块，又被称为内部组，这个结构事实上创建了一个匿名函数 。与小括号中的命令不同，大括号内的命令不会新开一个子shell运行，QQ号码买卖即脚本余下部分仍可使用括号内变量。括号内的命令间用分号隔开，最后一个也必须有分号。{}的第一个命令和左括号之间必须要有一个空格。</p><h2 id="2、几种特殊的替换结构"><a href="#2、几种特殊的替换结构" class="headerlink" title="2、几种特殊的替换结构"></a>2、几种特殊的替换结构</h2><p>${var:-string},${var:+string},${var:&#x3D;string},${var:?string}</p><p>①${var:-string}和${var:&#x3D;string}:若变量var为空，则用在命令行中用string来替换${var:-string}，否则变量var不为空时，则用变量var的值来替换${var:-string}；对于${var:&#x3D;string}的替换规则和${var:-string}是一样的，所不同之处是${var:&#x3D;string}若var为空时，用string替换${var:&#x3D;string}的同时，把string赋给变量var：${var:&#x3D;string}很常用的一种用法是，判断某个变量是否赋值，没有的话则给它赋上一个默认值。</p><p>② ${var:+string}的替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var为空时则不替换或者说是替换成变量 var的值，即空值。(因为变量var此时为空，所以这两种说法是等价的) </p><p>③${var:?string}替换规则为：若变量var不为空，则用变量var的值来替换${var:?string}；若变量var为空，则把string输出到标准错误中，并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。</p><p>补充扩展：在上面这五种替换结构中string不一定是常值的，可用另外一个变量的值或是一种命令的输出。</p><h2 id="3、四种模式匹配替换结构"><a href="#3、四种模式匹配替换结构" class="headerlink" title="3、四种模式匹配替换结构"></a>3、四种模式匹配替换结构</h2><p>模式匹配记忆方法：</p><p>#是去掉左边(在键盘上#在$之左边)</p><p>%是去掉右边(在键盘上%在$之右边)</p><p>#和%中的单一符号是最小匹配，两个相同符号是最大匹配。</p><p>${var%pattern},${var%%pattern},${var#pattern},${var##pattern}<br>第一种模式：${variable%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最短的匹配模式</p><p>第二种模式：${variable%%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式</p><p>第三种模式：${variable#pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern开始，如果是，就从命令行把variable中的内容去掉左边最短的匹配模式</p><p>第四种模式：${variable##pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式</p><p>这四种模式中都不会改变variable的值，其中，只有在pattern中使用了<em>匹配符号时，%和%%，#和##才有区别。结构中的pattern支持通配符，</em>表示零个或多个任意字符，?表示仅与一个任意字符匹配，[…]表示匹配中括号里面的字符，[!…]表示不匹配中括号里面的字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># var=testcase </span><br><span class="line"># echo $var </span><br><span class="line">testcase </span><br><span class="line"># echo $&#123;var%s*e&#125; </span><br><span class="line">testca </span><br><span class="line"># echo $var </span><br><span class="line">testcase </span><br><span class="line"># echo $&#123;var%%s*e&#125; </span><br><span class="line">te </span><br><span class="line"># echo $&#123;var#?e&#125; </span><br><span class="line">stcase </span><br><span class="line"># echo $&#123;var##?e&#125; </span><br><span class="line">stcase </span><br><span class="line"># echo $&#123;var##*e&#125;</span><br><span class="line"># echo $&#123;var##*s&#125; </span><br><span class="line">e </span><br><span class="line"># echo $&#123;var##test&#125; </span><br><span class="line">case</span><br></pre></td></tr></table></figure><h2 id="4、字符串提取和替换"><a href="#4、字符串提取和替换" class="headerlink" title="4、字符串提取和替换"></a>4、字符串提取和替换</h2><p>${var:num},${var:num1:num2},${var&#x2F;pattern&#x2F;pattern},${var&#x2F;&#x2F;pattern&#x2F;pattern}</p><p>第一种模式：${var:num}，这种模式时，shell在 var中提取第num个字符到末尾的所有字符。若num为正数，从左边0处开始；若num为负数，从右边开始提取字串，但必须使用在冒号后面加空格或一个数字或整个num加上括号，如${var: -2}、${var:1-3}或${var:(-2)}。       </p><p>第二种模式：${var:num1:num2}，num1是位置，num2是长度。表示从$var字符串的第$num1个位置开始提取长度为$num2的子串。不能为负数。</p><p>第三种模式：${var&#x2F;pattern&#x2F;pattern}表示将var字符串的第一个匹配的pattern替换为另一个pattern。</p><p>第四种模式：${var&#x2F;&#x2F;pattern&#x2F;pattern}表示将var字符串中的所有能匹配的pattern替换为另一个pattern。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# var=/home/centos </span><br><span class="line">[root@centos ~]# echo $var </span><br><span class="line">/home/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var:5&#125; </span><br><span class="line">/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var: -6&#125; </span><br><span class="line">centos </span><br><span class="line">[root@centos ~]# echo $&#123;var:(-6)&#125; </span><br><span class="line">centos </span><br><span class="line">[root@centos ~]# echo $&#123;var:1:4&#125; </span><br><span class="line">home </span><br><span class="line">[root@centos ~]# echo $&#123;var/o/h&#125; </span><br><span class="line">/hhme/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var//o/h&#125; </span><br><span class="line">/hhme/cenths</span><br></pre></td></tr></table></figure><h1 id="四、符号-后的括号"><a href="#四、符号-后的括号" class="headerlink" title="四、符号$后的括号"></a>四、符号$后的括号</h1><p>（1）${a} 变量a的值, 在不引起歧义的情况下可以省略大括号。</p><p>（2）$(cmd) 命令替换，和<code>cmd</code>效果相同，结果为shell命令cmd的输，过某些Shell版本不支持$()形式的命令替换, 如tcsh。</p><p>（3）$((expression)) 和<code>exprexpression</code>效果相同, 计算数学表达式exp的数值, 其中exp只要符合C语言的运算规则即可, 甚至三目运算符和逻辑表达式都可以计算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、小括号，圆括号（）&quot;&gt;&lt;a href=&quot;#一、小括号，圆括号（）&quot; class=&quot;headerlink&quot; title=&quot;一、小括号，圆括号（）&quot;&gt;&lt;/a&gt;一、小括号，圆括号（）&lt;/h1&gt;&lt;h2 id=&quot;1、单小括号&quot;&gt;&lt;a href=&quot;#1、单小括号&quot; cla</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="os" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/os/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/2020%20%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%EF%BC%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%EF%BC%89/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/2020%20%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%EF%BC%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%EF%BC%89/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p>2020 学习计划（成长之路）</p><p>领导怎么说：</p><p>k8s</p><p>docker</p><p>多读源码</p><p>逛逛开源社区</p><p>提高英文文档阅读能力</p><p>设计模式，工作中体现</p><p>一个优秀的软件架构师，首先一定是一个出色的程序员</p><p>eBay的架构师[RandyShoup先生]是如何总结架构师在项目中的职责的：</p><p>l 具备丰富的一线大中型开发项目的整体规划、方案设计及技术队伍管理经验。</p><p>2 具备软件行业工作经验，熟悉业务领域的技术应用和发展。</p><p>3 具有项目管理理论基础，并在应用系统开发平台和项目管理上有实践经验。</p><p>4 对相关的技术标准有深刻的认识，对软件工程标准规范有良好的把握。 具备C&#x2F;S或B&#x2F;S体系结构或特定领域软件产品开发及架构和设计的经验。</p><p>5 具有面向对象分析（Object-Oriented Analysis, OOA）、设计（OOD）、开发（OOP）能力，精通UML和XML等，熟练使用Rational Rose、PowerDesigner等CASE工具进行设计开发。</p><p>6 对相关编程技术及整个解决方案有深刻的理解及熟练的应用，并且精通架构和设计模式，并在此基础上设计产品框架。</p><p>7 精通大型数据库如Oracle、Sql Server、MySQL等的开发。l 对计算机系统、网络和安全、应用系统架构等有全面的认识。</p><p>8 良好的团队意识和写作精神，有较强的内外沟通能力。</p><p>学习计划：</p><p>\1. Java 基础知识的深入理解</p><p>反射、IO、接口&#x2F;抽象类、内部类、异常、Enum、序列化、static、final、Iterator，Iterable和Comparable,Comparator 等等知识点，虽然都有学习，按实际上还差得很远，还有很多细节与需要深入学习理解。还应该尝试看 Java 源码，源码阅读理解是程序员成长中的必经之路，在源码中可以得到更多细节。最近在看《On Java 8》(事实上的 《Java 编程思想》第五版)这本书，书中讲解真的很详细，内容也非常多，需要反复深入学习。2020 年需要攻克完成这本书，不单单只是阅读浏览一遍，应该要融会贯通，对晦涩难懂的知识多思考，争取掌握。</p><p>\2. 设计模式</p><p>设计模式很重要，支撑起代码的整个生命历程。设计模式应该被理解，被应用到项目中，而不是只是简单的概念层面上的了解，当然，也不应该生搬硬套。能够简化流程，优化项目的设计模式，才是好的设计模式。2020年希望能够掌握常用的设计模式，理解设计模式的套路，加深编程经验。完成《大话设计模式》这本书的学习理解。四人帮(GOF)的书籍《. Design Patterns》可能较之有一定的学习难度，但是经典还是需要了解。</p><p>\3. 微服务、容器等知识</p><p>现如今，微服务非常重要，阿里系的Dubbo+Zookeeper，Spring系的SpringCloud，以及在此基础上二次开发可能更优秀的SpringCloud。主要学习SpringCloud。</p><p>Docker 是微服务中至关重要的工具，也需要学习。之前有比较简单的学习，还需要深入学习，注意在实践中多使用 Docker 技术，争取融会贯通，学以致用。</p><p>kubernetes 也需要学习理解，这是基于容器的集群管理平台，现在事实上的标准，需要掌握。主要通过网课学习。</p><p>\4. 分布式架构</p><p>分布式缓存、分布式存储、分布式锁、幂等性、分布式事务、流量削峰、服务容错、服务降级等等，现在的分布式太火了，必须要对分布式有一定的理解和把握。计划是通过网课学习分布式架构。</p><p>\5. 数据库等知识</p><p>常用的关系型数据库有MySQL、Oracle、DB2等，MySQL应该是使用最多的，深入学习和掌握MySQL，是高级程序员的基本要求。还又 Redis、消息中间件等也需要有一定的知识储备。</p><p>\6. 开发工具</p><p>开发工具保证了开发效率，现在基本上离不开开发工具了，一个项目的开发到部署的过程都设计到许多的软件工具。作为使用者和潜在使用者，更应该对它们有深入的了解，就算是最熟悉的 idea, 我也不敢说完全掌握，Idea、maven、git、svn、jenkins、tomcat 等等也需要学习掌握。</p><p>\7. 提高英语水平</p><p>如今流行的编程语言都是贴近英语语法。大家更倾向于写出来的代码是好读易懂的。能够快速的理解原作者的用词，就可以更快的读懂代码结构，这比纯粹的分析编程语法要简单且自然的多。</p><p>能够流畅的阅读英文文档，对于程序员而言，是非常重要的。这也是非常艰难的，英语也确实是我的短板，提高的英语的阅读能力，通过逼迫自己去看，去理解英文来实现，尝试去读英文的工具文档、逛外国的开发论坛，stackoverflow、github。YouTube、Reddit、ins 等也可以多逛逛。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020 学习计划（成长之路）&lt;/p&gt;
&lt;p&gt;领导怎么说：&lt;/p&gt;
&lt;p&gt;k8s&lt;/p&gt;
&lt;p&gt;docker&lt;/p&gt;
&lt;p&gt;多读源码&lt;/p&gt;
&lt;p&gt;逛逛开源社区&lt;/p&gt;
&lt;p&gt;提高英文文档阅读能力&lt;/p&gt;
&lt;p&gt;设计模式，工作中体现&lt;/p&gt;
&lt;p&gt;一个优秀的软件架构师，首先</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/JTW%E8%AF%A6%E8%A7%A3/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/JTW%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JTW详解</strong></p><p><strong>spring boot集成jwt实现token认证；</strong></p><p>\1. 什么是jwt?</p><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).定义了一种简洁的，自包含的方法用于通信双方之间以JSON对象的形式安全的传递信息。因为数字签名的存在，这些信息是可信的，JWT可以使用HMAC算法或者是RSA的公私秘钥对进行签名。</p><p>\2. jwt的工作流程</p><p>\1. 用户使用账号和密码发出post请求；</p><p>\2. 服务器使用私钥创建一个jwt；</p><p>\3. 服务器返回这个jwt给浏览器；</p><p>\4. 浏览器将该jwt串在请求头中向服务器发送请求；</p><p>\5. 服务器验证该jwt；</p><p>\6. 返回响应的资源给浏览器。</p><p><img src="C:\Users\14133\AppData\Local\YNote\data\m18378511016@163.com\f5f9098e49bc44e887b4c730a09776c1\jwt.png" alt="img"></p><p>\3. jwt结构</p><p>1）Header 头部：JWT的头部承载两部分信息：token类型和采用的加密算法。</p><p>2）Payload：存放有效信息的地方。</p><p>3）Signature：签证信息。</p><p>（完整见博客<a href="https://www.jianshu.com/p/e88d3f8151db%EF%BC%89">https://www.jianshu.com/p/e88d3f8151db）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;JTW详解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;spring boot集成jwt实现token认证；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;\1. 什么是jwt?&lt;/p&gt;
&lt;p&gt;Json web token (JWT), 是为了在网络应用环境间传递声明</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/JVM%E4%B8%8EJava%E7%A8%8B%E5%BA%8F/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/JVM%E4%B8%8EJava%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p>当启动一个Java程序时，一个JVM实例也就产生。当该程序关闭退出，这个JVM实例也就随之消亡。</p><p>JVM实例负责运行一个Java程序</p><h4 id="Java虚拟机及程序的生命周期："><a href="#Java虚拟机及程序的生命周期：" class="headerlink" title="Java虚拟机及程序的生命周期："></a>Java虚拟机及程序的生命周期：</h4><p>（1）通过java命令运行一个Java程序时，启动一个Java虚拟机进程；</p><p>（2）Java虚拟机进程从启动到终止的过程，称为Java虚拟机生命周期；</p><p>（3）程序生命周期和Java虚拟机生命周期是一致的，因为Java虚拟机进程从创建起的任务就是执行Java程序。</p><p>（4）每个运行中的Java程序会有独立的Java堆和非堆等物理资源，程序之间的jvm运行时状态是区分的。</p><h4 id="类的加载，连接和初始化："><a href="#类的加载，连接和初始化：" class="headerlink" title="类的加载，连接和初始化："></a>类的加载，连接和初始化：</h4><p>Java程序要使用某个类时，Java虚拟机要确保这个类被加载，连接和运行，其中连接包括验证，准备和解析。</p><p>1、装载：查找并加载类的二进制数据</p><p>装载的最终目标是实现将编译后的class文件（class文件采用字节码，是JVM的机器语言）装入内存运行时数据区的方法区中，并在内存运行时数据区的堆区生成一个class对象，这个对象可以引用到方法区中的类定义</p><p>2、连接</p><p>（1）验证：确保加载类的正确性；</p><p>（2）准备：为静态变量分配内存，并将其初始化为默认值；</p><p>（3）解析：将类中的符号引用转换为直接引用。</p><p>3、初始化：</p><p>类的初始化过程是执行类的初始化语句，包括静态变量的声明语句，以及静态代码块，静态代码块的作用即是为静态变量赋初始化值。</p><p>4、卸载</p><p>只有没有任何引用指向Class对象的时候，这时候才会卸载类，结束类的生命周期。</p><p>装载验证准备解析初始化对象实例化垃圾收集对象终结卸载</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当启动一个Java程序时，一个JVM实例也就产生。当该程序关闭退出，这个JVM实例也就随之消亡。&lt;/p&gt;
&lt;p&gt;JVM实例负责运行一个Java程序&lt;/p&gt;
&lt;h4 id=&quot;Java虚拟机及程序的生命周期：&quot;&gt;&lt;a href=&quot;#Java虚拟机及程序的生命周期：&quot; class</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%20%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E3%80%90%E8%BD%AC%E3%80%91/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%20%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E3%80%90%E8%BD%AC%E3%80%91/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h3 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h3><p>归并排序是一种概念上最简单的排序算法，与快速排序一样，归并排序也是基于分治法的。归并排序将待排序的元素序列分成两个长度相等的子序列，为每一个子序列排序，然后再将他们合并成一个子序列。合并两个子序列的过程也就是两路归并。</p><h3 id="2、复杂度"><a href="#2、复杂度" class="headerlink" title="2、复杂度"></a>2、复杂度</h3><p>归并排序是一种稳定的排序算法，归并排序的主要问题在于它需要一个与待排序数组一样大的辅助数组空间。由于归并排序每次划分时两个子序列的长度基本一样，所以归并排序最好、最差和平均时间复杂度都是nlog2n。 </p><p>我们可以通过下图非常容易看懂归并排序的过程： </p><p><img src="https://note.youdao.com/yws/api/personal/file/F94C8510579B48B38D52AC97D3E6C1B7?method=download&shareKey=65d334fbb49d6f315cc8421850dd33a4" alt="归并排序过程"></p><p>时间复杂度：</p><p><img src="https://note.youdao.com/yws/api/personal/file/E039B66FD79B46A4937A8C90D1AD018A?method=download&shareKey=f45e4224c86dbd0af47e81c6b20cb574" alt="归并排序复杂度"></p><h3 id="3、完整Java代码"><a href="#3、完整Java代码" class="headerlink" title="3、完整Java代码"></a>3、完整Java代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Test;</span><br><span class="line">public class MergeSort &#123;</span><br><span class="line">    //两路归并算法，两个排好序的子序列合并为一个子序列</span><br><span class="line">    public void merge(int []a,int left,int mid,int right)&#123;</span><br><span class="line">        int []tmp=new int[a.length];//辅助数组</span><br><span class="line">        int p1=left,p2=mid+1,k=left;//p1、p2是检测指针，k是存放指针</span><br><span class="line"></span><br><span class="line">        while(p1&lt;=mid &amp;&amp; p2&lt;=right)&#123;</span><br><span class="line">            if(a[p1]&lt;=a[p2])</span><br><span class="line">                tmp[k++]=a[p1++];</span><br><span class="line">            else</span><br><span class="line">                tmp[k++]=a[p2++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while(p1&lt;=mid) tmp[k++]=a[p1++];//如果第一个序列未检测完，直接将后面所有元素加到合并的序列中</span><br><span class="line">        while(p2&lt;=right) tmp[k++]=a[p2++];//同上</span><br><span class="line"></span><br><span class="line">        //复制回原素组</span><br><span class="line">        for (int i = left; i &lt;=right; i++) </span><br><span class="line">            a[i]=tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void mergeSort(int [] a,int start,int end)&#123;</span><br><span class="line">        if(start&lt;end)&#123;//当子序列中只有一个元素时结束递归</span><br><span class="line">            int mid=(start+end)/2;//划分子序列</span><br><span class="line">            mergeSort(a, start, mid);//对左侧子序列进行递归排序</span><br><span class="line">            mergeSort(a, mid+1, end);//对右侧子序列进行递归排序</span><br><span class="line">            merge(a, start, mid, end);//合并</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        int[] a = &#123; 49, 38, 65, 97, 76, 13, 27, 50 &#125;;</span><br><span class="line">        mergeSort(a, 0, a.length-1);</span><br><span class="line">        System.out.println(&quot;排好序的数组：&quot;);</span><br><span class="line">        for (int e : a)</span><br><span class="line">            System.out.print(e+&quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/qq_36442947/article/details/81612870">https://blog.csdn.net/qq_36442947/article/details/81612870</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h1&gt;&lt;h3 id=&quot;1、原理&quot;&gt;&lt;a href=&quot;#1、原理&quot; class=&quot;headerlink&quot; title=&quot;1、原理&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java8新特性</strong></p><p>（转载自<a href="https://www.runoob.com/java/java8-new-features.html%EF%BC%8C%E5%85%B7%E4%BD%93%E5%86%85%E5%AE%B9%E8%A7%81%E9%93%BE%E6%8E%A5%EF%BC%8C%E9%9D%9E%E5%B8%B8%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%94%A8%EF%BC%89">https://www.runoob.com/java/java8-new-features.html，具体内容见链接，非常详细实用）</a></p><p>Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。</p><p>Java8 新增了非常多的特性，我们主要讨论以下几个：</p><ul><li><strong>Lambda 表达式</strong> − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。</li><li><strong>方法引用</strong> − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</li><li><strong>默认方法</strong> − 默认方法就是一个在接口里面有了一个实现的方法。</li><li><strong>新工具</strong> − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。</li><li><strong>Stream API</strong> −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。</li><li><strong>Date Time API</strong> − 加强对日期与时间的处理。</li><li><strong>Optional 类</strong> − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</li><li><strong>Nashorn, JavaScript 引擎</strong> − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java8新特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（转载自&lt;a href=&quot;https://www.runoob.com/java/java8-new-features.html%EF%BC%8C%E5%85%B7%E4%BD%93%E5%86%85%E5%</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h4 id="1-线程与进程"><a href="#1-线程与进程" class="headerlink" title="1. 线程与进程"></a>1. 线程与进程</h4><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p><p>线程，有时被称为轻量级进程(Lightweight Process，LWP），是程序执行流的最小单元。线程是程序中一个单一的顺序控制流程，在单个程序中同时运行多个线程完成不同的工作，称为多线程</p><h3 id="2-同步与异步"><a href="#2-同步与异步" class="headerlink" title="2. 同步与异步"></a>2. 同步与异步</h3><p>同步（Synchronous）：同步是指一个进程在执行某个请求的时候，如果该请求需要一段时间才能返回信息，那么这个进程会一直等待下去，直到收到返回信息才继续执行下去。</p><p>异步（Asynchronous）：异步是指进程不需要一直等待下去，而是继续执行下面的操作，不管其他进程的状态，当有信息返回的时候会通知进程进行处理。</p><p>通俗地讲，也就是说，同步需要按部就班地走完一整个流程，完成一整个动作。而异步则不需要按部就班，可以在等待那个动作的时候同时做别的动作</p><h3 id="3-并行与并发"><a href="#3-并行与并发" class="headerlink" title="3. 并行与并发"></a>3. 并行与并发</h3><p>并行：时间上是由重叠的，也就是说并行才是真正意义上的同一时刻可以有多个任务同时执行。</p><p>并发：任务在执行的时候，并发是没有时间上的重叠的，两个任务是交替执行的，由于切换的非常快，对于外界调用者来说相当于同一时刻多个任务一起执行了。</p><h3 id="二、Java创建线程的3种方式"><a href="#二、Java创建线程的3种方式" class="headerlink" title="二、Java创建线程的3种方式"></a>二、Java创建线程的3种方式</h3><h4 id="1-继承-Thread-类"><a href="#1-继承-Thread-类" class="headerlink" title="1. 继承 Thread 类"></a>1. 继承 Thread 类</h4><ol><li>定义 Thread 类的子类,并重写该类的 run() 方法,该 run() 方法的方法体就代表了线程需要完成的任务.因此把 run() 方法称为线程执行体。</li><li>创建 Thread 子类的实例,即创建了线程对象。</li><li>调用线程对象的 start() 方法来启动该线程。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread &#123;</span><br><span class="line">public MyThread() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread()+&quot;:&quot;+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">MyThread mThread1=new MyThread();</span><br><span class="line">MyThread mThread2=new MyThread();</span><br><span class="line">MyThread myThread3=new MyThread();</span><br><span class="line">mThread1.start();</span><br><span class="line">mThread2.start();</span><br><span class="line">myThread3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-实现-Runnable-接口"><a href="#2-实现-Runnable-接口" class="headerlink" title="2. 实现 Runnable 接口"></a>2. 实现 Runnable 接口</h4><ol><li>定义 Runnable 接口的实现类,并重写该接口的 run() 方法,该 run() 方法的方法体同样是该线程的线程执行体。</li><li>创建 Runnable 实现类的实例,并以此实例作为 Thread 的target来创建 Thread 对象,该 Thread 对象才是真正的线程对象。</li><li>调用线程对象的 start() 方法来启动该线程。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread implements Runnable&#123;</span><br><span class="line">public static int count=20;</span><br><span class="line">public void run() &#123;</span><br><span class="line">while(count&gt;0) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(200);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;-当前剩余票数:&quot;+count--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">MyThread Thread1=new MyThread();</span><br><span class="line">Thread mThread1=new Thread(Thread1,&quot;线程1&quot;);</span><br><span class="line">Thread mThread2=new Thread(Thread1,&quot;线程2&quot;);</span><br><span class="line">Thread mThread3=new Thread(Thread1,&quot;线程3&quot;);</span><br><span class="line">mThread1.start();</span><br><span class="line">mThread2.start();</span><br><span class="line">myThread3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用此方式</p><h4 id="3-使用-Callable-和-Future"><a href="#3-使用-Callable-和-Future" class="headerlink" title="3. 使用 Callable 和 Future"></a>3. 使用 Callable 和 Future</h4><ol><li>创建 Callable 接口的实现类,并实现 call() 方法,该 call() 方法将作为线程执行体,且该 call() 方法有返回值,再创建 Callable 实现类的实例。</li><li>使用 FutureTask 类来包装 Callable 对象,该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li><li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li><li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.FutureTask;</span><br><span class="line"> </span><br><span class="line">public class MyThread implements Callable&lt;String&gt; &#123;</span><br><span class="line">private int count = 20;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public String call() throws Exception &#123;</span><br><span class="line">for (int i = count; i &gt; 0; i--) &#123;</span><br><span class="line">        //Thread.yield();</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;当前票数：&quot; + i);</span><br><span class="line">&#125;</span><br><span class="line">return &quot;sale out&quot;;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">Callable&lt;String&gt; callable  =new MyThread();</span><br><span class="line">FutureTask &lt;String&gt;futureTask=new FutureTask&lt;&gt;(callable);</span><br><span class="line">Thread mThread=new Thread(futureTask);</span><br><span class="line">Thread mThread2=new Thread(futureTask);</span><br><span class="line">Thread mThread3=new Thread(futureTask);</span><br><span class="line">        //mThread.setName(&quot;hhh&quot;);</span><br><span class="line">mThread.start();</span><br><span class="line">mThread2.start();</span><br><span class="line">mThread3.start();</span><br><span class="line">System.out.println(futureTask.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-使用线程池"><a href="#4-使用线程池" class="headerlink" title="4. 使用线程池"></a>4. 使用线程池</h4><p>通过 <code>java.util.concurrent.Executors</code> 的工具类可以创建三种类型的普通线程池：</p><h5 id="1-SingleThreadPoolExecutor-单线程池"><a href="#1-SingleThreadPoolExecutor-单线程池" class="headerlink" title="(1)SingleThreadPoolExecutor :单线程池"></a>(1)SingleThreadPoolExecutor :单线程池</h5><p>适用于需要保证顺序执行各个任务的场景。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"> </span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ExecutorService ex=Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;5;i++) &#123;</span><br><span class="line">ex.submit(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int j=0;j&lt;10;j++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">ex.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-FixThreadPool-int-n-固定大小的线程池"><a href="#2-FixThreadPool-int-n-固定大小的线程池" class="headerlink" title="(2) FixThreadPool(int n); 固定大小的线程池"></a>(2) FixThreadPool(int n); 固定大小的线程池</h5><p>使用于为了满足资源管理需求而需要限制当前线程数量的场合。使用于负载比较重的服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"> </span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ExecutorService ex=Executors.newFixedThreadPool(5);</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;5;i++) &#123;</span><br><span class="line">ex.submit(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int j=0;j&lt;10;j++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">ex.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-CashedThreadPool-缓存线程池"><a href="#5-CashedThreadPool-缓存线程池" class="headerlink" title="(5)CashedThreadPool(); 缓存线程池"></a>(5)CashedThreadPool(); 缓存线程池</h5><p>当提交任务速度高于线程池中任务处理速度时，缓存线程池会不断的创建线程 适用于提交短期的异步小程序，以及负载较轻的服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"> </span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ExecutorService ex=Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;5;i++) &#123;</span><br><span class="line">ex.submit(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int j=0;j&lt;10;j++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">ex.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h3&gt;&lt;h4 id=&quot;1-线程与进程&quot;&gt;&lt;a href=&quot;#1-线程与进程&quot; class=&quot;headerlink&quot; title=&quot;1. </summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、序列化"><a href="#1、序列化" class="headerlink" title="1、序列化"></a>1、序列化</h4><p>把对象转换为字节序列的过程。</p><h4 id="2、反序列化"><a href="#2、反序列化" class="headerlink" title="2、反序列化"></a>2、反序列化</h4><p>把字节序列恢复为对象的过程。</p><h4 id="3、对象的序列化主要有两种用途："><a href="#3、对象的序列化主要有两种用途：" class="headerlink" title="3、对象的序列化主要有两种用途："></a>3、对象的序列化主要有两种用途：</h4><p>1） 把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；</p><p>2） 在网络上传送对象的字节序列。</p><h4 id="4、serialVersionUID的作用"><a href="#4、serialVersionUID的作用" class="headerlink" title="4、serialVersionUID的作用"></a>4、serialVersionUID的作用</h4><p>对象序列化的版本号，凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量。</p><p>如果没有显式定义serialVersionUID，那么java编译器会自动给这个class进行一个摘要算法，类似于指纹算法，只要这个文件多一个空格，得到的UID就会截然不同的，可以保证在这么多类中，这个编号是唯一的。所以class有了修改之后，已修改类的serialVersionUID和之前已经序列化的文件流中的类的的serialVersionUID是不一致的，处于安全机制考虑，程序抛出了错误，并且拒绝载入。</p><p>如果显式定义了serialVersionUID，在序列化后，在类中添加字段，或者方法，不会影响到后期的还原。可以说serialVersionUID是序列化和反序列化之间彼此认识的唯一信物。</p><p>显式地定义serialVersionUID有两种用途：</p><p>1、 在某些场合，希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有相同的serialVersionUID；</p><p>2、 在某些场合，不希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有不同的serialVersionUID。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、序列化&quot;&gt;&lt;a href=&quot;#1、序列化&quot; class=&quot;headerlink&quot; title=&quot;1、序列化&quot;&gt;&lt;/a&gt;1、序列化&lt;/h4&gt;&lt;p&gt;把对象转换为字节序列的过程。&lt;/p&gt;
&lt;h4 id=&quot;2、反序列化&quot;&gt;&lt;a href=&quot;#2、反序列化&quot; class</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p>一直都有接触正则表达式，但是都是照搬过来使用的程度，没有能系统的学习，也没有留下一些笔记，下次使用还需网上查找资料。此次正好稍微做点记录，方便遗忘后重拾。</p><h3 id="1-什么是正则表达式"><a href="#1-什么是正则表达式" class="headerlink" title="1. 什么是正则表达式"></a>1. 什么是正则表达式</h3><p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p><h3 id="2-正则表达式知识点"><a href="#2-正则表达式知识点" class="headerlink" title="2. 正则表达式知识点"></a>2. 正则表达式知识点</h3><ol><li>一个字符串其实就是一个简单的正则表达式，例如 Hello World 正则表达式匹配 “Hello World” 字符串。  </li><li>java.util.regex 包主要包括以下三个类：</li></ol><ul><li><p>Pattern 类：<br>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p></li><li><p>Matcher 类：<br>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p></li><li><p>PatternSyntaxException：<br>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p></li></ul><p>以下实例中使用了正则表达式 .<em>runoob.</em> 用于查找字符串中是否包了 runoob 子串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.*;</span><br><span class="line"> </span><br><span class="line">class RegexExample1&#123;</span><br><span class="line">   public static void main(String args[])&#123;</span><br><span class="line">      String content = &quot;I am noob &quot; +</span><br><span class="line">        &quot;from runoob.com.&quot;;</span><br><span class="line"> </span><br><span class="line">      String pattern = &quot;.*runoob.*&quot;;</span><br><span class="line"> </span><br><span class="line">      boolean isMatch = Pattern.matches(pattern, content);</span><br><span class="line">      System.out.println(&quot;字符串中是否包含了 &#x27;runoob&#x27; 子字符串? &quot; + isMatch);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Java-正则表达式语法"><a href="#3-Java-正则表达式语法" class="headerlink" title="3. Java 正则表达式语法"></a>3. Java 正则表达式语法</h3><p>在其他语言中，\ 表示：我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。 </p><p>在 Java 中，\ 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。 </p><p>所以，在其他的语言中（如Perl），一个反斜杠 \ 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 \ 代表其他语言中的一个 \，这也就是为什么表示一位数字的正则表达式是 \d，而表示一个普通的反斜杠是 \\。</p><table><thead><tr><th align="center">字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，”n”匹配字符”n”。”\n”匹配换行符。序列”\\“匹配”\“，”\(“匹配”(“。</td></tr><tr><td align="center">^</td><td align="center">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与”\n”或”\r”之后的位置匹配。</td></tr><tr><td align="center">$</td><td align="center">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与”\n”或”\r”之前的位置匹配。</td></tr></tbody></table><ul><li>| 零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。<br>+ | 一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。<br>? | 零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。<br>{n} | n 是非负整数。正好匹配 n 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。<br>{n,} | n 是非负整数。至少匹配 n 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。<br>{n,m} | m 和 n 是非负整数，其中 n &lt;&#x3D; m。匹配至少 n 次，至多 m 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。<br>? | 当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。<br>x|y | 匹配 x 或 y。例如，’z|food’ 匹配”z”或”food”。’(z|f)ood’ 匹配”zood”或”food”。<br>[xyz] | 字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。<br>[^xyz] | 反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。<br>[a-z] | 字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。<br>[^a-z] | 反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。<br>\b | 匹配一个字边界，即字与空格间的位置。例如，”er\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。<br>\B | 非字边界匹配。”er\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。<br>\cx | 匹配 x 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是”c”字符本身。<br>\d | 数字字符匹配。等效于 [0-9]。<br>\D | 非数字字符匹配。等效于 [^0-9]。<br>\f | 换页符匹配。等效于 \x0c 和 \cL。<br>\n | 换行符匹配。等效于 \x0a 和 \cJ。<br>\r | 匹配一个回车符。等效于 \x0d 和 \cM。<br>\s | 匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。<br>\S | 匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。<br>\t | 制表符匹配。与 \x09 和 \cI 等效。<br>\v | 垂直制表符匹配。与 \x0b 和 \cK 等效。<br>\w | 匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效。<br>\W | 与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效。</li></ul><h3 id="4-正则表达式应用"><a href="#4-正则表达式应用" class="headerlink" title="4. 正则表达式应用"></a>4. 正则表达式应用</h3><ol><li>匹配字符串，如 手机号校验、邮箱校验</li><li>切割字符串，提取字符串信息</li></ol><p>场景：需要从一串字符串中提取出其中的主机ip信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;ip地址是127.0.0.1:8848，真的，不骗你&quot;</span><br><span class="line">Pattern pattern = Pattern.compile(&quot;(((localhost)|(\\d+.&#123;1&#125;\\d+.&#123;1&#125;\\d+.&#123;1&#125;\\d+))\\:&#123;1&#125;\\d+)&quot;);</span><br><span class="line">Matcher matcher = pattern.matcher(str);</span><br><span class="line">while (matcher.find())&#123; // 一定要先调用 find()函数！</span><br><span class="line">    host = matcher.group();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>详情见： <a href="https://www.runoob.com/java/java-regular-expressions.html">菜鸟教程：Java 正则表达式</a><br>&amp;emsp;&amp;emsp; &amp;emsp; &amp;ensp;<a href="https://www.cnblogs.com/ggjucheng/p/3423731.html">JAVA正则表达式：Pattern类与Matcher类详解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一直都有接触正则表达式，但是都是照搬过来使用的程度，没有能系统的学习，也没有留下一些笔记，下次使用还需网上查找资料。此次正好稍微做点记录，方便遗忘后重拾。&lt;/p&gt;
&lt;h3 id=&quot;1-什么是正则表达式&quot;&gt;&lt;a href=&quot;#1-什么是正则表达式&quot; class=&quot;header</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8E%9F%E5%88%99/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8E%9F%E5%88%99/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java的异常处理原则</strong></p><p>Java异常处理中的“反例”：</p><ol><li>丢弃异常</li></ol><p>捕获了异常却不作任何处理，可以算得上Java编程中的杀手。调用一下printStackTrace算不上“处理异常”。既然捕获了异常，就要对它进行适当的处理。不要捕获异常之后又把它丢弃，不予理睬。</p><ol><li>不指定具体的异常</li></ol><p>用一个catch语句捕获所有的异常。最常见的情形就是使用catch（Exception ex）语句。在catch语句中尽可能指定具体的异常类型，必要时使用多个catch.不要试图处理所有可能出现的异常。 </p><ol><li>占用资源不释放</li></ol><p>如果程序用到了文件、Socket、JDBC连接之类的资源，即使遇到了异常，也要正确释放占用的资源。Java提供了一个简化这类操作的关键词finally。 保证所有资源都被正确释放。充分运用finally关键词。 </p><ol><li>不说明异常的详细信息</li></ol><p>在出现异常时，最好能够提供一些文字信息，例如当前正在执行的类、方法和其他状态信息，包括以一种更适合阅读的方式整理和组织printStackTrace提供的信息。 </p><ol><li>过于庞大的try块</li></ol><p>一些新手常常把大量的代码放入单个try块，然后再在catch语句中声明Exception，而不是分离各个可能出现异常的段落并分别捕获其异常。这种做法为分析程序抛出异常的原因带来了困难，因为一大段代码中有太多的地方可能抛出Exception。应尽量减小try块的体积。 </p><ol><li>输出数据不完整</li></ol><p>不完整的数据是Java程序的隐形杀手。出现异常导致输出数据不完整，应该加入提示说明。全面考虑可能出现的异常以及这些异常对执行流程的影响。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java的异常处理原则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java异常处理中的“反例”：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;丢弃异常&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;捕获了异常却不作任何处理，可以算得上Java编程中的杀手。调用一下printStackTrace算不上“处</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%86%E8%8A%82/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%86%E8%8A%82/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<p>（1）. 当类中没有定义构造函数时，系统会指定给该类加上一个空参数的构造函数。这个是类中默认的构造函数。当类中如果自定义了构造函数，这时默认的构造函数就没有了。</p><p>注意: 有时候无参构造函数是必须的，比如用 @RequestBody 接收参数对象，如果没有无参数构造函数，无法正确接收参数，报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON parse error: Can not construct instance of xxx: no suitable constructor found, can not deserialize from Object value</span><br></pre></td></tr></table></figure><p>（2）. 在一个类中可以定义多个构造函数，以进行不同的初始化。多个构造函数存在于类中，是以重载的形式体现的。因为构造函数的名称都相同。</p><p>构造函数与普通函数的区别：</p><ol><li>一般函数是用于定义对象应该具备的功能。而构造函数定义的是，对象在调用功能之前，在建立时，应该具备的一些内容。也就是对象的初始化内容。</li><li>构造函数是在对象建立时由 jvm 调用, 给对象初始化。一般函数是对象建立后，当对象调用该功能时才会执行。</li><li>普通函数可以使用对象多次调用，构造函数就在创建对象时调用。</li><li>构造函数的函数名要与类名一样，而普通的函数只要符合标识符的命名规则即可。</li><li>构造函数没有返回值类型。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;（1）. 当类中没有定义构造函数时，系统会指定给该类加上一个空参数的构造函数。这个是类中默认的构造函数。当类中如果自定义了构造函数，这时默认的构造函数就没有了。&lt;/p&gt;
&lt;p&gt;注意: 有时候无参构造函数是必须的，比如用 @RequestBody 接收参数对象，如果没有无参数</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Java%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7%E7%B1%BB/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> format：时间格式，例：yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTimeNow</span><span class="params">(String format)</span>&#123;</span><br><span class="line">        Calendar calendar= Calendar.getInstance();</span><br><span class="line">        SimpleDateFormat dateFormat= <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间的前n天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> format：时间格式，例：yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTimeDayBefore</span><span class="params">(<span class="type">int</span> n, String format)</span>&#123;</span><br><span class="line">        Calendar calendar= Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH, - n); </span><br><span class="line">        SimpleDateFormat dateFormat= <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更加自由的时间字符串获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 当前时间之间 n 个单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> step 步进单位，如 Calendar.MONTH(2)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format 时间格式，如：yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTimeBefore</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> step, String format)</span>&#123;</span><br><span class="line">        Calendar calendar= Calendar.getInstance();</span><br><span class="line">        calendar.add(step, - n); </span><br><span class="line">        SimpleDateFormat dateFormat= <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Jenkins%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Jenkins%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>一开始是仓库没有jar包，编译报错，上传jar后仍然报错，确认信息填写正确。 报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failure to find com.github.sanjusoftware:yamlbeans:jar:1.11 in http://nexus.apusic.net/content/groups/public was cached in the local repository, resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced</span><br></pre></td></tr></table></figure><p>由于之前编译有了缓存信息，后面再编译不会再从远程仓库拉取，需要删掉本地仓库缓存文件。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一开始是仓库没有jar包，编译报错，上传jar后仍然报错，确认信息填写正确。 报错：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Skywalking%E4%BD%BF%E7%94%A8graphql%E6%9F%A5%E8%AF%A2/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Skywalking%E4%BD%BF%E7%94%A8graphql%E6%9F%A5%E8%AF%A2/</id>
    <published>2022-12-16T07:12:54.164Z</published>
    <updated>2022-12-16T07:12:54.164Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查询单个服务的数据信息"><a href="#查询单个服务的数据信息" class="headerlink" title="查询单个服务的数据信息"></a>查询单个服务的数据信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;query&quot;</span>:</span><br><span class="line"><span class="string">&quot;query queryData($serviceId: ID!,$duration: Duration!) &#123;</span></span><br><span class="line"><span class="string">  serviceApdexScore: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_apdex\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;value&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceResponseTime: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_resp_time\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;value&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceThroughput: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_cpm\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;</span></span><br><span class="line"><span class="string">      value</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceSLA: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_sla\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;</span></span><br><span class="line"><span class="string">      value</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  globalPercentile: getMultipleLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;all_percentile\&quot;</span></span><br><span class="line"><span class="string">  &#125;, numOfLinear: 5, duration: $duration) &#123; values &#123; value &#125; &#125;</span></span><br><span class="line"><span class="string">  servicePercentile: getMultipleLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_percentile\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, numOfLinear: 5, duration: $duration) &#123; values &#123; value &#125; &#125;</span></span><br><span class="line"><span class="string">  serviceSlowEndpoint: getEndpointTopN(</span></span><br><span class="line"><span class="string">    serviceId: $serviceId</span></span><br><span class="line"><span class="string">    duration: $duration</span></span><br><span class="line"><span class="string">    name: \&quot;endpoint_avg\&quot;,</span></span><br><span class="line"><span class="string">    topN: 10,</span></span><br><span class="line"><span class="string">    order: DES</span></span><br><span class="line"><span class="string">  ) &#123;</span></span><br><span class="line"><span class="string">    key: id</span></span><br><span class="line"><span class="string">    label: name</span></span><br><span class="line"><span class="string">    value</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceInstanceThroughput: getServiceInstanceTopN(</span></span><br><span class="line"><span class="string">    serviceId: $serviceId</span></span><br><span class="line"><span class="string">    duration: $duration</span></span><br><span class="line"><span class="string">    name: \&quot;service_instance_cpm\&quot;,</span></span><br><span class="line"><span class="string">    topN: 10,</span></span><br><span class="line"><span class="string">    order: DES</span></span><br><span class="line"><span class="string">  ) &#123;</span></span><br><span class="line"><span class="string">    key: id</span></span><br><span class="line"><span class="string">    label: name</span></span><br><span class="line"><span class="string">    value</span></span><br><span class="line"><span class="string">  &#125;&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;variables&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;atabaseId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;duration&quot;</span>:&#123;<span class="string">&quot;start&quot;</span>: <span class="string">&quot;2020-05-18&quot;</span>, <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2020-05-21&quot;</span>, <span class="string">&quot;step&quot;</span>: <span class="string">&quot;DAY&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;endpointId&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line"><span class="string">&quot;endpointName&quot;</span>:<span class="string">&quot;/api/items&quot;</span>,</span><br><span class="line"><span class="string">&quot;instanceId&quot;</span>:<span class="string">&quot;5&quot;</span>,</span><br><span class="line"><span class="string">&quot;serviceId&quot;</span>:<span class="string">&quot;4&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;serviceApdexScore&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">10000</span>&#125;]&#125;,<span class="string">&quot;serviceResponseTime&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,<span class="string">&quot;serviceThroughput&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;]&#125;,<span class="string">&quot;serviceSLA&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">10000</span>&#125;]&#125;,<span class="string">&quot;globalPercentile&quot;</span>:[&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">370</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">410</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">410</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">1560</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">1560</span>&#125;]&#125;],<span class="string">&quot;servicePercentile&quot;</span>:[&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">370</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;],<span class="string">&quot;serviceSlowEndpoint&quot;</span>:[&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;4&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;/api/items&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;],<span class="string">&quot;serviceInstanceThroughput&quot;</span>:[&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;5&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;provider-pid:4920@KFW7BT1P01V035&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-查询一段时间内的服务id和名称"><a href="#2-查询一段时间内的服务id和名称" class="headerlink" title="2. 查询一段时间内的服务id和名称"></a>2. 查询一段时间内的服务id和名称</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: <span class="string">&quot;query queryServices($duration: Duration!) &#123;services: getAllServices(duration: $duration) &#123;id, name&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;variables&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;duration&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;start&quot;</span>: <span class="string">&quot;2020-05-21&quot;</span>,</span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2020-05-22&quot;</span>,</span><br><span class="line">      <span class="string">&quot;step&quot;</span>: <span class="string">&quot;DAY&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;services&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;consumer&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;SpringBootWithSkywalking-HelloTomcat&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello-world-demo&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;provider&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得服务的id和name，可以用来查询响应时间、可用性等指标</p><h4 id="3-根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量"><a href="#3-根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量" class="headerlink" title="3. 根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量"></a>3. 根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;query&quot;</span>:</span><br><span class="line"><span class="string">&quot;query queryData($serviceIds: [ID!]!,$duration: Duration!) &#123;</span></span><br><span class="line"><span class="string">serviceResponseTime: getValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_resp_time\&quot;</span></span><br><span class="line"><span class="string"> ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">  values &#123;id, value&#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">serviceApdexScore: getValues(metric: &#123;</span></span><br><span class="line"><span class="string"> name: \&quot;service_apdex\&quot;</span></span><br><span class="line"><span class="string"> ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123; id,value&#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">    serviceSLA: getValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_sla\&quot;</span></span><br><span class="line"><span class="string">    ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;id, value&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">serviceThroughput: getValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_cpm\&quot;</span></span><br><span class="line"><span class="string">    ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;id, value&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;variables&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;duration&quot;</span>:&#123;<span class="string">&quot;start&quot;</span>: <span class="string">&quot;2020-05-21&quot;</span>, <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2020-05-22&quot;</span>, <span class="string">&quot;step&quot;</span>: <span class="string">&quot;DAY&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;serviceIds&quot;</span>:[<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;7&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;serviceResponseTime&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">191</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">989</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">380</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">144</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serviceApdexScore&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">7500</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serviceSLA&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serviceThroughput&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;查询单个服务的数据信息&quot;&gt;&lt;a href=&quot;#查询单个服务的数据信息&quot; class=&quot;headerlink&quot; title=&quot;查询单个服务的数据信息&quot;&gt;&lt;/a&gt;查询单个服务的数据信息&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
</feed>

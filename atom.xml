<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dalin blog</title>
  
  
  <link href="https://tianxiafeiyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://tianxiafeiyu.github.io/"/>
  <updated>2022-12-16T07:22:54.804Z</updated>
  <id>https://tianxiafeiyu.github.io/</id>
  
  <author>
    <name>Dalin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chrome年度热门扩展程序</title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/Chrome%E5%B9%B4%E5%BA%A6%E7%83%AD%E9%97%A8%20%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/Chrome%E5%B9%B4%E5%BA%A6%E7%83%AD%E9%97%A8%20%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-12-16T15:18:00.000Z</published>
    <updated>2022-12-16T07:22:54.804Z</updated>
    
    <content type="html"><![CDATA[<p>Google 官方统计的年度榜单，多看涨姿势~~</p><p>2022：<a href="https://www.oschina.net/news/221758/chrome-extension-favorite-2022">https://www.oschina.net/news/221758/chrome-extension-favorite-2022</a></p><p>2021：<a href="https://www.oschina.net/news/172732/chrome-extension-favorite-2021">https://www.oschina.net/news/172732/chrome-extension-favorite-2021</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Google 官方统计的年度榜单，多看涨姿势~~&lt;/p&gt;
&lt;p&gt;2022：&lt;a href=&quot;https://www.oschina.net/news/221758/chrome-extension-favorite-2022&quot;&gt;https://www.oschina.net</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="grocery" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/grocery/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/os/Linux%20shell%20%E5%90%84%E7%A7%8D%E7%AC%A6%E5%8F%B7%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/os/Linux%20shell%20%E5%90%84%E7%A7%8D%E7%AC%A6%E5%8F%B7%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、小括号，圆括号（）"><a href="#一、小括号，圆括号（）" class="headerlink" title="一、小括号，圆括号（）"></a>一、小括号，圆括号（）</h1><h2 id="1、单小括号"><a href="#1、单小括号" class="headerlink" title="1、单小括号 ()"></a>1、单小括号 ()</h2><p>①命令组。括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格。</p><p>②命令替换。等同于cmd，shell扫描一遍命令行，发现了结构，便将(cmd)结构，便将(cmd)中的cmd执行一次，得到其标准输出，再将此输出放到原来命令。有些shell不支持，如tcsh。</p><p>③用于初始化数组。如：array&#x3D;(a b c d)</p><h2 id="2、双小括号"><a href="#2、双小括号" class="headerlink" title="2、双小括号 (( ))"></a>2、双小括号 (( ))</h2><p>①整数扩展。这种扩展计算是整数型的计算，不支持浮点型。((exp))结构扩展并计算一个算术表达式的值，如果表达式的结果为0，那么返回的退出状态码为1，或者 是”假”，而一个非零值的表达式所返回的退出状态码将为0，或者是”true”。若是逻辑判断，表达式exp为真则为1,假则为0。</p><p>②只要括号中的运算符、表达式符合C语言运算规则，都可用在((exp))中，甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。如：echo((16#5f)) 结果为95 (16进位转十进制)</p><p>③单纯用 (( )) 也可重定义变量值，比如 a&#x3D;5; ((a++)) 可将 $a 重定义为6</p><p>④常用于算术运算比较，双括号中的变量可以不使用符号前缀。括号内支持多个表达式用逗号分开。只要括号中的表达式符合C语言运算规则,比如可以直接使用for((i&#x3D;0;i&lt;5;i++)),如果不使用双括号,则为foriin‘seq04‘或者foriin0..4。再如可以直接使用if((i&lt;5)), 如果不使用双括号, 则为if [ $i -lt 5 ]。</p><h1 id="二、中括号，方括号"><a href="#二、中括号，方括号" class="headerlink" title="二、中括号，方括号[]"></a>二、中括号，方括号[]</h1><h2 id="1、单中括号"><a href="#1、单中括号" class="headerlink" title="1、单中括号 []"></a>1、单中括号 []</h2><p>①bash 的内部命令，[和test是等同的。如果我们不用绝对路径指明，通常我们用的都是bash自带的命令。if&#x2F;test结构中的左中括号是调用test的命令标识，右中括号是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试，并且根据比较的结果来返回一个退出状态码。if&#x2F;test结构中并不是必须右中括号，但是新版的Bash中要求必须这样。</p><p>②Test和[]中可用的比较运算符只有&#x3D;&#x3D;和!&#x3D;，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq，-gt这种形式。无论是字符串比较还是整数比较都不支持大于号小于号。如果实在想用，对于字符串比较可以使用转义形式，如果比较”ab”和”bc”：[ ab &lt; bc ]，结果为真，也就是返回状态为0。[ ]中的逻辑与和逻辑或使用-a 和-o 表示。</p><p>③字符范围。用作正则表达式的一部分，描述一个匹配的字符范围。作为test用途的中括号内不能使用正则。</p><p>④在一个array 结构的上下文中，中括号用来引用数组中每个元素的编号。</p><h2 id="2、双中括号"><a href="#2、双中括号" class="headerlink" title="2、双中括号[[ ]]"></a>2、双中括号[[ ]]</h2><p>①[[是 bash 程序语言的关键字。并不是一个命令，[[ ]] 结构比[ ]结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。</p><p>②支持字符串的模式匹配，使用&#x3D;~操作符时甚至支持shell的正则表达式。字符串比较时可以把右边的作为一个模式，而不仅仅是一个字符串，比如[[ hello &#x3D;&#x3D; hell? ]]，结果为真。[[ ]] 中匹配字符串或通配符，不需要引号。</p><p>③使用[[ … ]]条件判断结构，而不是[ … ]，能够防止脚本中的许多逻辑错误。比如，&amp;&amp;、||、&lt;和&gt; 操作符能够正常存在于[[ ]]条件判断结构中，但是如果出现在[ ]结构中的话，会报错。比如可以直接使用if [[ $a !&#x3D; 1 &amp;&amp; $a !&#x3D; 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] &amp;&amp; [ $a !&#x3D; 2 ]或者if [ $a -ne 1 -a $a !&#x3D; 2 ]。</p><p>④bash把双中括号中的表达式看作一个单独的元素，并返回一个退出状态码。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if ($i&lt;5) </span><br><span class="line">if [ $i -lt 5 ] </span><br><span class="line">if [ $a -ne 1 -a $a != 2 ] </span><br><span class="line">if [ $a -ne 1] &amp;&amp; [ $a != 2 ] </span><br><span class="line">if [[ $a != 1 &amp;&amp; $a != 2 ]] </span><br><span class="line">for i in $(seq 0 4);do echo $i;done</span><br><span class="line">for i in `seq 0 4`;do echo $i;done</span><br><span class="line">for ((i=0;i&lt;5;i++));do echo $i;done</span><br><span class="line">for i in &#123;0..4&#125;;do echo $i;done</span><br></pre></td></tr></table></figure><h1 id="三、大括号、花括号"><a href="#三、大括号、花括号" class="headerlink" title="三、大括号、花括号 {}"></a>三、大括号、花括号 {}</h1><h2 id="1、常规用法"><a href="#1、常规用法" class="headerlink" title="1、常规用法"></a>1、常规用法</h2><p>①大括号拓展。(通配(globbing))将对大括号中的文件名做扩展。在大括号中，不允许有空白，除非这个空白被引用或转义。第一种：对大括号中的以逗号分割的文件列表进行拓展。如 touch {a,b}.txt 结果为a.txt b.txt。第二种：对大括号中以点点（..）分割的顺序文件列表起拓展作用，如：touch {a..d}.txt 结果为a.txt b.txt c.txt d.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ls &#123;ex1,ex2&#125;.sh </span><br><span class="line">ex1.sh ex2.sh </span><br><span class="line"># ls &#123;ex&#123;1..3&#125;,ex4&#125;.sh </span><br><span class="line">ex1.sh ex2.sh ex3.sh ex4.sh </span><br><span class="line"># ls &#123;ex[1-3],ex4&#125;.sh </span><br><span class="line">ex1.sh ex2.sh ex3.sh ex4.sh</span><br></pre></td></tr></table></figure><p>②代码块，又被称为内部组，这个结构事实上创建了一个匿名函数 。与小括号中的命令不同，大括号内的命令不会新开一个子shell运行，QQ号码买卖即脚本余下部分仍可使用括号内变量。括号内的命令间用分号隔开，最后一个也必须有分号。{}的第一个命令和左括号之间必须要有一个空格。</p><h2 id="2、几种特殊的替换结构"><a href="#2、几种特殊的替换结构" class="headerlink" title="2、几种特殊的替换结构"></a>2、几种特殊的替换结构</h2><p>${var:-string},${var:+string},${var:&#x3D;string},${var:?string}</p><p>①${var:-string}和${var:&#x3D;string}:若变量var为空，则用在命令行中用string来替换${var:-string}，否则变量var不为空时，则用变量var的值来替换${var:-string}；对于${var:&#x3D;string}的替换规则和${var:-string}是一样的，所不同之处是${var:&#x3D;string}若var为空时，用string替换${var:&#x3D;string}的同时，把string赋给变量var：${var:&#x3D;string}很常用的一种用法是，判断某个变量是否赋值，没有的话则给它赋上一个默认值。</p><p>② ${var:+string}的替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var为空时则不替换或者说是替换成变量 var的值，即空值。(因为变量var此时为空，所以这两种说法是等价的) </p><p>③${var:?string}替换规则为：若变量var不为空，则用变量var的值来替换${var:?string}；若变量var为空，则把string输出到标准错误中，并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。</p><p>补充扩展：在上面这五种替换结构中string不一定是常值的，可用另外一个变量的值或是一种命令的输出。</p><h2 id="3、四种模式匹配替换结构"><a href="#3、四种模式匹配替换结构" class="headerlink" title="3、四种模式匹配替换结构"></a>3、四种模式匹配替换结构</h2><p>模式匹配记忆方法：</p><p>#是去掉左边(在键盘上#在$之左边)</p><p>%是去掉右边(在键盘上%在$之右边)</p><p>#和%中的单一符号是最小匹配，两个相同符号是最大匹配。</p><p>${var%pattern},${var%%pattern},${var#pattern},${var##pattern}<br>第一种模式：${variable%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最短的匹配模式</p><p>第二种模式：${variable%%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式</p><p>第三种模式：${variable#pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern开始，如果是，就从命令行把variable中的内容去掉左边最短的匹配模式</p><p>第四种模式：${variable##pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式</p><p>这四种模式中都不会改变variable的值，其中，只有在pattern中使用了<em>匹配符号时，%和%%，#和##才有区别。结构中的pattern支持通配符，</em>表示零个或多个任意字符，?表示仅与一个任意字符匹配，[…]表示匹配中括号里面的字符，[!…]表示不匹配中括号里面的字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># var=testcase </span><br><span class="line"># echo $var </span><br><span class="line">testcase </span><br><span class="line"># echo $&#123;var%s*e&#125; </span><br><span class="line">testca </span><br><span class="line"># echo $var </span><br><span class="line">testcase </span><br><span class="line"># echo $&#123;var%%s*e&#125; </span><br><span class="line">te </span><br><span class="line"># echo $&#123;var#?e&#125; </span><br><span class="line">stcase </span><br><span class="line"># echo $&#123;var##?e&#125; </span><br><span class="line">stcase </span><br><span class="line"># echo $&#123;var##*e&#125;</span><br><span class="line"># echo $&#123;var##*s&#125; </span><br><span class="line">e </span><br><span class="line"># echo $&#123;var##test&#125; </span><br><span class="line">case</span><br></pre></td></tr></table></figure><h2 id="4、字符串提取和替换"><a href="#4、字符串提取和替换" class="headerlink" title="4、字符串提取和替换"></a>4、字符串提取和替换</h2><p>${var:num},${var:num1:num2},${var&#x2F;pattern&#x2F;pattern},${var&#x2F;&#x2F;pattern&#x2F;pattern}</p><p>第一种模式：${var:num}，这种模式时，shell在 var中提取第num个字符到末尾的所有字符。若num为正数，从左边0处开始；若num为负数，从右边开始提取字串，但必须使用在冒号后面加空格或一个数字或整个num加上括号，如${var: -2}、${var:1-3}或${var:(-2)}。       </p><p>第二种模式：${var:num1:num2}，num1是位置，num2是长度。表示从$var字符串的第$num1个位置开始提取长度为$num2的子串。不能为负数。</p><p>第三种模式：${var&#x2F;pattern&#x2F;pattern}表示将var字符串的第一个匹配的pattern替换为另一个pattern。</p><p>第四种模式：${var&#x2F;&#x2F;pattern&#x2F;pattern}表示将var字符串中的所有能匹配的pattern替换为另一个pattern。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# var=/home/centos </span><br><span class="line">[root@centos ~]# echo $var </span><br><span class="line">/home/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var:5&#125; </span><br><span class="line">/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var: -6&#125; </span><br><span class="line">centos </span><br><span class="line">[root@centos ~]# echo $&#123;var:(-6)&#125; </span><br><span class="line">centos </span><br><span class="line">[root@centos ~]# echo $&#123;var:1:4&#125; </span><br><span class="line">home </span><br><span class="line">[root@centos ~]# echo $&#123;var/o/h&#125; </span><br><span class="line">/hhme/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var//o/h&#125; </span><br><span class="line">/hhme/cenths</span><br></pre></td></tr></table></figure><h1 id="四、符号-后的括号"><a href="#四、符号-后的括号" class="headerlink" title="四、符号$后的括号"></a>四、符号$后的括号</h1><p>（1）${a} 变量a的值, 在不引起歧义的情况下可以省略大括号。</p><p>（2）$(cmd) 命令替换，和<code>cmd</code>效果相同，结果为shell命令cmd的输，过某些Shell版本不支持$()形式的命令替换, 如tcsh。</p><p>（3）$((expression)) 和<code>exprexpression</code>效果相同, 计算数学表达式exp的数值, 其中exp只要符合C语言的运算规则即可, 甚至三目运算符和逻辑表达式都可以计算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、小括号，圆括号（）&quot;&gt;&lt;a href=&quot;#一、小括号，圆括号（）&quot; class=&quot;headerlink&quot; title=&quot;一、小括号，圆括号（）&quot;&gt;&lt;/a&gt;一、小括号，圆括号（）&lt;/h1&gt;&lt;h2 id=&quot;1、单小括号&quot;&gt;&lt;a href=&quot;#1、单小括号&quot; cla</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="os" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/os/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Jenkins%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Jenkins%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>一开始是仓库没有jar包，编译报错，上传jar后仍然报错，确认信息填写正确。 报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failure to find com.github.sanjusoftware:yamlbeans:jar:1.11 in http://nexus.apusic.net/content/groups/public was cached in the local repository, resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced</span><br></pre></td></tr></table></figure><p>由于之前编译有了缓存信息，后面再编译不会再从远程仓库拉取，需要删掉本地仓库缓存文件。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一开始是仓库没有jar包，编译报错，上传jar后仍然报错，确认信息填写正确。 报错：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Skywalking%E4%BD%BF%E7%94%A8graphql%E6%9F%A5%E8%AF%A2/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Skywalking%E4%BD%BF%E7%94%A8graphql%E6%9F%A5%E8%AF%A2/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查询单个服务的数据信息"><a href="#查询单个服务的数据信息" class="headerlink" title="查询单个服务的数据信息"></a>查询单个服务的数据信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;query&quot;</span>:</span><br><span class="line"><span class="string">&quot;query queryData($serviceId: ID!,$duration: Duration!) &#123;</span></span><br><span class="line"><span class="string">  serviceApdexScore: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_apdex\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;value&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceResponseTime: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_resp_time\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;value&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceThroughput: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_cpm\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;</span></span><br><span class="line"><span class="string">      value</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceSLA: getLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_sla\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;</span></span><br><span class="line"><span class="string">      value</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  globalPercentile: getMultipleLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;all_percentile\&quot;</span></span><br><span class="line"><span class="string">  &#125;, numOfLinear: 5, duration: $duration) &#123; values &#123; value &#125; &#125;</span></span><br><span class="line"><span class="string">  servicePercentile: getMultipleLinearIntValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_percentile\&quot;</span></span><br><span class="line"><span class="string">    id: $serviceId</span></span><br><span class="line"><span class="string">  &#125;, numOfLinear: 5, duration: $duration) &#123; values &#123; value &#125; &#125;</span></span><br><span class="line"><span class="string">  serviceSlowEndpoint: getEndpointTopN(</span></span><br><span class="line"><span class="string">    serviceId: $serviceId</span></span><br><span class="line"><span class="string">    duration: $duration</span></span><br><span class="line"><span class="string">    name: \&quot;endpoint_avg\&quot;,</span></span><br><span class="line"><span class="string">    topN: 10,</span></span><br><span class="line"><span class="string">    order: DES</span></span><br><span class="line"><span class="string">  ) &#123;</span></span><br><span class="line"><span class="string">    key: id</span></span><br><span class="line"><span class="string">    label: name</span></span><br><span class="line"><span class="string">    value</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  serviceInstanceThroughput: getServiceInstanceTopN(</span></span><br><span class="line"><span class="string">    serviceId: $serviceId</span></span><br><span class="line"><span class="string">    duration: $duration</span></span><br><span class="line"><span class="string">    name: \&quot;service_instance_cpm\&quot;,</span></span><br><span class="line"><span class="string">    topN: 10,</span></span><br><span class="line"><span class="string">    order: DES</span></span><br><span class="line"><span class="string">  ) &#123;</span></span><br><span class="line"><span class="string">    key: id</span></span><br><span class="line"><span class="string">    label: name</span></span><br><span class="line"><span class="string">    value</span></span><br><span class="line"><span class="string">  &#125;&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;variables&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;atabaseId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;duration&quot;</span>:&#123;<span class="string">&quot;start&quot;</span>: <span class="string">&quot;2020-05-18&quot;</span>, <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2020-05-21&quot;</span>, <span class="string">&quot;step&quot;</span>: <span class="string">&quot;DAY&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;endpointId&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line"><span class="string">&quot;endpointName&quot;</span>:<span class="string">&quot;/api/items&quot;</span>,</span><br><span class="line"><span class="string">&quot;instanceId&quot;</span>:<span class="string">&quot;5&quot;</span>,</span><br><span class="line"><span class="string">&quot;serviceId&quot;</span>:<span class="string">&quot;4&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;serviceApdexScore&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">10000</span>&#125;]&#125;,<span class="string">&quot;serviceResponseTime&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,<span class="string">&quot;serviceThroughput&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;]&#125;,<span class="string">&quot;serviceSLA&quot;</span>:&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">10000</span>&#125;]&#125;,<span class="string">&quot;globalPercentile&quot;</span>:[&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">370</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">410</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">410</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">1560</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">1560</span>&#125;]&#125;],<span class="string">&quot;servicePercentile&quot;</span>:[&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">370</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;,&#123;<span class="string">&quot;values&quot;</span>:[&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;]&#125;],<span class="string">&quot;serviceSlowEndpoint&quot;</span>:[&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;4&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;/api/items&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">380</span>&#125;],<span class="string">&quot;serviceInstanceThroughput&quot;</span>:[&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;5&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;provider-pid:4920@KFW7BT1P01V035&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">0</span>&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-查询一段时间内的服务id和名称"><a href="#2-查询一段时间内的服务id和名称" class="headerlink" title="2. 查询一段时间内的服务id和名称"></a>2. 查询一段时间内的服务id和名称</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: <span class="string">&quot;query queryServices($duration: Duration!) &#123;services: getAllServices(duration: $duration) &#123;id, name&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;variables&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;duration&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;start&quot;</span>: <span class="string">&quot;2020-05-21&quot;</span>,</span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2020-05-22&quot;</span>,</span><br><span class="line">      <span class="string">&quot;step&quot;</span>: <span class="string">&quot;DAY&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;services&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;consumer&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;SpringBootWithSkywalking-HelloTomcat&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello-world-demo&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;provider&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得服务的id和name，可以用来查询响应时间、可用性等指标</p><h4 id="3-根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量"><a href="#3-根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量" class="headerlink" title="3. 根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量"></a>3. 根据服务id数组查询响应时间、服务apdex分数、slas数、吞吐量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;query&quot;</span>:</span><br><span class="line"><span class="string">&quot;query queryData($serviceIds: [ID!]!,$duration: Duration!) &#123;</span></span><br><span class="line"><span class="string">serviceResponseTime: getValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_resp_time\&quot;</span></span><br><span class="line"><span class="string"> ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">  values &#123;id, value&#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">serviceApdexScore: getValues(metric: &#123;</span></span><br><span class="line"><span class="string"> name: \&quot;service_apdex\&quot;</span></span><br><span class="line"><span class="string"> ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123; id,value&#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">    serviceSLA: getValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_sla\&quot;</span></span><br><span class="line"><span class="string">    ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;id, value&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">serviceThroughput: getValues(metric: &#123;</span></span><br><span class="line"><span class="string">    name: \&quot;service_cpm\&quot;</span></span><br><span class="line"><span class="string">    ids: $serviceIds</span></span><br><span class="line"><span class="string">&#125;, duration: $duration) &#123;</span></span><br><span class="line"><span class="string">    values &#123;id, value&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;variables&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;duration&quot;</span>:&#123;<span class="string">&quot;start&quot;</span>: <span class="string">&quot;2020-05-21&quot;</span>, <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2020-05-22&quot;</span>, <span class="string">&quot;step&quot;</span>: <span class="string">&quot;DAY&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;serviceIds&quot;</span>:[<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;7&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;serviceResponseTime&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">191</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">989</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">380</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">144</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serviceApdexScore&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">7500</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serviceSLA&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">10000</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serviceThroughput&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;查询单个服务的数据信息&quot;&gt;&lt;a href=&quot;#查询单个服务的数据信息&quot; class=&quot;headerlink&quot; title=&quot;查询单个服务的数据信息&quot;&gt;&lt;/a&gt;查询单个服务的数据信息&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Skywalking%E5%AD%A6%E4%B9%A0/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Skywalking%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<p>SkyWalking 中非常重要的三个概念：</p><ul><li>服务(Service) ：表示对请求提供相同行为的一系列或一组工作负载。在使用 Agent 或 SDK 的时候，你可以定义服务的名字。如果不定义的话，SkyWalking 将会使用你在平台（例如说 Istio）上定义的名字。</li><li>服务实例(Service Instance) ：上述的一组工作负载中的每一个工作负载称为一个实例。就像 Kubernetes 中的 pods 一样, 服务实例未必就是操作系统上的一个进程。但当你在使用 Agent 的时候, 一个服务实例实际就是操作系统上的一个真实进程。</li><li>端点(Endpoint) ：对于特定服务所接收的请求路径, 如 HTTP 的 URI 路径和 gRPC 服务的类名 + 方法签名。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SkyWalking 中非常重要的三个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务(Service) ：表示对请求提供相同行为的一系列或一组工作负载。在使用 Agent 或 SDK 的时候，你可以定义服务的名字。如果不定义的话，SkyWalking 将会使用你在平台（例如说 Is</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20boot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20boot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<p>公司职级认证有单元测试要求，花了一天时间把欠下的的补完了。。。</p><h4 id="spring-boot引入单元测试"><a href="#spring-boot引入单元测试" class="headerlink" title="spring boot引入单元测试"></a>spring boot引入单元测试</h4><p>pom.xml 文件中写入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>spring boot中单元测试目录与main同级</p><h4 id="spring-boot使用单元测试"><a href="#spring-boot使用单元测试" class="headerlink" title="spring boot使用单元测试"></a>spring boot使用单元测试</h4><ol><li>快捷生成测试类<br>idea 中选中要测试的类 -&gt; Ctrl+Shift+T 打开创建测试类窗口 -&gt; 选择要测试的方法，创建测试类 生成的类路径为 Test 包下的同名路径。</li><li>自己创建测试类<br>Test 目录下自己创建类。。。</li></ol><p>类创建完成后还需要加上注解，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不同场景下的单元测试"><a href="#不同场景下的单元测试" class="headerlink" title="不同场景下的单元测试"></a>不同场景下的单元测试</h4><ol><li>对于 Controller 层单元测试，使用 @AutoConfigureMockMvc，示例代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LicenseInfoResourceTest</span> <span class="keyword">extends</span> <span class="title class_">AbstractRestControllerTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化MockMvc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试的controller</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> LicenseInfoResource licenseInfoResource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        SecurityContextHolder.clearContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@WithMockUser(username = &quot;admin&quot;, password = &quot;admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getLicenseInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MvcResult</span> <span class="variable">mvcResult</span> <span class="operator">=</span> mvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/license/get_platform_info&quot;</span>))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andReturn();</span><br><span class="line">        System.out.println(<span class="string">&quot;content&quot;</span> + mvcResult.getResponse().getContentAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>对于有运行时环境的要求，当前用户记录等，需要在类或者方法上加上注册变量：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@WithMockUser(username = &quot;admin&quot;, password = &quot;admin&quot;)</span><br></pre></td></tr></table></figure><ol><li>对于单点登陆应用，调用接口需要 token ,可以先获取token，然后加入到请求头中：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取token工具类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LogInUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">OBJECT_MAPPER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">LogInUtils</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTokenForLogin</span><span class="params">(String username, String password, MockMvc mockMvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="comment">// 设置验证码</span></span><br><span class="line">      <span class="type">MockHttpSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockHttpSession</span>();</span><br><span class="line">      session.setAttribute(<span class="string">&quot;vrifyCode&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> mockMvc.perform(post(<span class="string">&quot;/api/authenticate&quot;</span>)</span><br><span class="line">         .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">         .session(session)</span><br><span class="line">         .content(<span class="string">&quot;&#123;\&quot;password\&quot;: \&quot;&quot;</span> + password + <span class="string">&quot;\&quot;, \&quot;username\&quot;: \&quot;&quot;</span> + username + <span class="string">&quot;\&quot;, \&quot;code\&quot;: \&quot;&quot;</span>+ code + <span class="string">&quot;\&quot;&#125;&quot;</span>))</span><br><span class="line">         .andReturn()</span><br><span class="line">         .getResponse()</span><br><span class="line">         .getContentAsString();</span><br><span class="line">      <span class="type">AuthenticationResponse</span> <span class="variable">authResponse</span> <span class="operator">=</span> OBJECT_MAPPER.readValue(content, AuthenticationResponse.class);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> authResponse.getIdToken();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AuthenticationResponse</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@JsonAlias(&quot;id_token&quot;)</span></span><br><span class="line">      <span class="keyword">private</span> String idToken;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIdToken</span><span class="params">(String idToken)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.idToken = idToken;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getIdToken</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> idToken;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 获取token加入到请求头 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createRole</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> LogInUtils.getTokenForLogin(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;admin&quot;</span>, mvc);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;超级管理员2\&quot;,\&quot;remark\&quot;:\&quot;权限\&quot;,\&quot;permissionIds\&quot;:\&quot;1\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">MvcResult</span> <span class="variable">mvcResult</span> <span class="operator">=</span> mvc.perform(MockMvcRequestBuilders.post(<span class="string">&quot;/role/create_role&quot;</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">            .content(json)</span><br><span class="line">            .header(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span> + token))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">            .andDo(MockMvcResultHandlers.print())</span><br><span class="line">            .andReturn();</span><br><span class="line">    System.out.println(<span class="string">&quot;status: &quot;</span> + mvcResult.getResponse().getStatus());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MocMvc详解"><a href="#MocMvc详解" class="headerlink" title="MocMvc详解"></a>MocMvc详解</h4><p>转载自 <a href="https://blog.csdn.net/wo541075754/article/details/88983708">https://blog.csdn.net/wo541075754/article/details/88983708</a></p><ol><li>什么是Mock?<br>模拟对象（mock object），是以可控的方式模拟真实对象行为的假对象。在编程过程中，通常通过模拟一些输入数据，来验证程序是否达到预期结果。使用模拟对象，可以模拟复杂的、真实的对象行为。如果在单元测试中无法使用真实对象，可采用模拟对象进行替代。</li><li>什么是MockMvc？<br>MockMvc是由spring-test包提供，实现了对Http请求的模拟，能够直接使用网络的形式，转换到Controller的调用，使得测试速度快、不依赖网络环境。同时提供了一套验证的工具，结果的验证十分方便。</li><li>spring使用MocMvc<br>spring中使用MockMvcBuilder来构造MocMvc。它有两种实现方式：StandaloneMockMvcBuilder和DefaultMockMvcBuilder，分别对应两种测试方式，即独立安装和集成Web环境测试（并不会集成真正的web环境，而是通过相应的Mock API进行模拟测试，无须启动服务器）。<br>代码示例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringBoot1.4版本之前用的是SpringJUnit4ClassRunner.class</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="comment">//SpringBoot1.4版本之前用的是@SpringApplicationConfiguration(classes = Application.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="comment">//测试环境使用，用来表示测试环境使用的ApplicationContext将是WebApplicationContext类型的</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 实例化方式一</span></span><br><span class="line">mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> <span class="title class_">HelloWorldController</span>()).build();</span><br><span class="line"><span class="comment">// 实例化方式二</span></span><br><span class="line"><span class="comment">//mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单元测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1、mockMvc.perform执行一个请求。</span></span><br><span class="line"><span class="comment"> * 2、MockMvcRequestBuilders.get(&quot;XXX&quot;)构造一个请求。</span></span><br><span class="line"><span class="comment"> * 3、ResultActions.param添加请求传值</span></span><br><span class="line"><span class="comment"> * 4、ResultActions.accept(MediaType.TEXT_HTML_VALUE))设置返回类型</span></span><br><span class="line"><span class="comment"> * 5、ResultActions.andExpect添加执行完成后的断言。</span></span><br><span class="line"><span class="comment"> * 6、ResultActions.andDo添加一个结果处理器，表示要对结果做点什么事情</span></span><br><span class="line"><span class="comment"> *   比如此处使用MockMvcResultHandlers.print()输出整个响应结果信息。</span></span><br><span class="line"><span class="comment"> * 7、ResultActions.andReturn表示执行完成后返回相应的结果。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mockMvc.perform(MockMvcRequestBuilders</span><br><span class="line">.get(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line"><span class="comment">// 设置返回值类型为utf-8，否则默认为ISO-8859-1</span></span><br><span class="line">.accept(MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line">.param(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>))</span><br><span class="line">.andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">.andExpect(MockMvcResultMatchers.content().string(<span class="string">&quot;Hello Tom!&quot;</span>))</span><br><span class="line">.andDo(MockMvcResultHandlers.print());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、准备测试环境</span><br><span class="line">2、通过MockMvc执行请求</span><br><span class="line">3、添加验证断言</span><br><span class="line">4、添加结果处理器</span><br><span class="line">5、得到MvcResult进行自定义断言/进行下一步的异步请求</span><br><span class="line">6、卸载测试环境</span><br></pre></td></tr></table></figure><p>Sping boot2.0后使用MocMvc更加方便，只需要在测试类加上<code>@AutoConfigureMockMvc</code>注解，就可以注入MocMvc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">Test</span>  &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化MockMvc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：如果使用DefaultMockMvcBuilder进行MockMvc实例化时需在SpringBoot启动类上添加组件扫描的package的指定，否则会出现404。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.secbro2&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="一些常用的测试"><a href="#一些常用的测试" class="headerlink" title="一些常用的测试"></a>一些常用的测试</h4><ol><li>测试普通控制器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mockMvc.perform(get(<span class="string">&quot;/user/&#123;id&#125;&quot;</span>, <span class="number">1</span>)) <span class="comment">//执行请求  </span></span><br><span class="line">            .andExpect(model().attributeExists(<span class="string">&quot;user&quot;</span>)) <span class="comment">//验证存储模型数据  </span></span><br><span class="line">            .andExpect(view().name(<span class="string">&quot;user/view&quot;</span>)) <span class="comment">//验证viewName  </span></span><br><span class="line">            .andExpect(forwardedUrl(<span class="string">&quot;/WEB-INF/jsp/user/view.jsp&quot;</span>))<span class="comment">//验证视图渲染时forward到的jsp  </span></span><br><span class="line">            .andExpect(status().isOk())<span class="comment">//验证状态码  </span></span><br><span class="line">            .andDo(print()); <span class="comment">//输出MvcResult到控制台</span></span><br></pre></td></tr></table></figure><ol><li>得到MvcResult自定义验证</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MvcResult result = mockMvc.perform(get(&quot;/user/&#123;id&#125;&quot;, 1))//执行请求  </span><br><span class="line">        .andReturn(); //返回MvcResult  </span><br><span class="line">Assert.assertNotNull(result.getModelAndView().getModel().get(&quot;user&quot;)); //自定义断言 </span><br></pre></td></tr></table></figure><ol><li>验证请求参数绑定到模型数据及Flash属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mockMvc.perform(post(<span class="string">&quot;/user&quot;</span>).param(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhang&quot;</span>)) <span class="comment">//执行传递参数的POST请求(也可以post(&quot;/user?name=zhang&quot;))  </span></span><br><span class="line">            .andExpect(handler().handlerType(UserController.class)) <span class="comment">//验证执行的控制器类型  </span></span><br><span class="line">            .andExpect(handler().methodName(<span class="string">&quot;create&quot;</span>)) <span class="comment">//验证执行的控制器方法名  </span></span><br><span class="line">            .andExpect(model().hasNoErrors()) <span class="comment">//验证页面没有错误  </span></span><br><span class="line">            .andExpect(flash().attributeExists(<span class="string">&quot;success&quot;</span>)) <span class="comment">//验证存在flash属性  </span></span><br><span class="line">            .andExpect(view().name(<span class="string">&quot;redirect:/user&quot;</span>)); <span class="comment">//验证视图  </span></span><br></pre></td></tr></table></figure><ol><li>文件上传</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">byte[] bytes = new byte[] &#123;1, 2&#125;;  </span><br><span class="line">mockMvc.perform(fileUpload(&quot;/user/&#123;id&#125;/icon&quot;, 1L).file(&quot;icon&quot;, bytes)) //执行文件上传  </span><br><span class="line">        .andExpect(model().attribute(&quot;icon&quot;, bytes)) //验证属性相等性  </span><br><span class="line">        .andExpect(view().name(&quot;success&quot;)); //验证视图 </span><br></pre></td></tr></table></figure><ol><li>JSON请求&#x2F;响应验证</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">requestBody</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:1, \&quot;name\&quot;:\&quot;zhang\&quot;&#125;&quot;</span>;  </span><br><span class="line">    mockMvc.perform(post(<span class="string">&quot;/user&quot;</span>)  </span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON).content(requestBody)  </span><br><span class="line">            .accept(MediaType.APPLICATION_JSON)) <span class="comment">//执行请求  </span></span><br><span class="line">            .andExpect(content().contentType(MediaType.APPLICATION_JSON)) <span class="comment">//验证响应contentType  </span></span><br><span class="line">            .andExpect(jsonPath(<span class="string">&quot;$.id&quot;</span>).value(<span class="number">1</span>)); <span class="comment">//使用Json path验证JSON 请参考http://goessner.net/articles/JsonPath/  </span></span><br><span class="line">      </span><br><span class="line">    <span class="type">String</span> <span class="variable">errorBody</span> <span class="operator">=</span> <span class="string">&quot;&#123;id:1, name:zhang&#125;&quot;</span>;  </span><br><span class="line">    <span class="type">MvcResult</span> <span class="variable">result</span> <span class="operator">=</span> mockMvc.perform(post(<span class="string">&quot;/user&quot;</span>)  </span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON).content(errorBody)  </span><br><span class="line">            .accept(MediaType.APPLICATION_JSON)) <span class="comment">//执行请求  </span></span><br><span class="line">            .andExpect(status().isBadRequest()) <span class="comment">//400错误请求  </span></span><br><span class="line">            .andReturn();  </span><br><span class="line">      </span><br><span class="line">    Assert.assertTrue(HttpMessageNotReadableException.class.isAssignableFrom(result.getResolvedException().getClass()));<span class="comment">//错误的请求内容体</span></span><br></pre></td></tr></table></figure><ol><li>异步测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Callable  </span></span><br><span class="line">    <span class="type">MvcResult</span> <span class="variable">result</span> <span class="operator">=</span> mockMvc.perform(get(<span class="string">&quot;/user/async1?id=1&amp;name=zhang&quot;</span>)) <span class="comment">//执行请求  </span></span><br><span class="line">            .andExpect(request().asyncStarted())  </span><br><span class="line">            .andExpect(request().asyncResult(CoreMatchers.instanceOf(User.class))) <span class="comment">//默认会等10秒超时  </span></span><br><span class="line">            .andReturn();  </span><br><span class="line">      </span><br><span class="line">    mockMvc.perform(asyncDispatch(result))  </span><br><span class="line">            .andExpect(status().isOk())  </span><br><span class="line">            .andExpect(content().contentType(MediaType.APPLICATION_JSON))  </span><br><span class="line">            .andExpect(jsonPath(<span class="string">&quot;$.id&quot;</span>).value(<span class="number">1</span>));  </span><br><span class="line"><span class="comment">//Callable  </span></span><br><span class="line">    <span class="type">MvcResult</span> <span class="variable">result</span> <span class="operator">=</span> mockMvc.perform(get(<span class="string">&quot;/user/async1?id=1&amp;name=zhang&quot;</span>)) <span class="comment">//执行请求  </span></span><br><span class="line">            .andExpect(request().asyncStarted())  </span><br><span class="line">            .andExpect(request().asyncResult(CoreMatchers.instanceOf(User.class))) <span class="comment">//默认会等10秒超时  </span></span><br><span class="line">            .andReturn();  </span><br><span class="line">      </span><br><span class="line">    mockMvc.perform(asyncDispatch(result))  </span><br><span class="line">            .andExpect(status().isOk())  </span><br><span class="line">            .andExpect(content().contentType(MediaType.APPLICATION_JSON))  </span><br><span class="line">            .andExpect(jsonPath(<span class="string">&quot;$.id&quot;</span>).value(<span class="number">1</span>));  </span><br></pre></td></tr></table></figure><ol><li>全局配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mockMvc = webAppContextSetup(wac)  </span><br><span class="line">            .defaultRequest(get(<span class="string">&quot;/user/1&quot;</span>).requestAttr(<span class="string">&quot;default&quot;</span>, <span class="literal">true</span>)) <span class="comment">//默认请求 如果其是Mergeable类型的，会自动合并的哦mockMvc.perform中的RequestBuilder  </span></span><br><span class="line">            .alwaysDo(print())  <span class="comment">//默认每次执行请求后都做的动作  </span></span><br><span class="line">            .alwaysExpect(request().attribute(<span class="string">&quot;default&quot;</span>, <span class="literal">true</span>)) <span class="comment">//默认每次执行后进行验证的断言  </span></span><br><span class="line">            .build();  </span><br><span class="line">      </span><br><span class="line">    mockMvc.perform(get(<span class="string">&quot;/user/1&quot;</span>))  </span><br><span class="line">            .andExpect(model().attributeExists(<span class="string">&quot;user&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;公司职级认证有单元测试要求，花了一天时间把欠下的的补完了。。。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot引入单元测试&quot;&gt;&lt;a href=&quot;#spring-boot引入单元测试&quot; class=&quot;headerlink&quot; title=&quot;spring boot引入单元测试&quot;&gt;</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20boot%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20boot%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-加载自定义文件"><a href="#1-加载自定义文件" class="headerlink" title="1. 加载自定义文件"></a>1. 加载自定义文件</h4><blockquote><p>YAML files cannot be loaded by using the @PropertySource annotation. So, in the case that you need to load values that way, you need to use a properties file.<br>即@PropertySource不支持YAML文件。</p></blockquote><p>要让@PropertySource支持Yaml文件，可以做如下配置：</p><p>继承DefaultPropertySourceFactory类并修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YamlConfigFactory</span> <span class="keyword">extends</span> <span class="title class_">DefaultPropertySourceFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sourceName</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name : resource.getResource().getFilename();</span><br><span class="line">        <span class="keyword">if</span> (!resource.getResource().exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertiesPropertySource</span>(sourceName, <span class="keyword">new</span> <span class="title class_">Properties</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sourceName.endsWith(<span class="string">&quot;.yml&quot;</span>) || sourceName.endsWith(<span class="string">&quot;.yaml&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">propertiesFromYaml</span> <span class="operator">=</span> loadYml(resource);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertiesPropertySource</span>(sourceName, propertiesFromYaml);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.createPropertySource(name, resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties <span class="title function_">loadYml</span><span class="params">(EncodedResource resource)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">YamlPropertiesFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YamlPropertiesFactoryBean</span>();</span><br><span class="line">        factory.setResources(resource.getResource());</span><br><span class="line">        factory.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> factory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:application-my.yml&quot;&#125;,factory = YamlConfigFactory.class)</span></span><br></pre></td></tr></table></figure><h4 id="2-spring-boot中配置文件访问优先级"><a href="#2-spring-boot中配置文件访问优先级" class="headerlink" title="2. spring boot中配置文件访问优先级"></a>2. spring boot中配置文件访问优先级</h4><p>优先级如下</p><ol><li>第一种是在执行命令的目录下建config文件夹，然后把配置文件放到这个文件夹下。(在jar包的同一个目录下建config文件夹，执行命令需要在jar包所在目录下才行)</li><li>第二种是直接把配置文件放到jar包的同级目录</li><li>第三种在classpath下建一个config文件夹，然后把配置文件放进去。</li><li>第四种是在classpath下直接放配置文件。</li></ol><p>springboot默认是优先读取它本身同级目录下的一个config&#x2F;application.properties文件的。在src&#x2F;main&#x2F;resource文件夹下创建的application.properties文件的优先级是最低的</p><p>所以springboot启动读取外部配置文件，只需要在外面加一层配置文件覆盖默认的即可，不用修改代码</p><h4 id="3-指定配置文件路径启动程序"><a href="#3-指定配置文件路径启动程序" class="headerlink" title="3. 指定配置文件路径启动程序"></a>3. 指定配置文件路径启动程序</h4><p>#通过 –spring.config.location指定配置文件路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -Xms256M -Xmx1024M -jar  mailgateway-<span class="number">2.0</span><span class="number">.0</span><span class="number">.12</span>.jar --spring.config.location=/usr/ums_chenly/application-prod.properties --spring.profiles.active=prod &gt; mailgateway_nohup_out_`date +%Y%m%d`.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><p>说明</p><ol><li>如果启动程序时指定配置文件路径，则程序运行时只读取指定的配置文件。指定配置文件不存在则报错，程序启动失败。</li><li>如果不指定配置文件路径，则按上述优先级加载，如果优先级高的配置文件中没有某个配置项，则会到优先级低的配置文件中找该配置项，即具有互补功能(文件名相同才会互补，比如classpath下的application-prod.properties会补jar包的同级目录下application-prod.properties的某个配置项，但是classpath下的application.properties不会补application-prod.properties的某个配置项)。如果指定配置文件路径，则不互补，只会读取指定的配置文件。</li><li>如果spring.config.location和 spring.profiles.active都不指定， 默认找application.properties文件。如果spring.profiles.active指定dev，则默认找application-dev.properties文件。如果spring.profiles.active指定prod,则会找application-prod.properties文件</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-加载自定义文件&quot;&gt;&lt;a href=&quot;#1-加载自定义文件&quot; class=&quot;headerlink&quot; title=&quot;1. 加载自定义文件&quot;&gt;&lt;/a&gt;1. 加载自定义文件&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;YAML files cannot be loaded</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20security%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/Spring%20security%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<p>配置适配器 WebSecurityConfigurerAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  spring security 核心配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrowerSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span>  <span class="comment">//自定义的安全元   数据源     实现FilterInvocationSecurityMetadataSource</span></span><br><span class="line">    <span class="keyword">private</span> MyInvocationSecurityMetadataSourceService myInvocationSecurityMetadataSourceService;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//自定义访问决策器</span></span><br><span class="line">    <span class="keyword">private</span> MyAccessDecisionManager myAccessDecisionManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  from表单登录设置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;&quot;</span>)                      <span class="comment">//登录页面                      /login</span></span><br><span class="line">                .passwordParameter(<span class="string">&quot;&quot;</span>)              <span class="comment">//设置form表单中对应的name参数  默认为 password   下同</span></span><br><span class="line">                .usernameParameter(<span class="string">&quot;&quot;</span>)              <span class="comment">//</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;&quot;</span>)            <span class="comment">//认证成功后的跳转页面 默认跳转页面   可以设置是否总是默认  不是的话可以跳转与用户的target-url</span></span><br><span class="line">                .failureUrl(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                .failureForwardUrl(<span class="string">&quot;&quot;</span>)            <span class="comment">//登录失败 转发 的url</span></span><br><span class="line">                .successForwardUrl(<span class="string">&quot;&quot;</span>)              <span class="comment">//登录成功 转发 的url  与successHandler对应  即处理完后请求转发的url</span></span><br><span class="line">                .failureHandler(<span class="literal">null</span>)               <span class="comment">//自定义的认证失败 做什么处理</span></span><br><span class="line">                .successHandler(<span class="literal">null</span>)               <span class="comment">//自定义认证成功 后做的处理    ----- 例如 想记录用户信息判断用户状态等</span></span><br><span class="line">                .permitAll()                      <span class="comment">//对于需要所有用户都可以访问的界面 或者url进行设置</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;&quot;</span>)             <span class="comment">//自定义处理认证的url    默认为    /login</span></span><br><span class="line">                .authenticationDetailsSource(<span class="literal">null</span>)  <span class="comment">//自定义身份验证的数据源  理解为查出数据库中的密码 和权限（可以不加） 然后再交给security</span></span><br><span class="line">                <span class="comment">////修改和替换配置     已经配置好的修改   例如下面修改  安全拦截器的安全数据源</span></span><br><span class="line">                .withObjectPostProcessor(<span class="keyword">new</span> <span class="title class_">ObjectPostProcessor</span>&lt;FilterSecurityInterceptor&gt;() &#123;</span><br><span class="line">                    <span class="keyword">public</span> &lt;O <span class="keyword">extends</span> <span class="title class_">FilterSecurityInterceptor</span>&gt; O <span class="title function_">postProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">                            O fsi)</span> &#123;</span><br><span class="line">                        fsi.setPublishAuthorizationSuccess(<span class="literal">true</span>);</span><br><span class="line">                        <span class="comment">//修改成自定义的     安全元数据源  权限的源  ！！！！！</span></span><br><span class="line">                        fsi.setSecurityMetadataSource(myInvocationSecurityMetadataSourceService);</span><br><span class="line">                        <span class="comment">//修改成自定义的     访问决策器  自定义的</span></span><br><span class="line">                        fsi.setAccessDecisionManager(myAccessDecisionManager);</span><br><span class="line">                        <span class="comment">//使用系统的</span></span><br><span class="line">                        fsi.setAuthenticationManager(authenticationManager);</span><br><span class="line">                        <span class="keyword">return</span> fsi;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  请求认证管理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;url匹配路径&quot;</span>).permitAll()          <span class="comment">//url匹配路径 permitAll 运行 全部访问 不用认证</span></span><br><span class="line">                .accessDecisionManager(<span class="literal">null</span>)                                 <span class="comment">//访问决策器</span></span><br><span class="line">                .filterSecurityInterceptorOncePerRequest(<span class="literal">true</span>)               <span class="comment">//过滤每个请求一次的安全拦截器 ？？？</span></span><br><span class="line">                .anyRequest().authenticated()                                <span class="comment">//其他的请求 需要认证，</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)      <span class="comment">//url匹配路径  具有怎样的角色</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;</span>)   <span class="comment">//url匹配路径    具有怎样的角色 或者是权限</span></span><br><span class="line">        ;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  anonymous</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  匿名访问时  存在默认 用户名  annonymousUser</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.anonymous().disable().csrf().disable();                         <span class="comment">//禁止匿名  关闭csrf</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 登出操作管理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.logout()                                                        <span class="comment">//登出处理</span></span><br><span class="line">                .logoutUrl(<span class="string">&quot;/my/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/my/index&quot;</span>)</span><br><span class="line">                .logoutSuccessHandler(<span class="literal">null</span>)</span><br><span class="line">                .invalidateHttpSession(<span class="literal">true</span>)</span><br><span class="line">                .addLogoutHandler(<span class="literal">null</span>)</span><br><span class="line">                .deleteCookies(<span class="string">&quot;cookieNamesToClear&quot;</span>)</span><br><span class="line">        ;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  session  会话管理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.sessionManagement()                                            <span class="comment">//session管理</span></span><br><span class="line">                .maximumSessions(<span class="number">2</span>)                                         <span class="comment">//最大session 数量 --用户</span></span><br><span class="line">                .maxSessionsPreventsLogin(<span class="literal">false</span>)                            <span class="comment">//超过最大sessin数量后时候阻止登录</span></span><br><span class="line">                .expiredUrl(<span class="string">&quot;/&quot;</span>)                                            <span class="comment">//会话失效后跳转的url</span></span><br><span class="line">                .expiredSessionStrategy(<span class="literal">null</span>)                               <span class="comment">//自定义session 过期错略</span></span><br><span class="line">                .sessionRegistry(<span class="literal">null</span>)                                     <span class="comment">//自定义的session 注册 表</span></span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *   基础的配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        auth</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 认证 时触发的事件</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .authenticationEventPublisher(<span class="literal">null</span>)</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 *  用户细节服务</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 *  认证管理器数据的来源 吧  用户身份凭证信息和 权限信息</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .userDetailsService(<span class="literal">null</span>)</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 *  密码编辑器 对密码进行加密</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .passwordEncoder(<span class="literal">null</span>)</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 不进行拦截的mvc</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        web.ignoring().mvcMatchers();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加自定义的 安全过滤器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        web.addSecurityFilterChainBuilder(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;配置适配器 WebSecurityConfigurerAdapter&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/acmp%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/acmp%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得到Instant格式的今天的最小日期，用于比对。"><a href="#1-数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得到Instant格式的今天的最小日期，用于比对。" class="headerlink" title="1. 数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得到Instant格式的今天的最小日期，用于比对。"></a>1. 数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得到Instant格式的今天的最小日期，用于比对。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">minTime</span> <span class="operator">=</span> localDate.atTime(LocalTime.MIN);</span><br><span class="line"><span class="type">Instant</span> <span class="variable">today</span> <span class="operator">=</span> minTime.toInstant(ZoneOffset.of(<span class="string">&quot;+0&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="2-物理分页查询（数据库分页）"><a href="#2-物理分页查询（数据库分页）" class="headerlink" title="2. 物理分页查询（数据库分页）"></a>2. 物理分页查询（数据库分页）</h4><p>业务场景：查询数据库表联系人分页，筛选条件pid、status、name；按创建时间降序排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Specification&lt;AlarmContact&gt; specification = (Specification&lt;AlarmContact&gt;) (root, query, criteriaBuilder) -&gt; &#123;</span><br><span class="line">            List&lt;Predicate&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(criteriaBuilder.equal(root.get(<span class="string">&quot;projectId&quot;</span>), projectId));</span><br><span class="line">            list.add(criteriaBuilder.equal(root.get(<span class="string">&quot;status&quot;</span>), ResourceStatus.ENABLE));</span><br><span class="line">            <span class="keyword">if</span> (name.length() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 此处为查询含有name的数据</span></span><br><span class="line">                list.add(criteriaBuilder.like(root.get(<span class="string">&quot;name&quot;</span>),<span class="string">&quot;%&quot;</span>+ name +<span class="string">&quot;%&quot;</span> ));</span><br><span class="line">            &#125;</span><br><span class="line">            Predicate[] p = <span class="keyword">new</span> <span class="title class_">Predicate</span>[list.size()];</span><br><span class="line">            <span class="keyword">return</span> criteriaBuilder.and(list.toArray(p));</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageRequest</span>(page, limit, Sort.Direction.DESC, <span class="string">&quot;createdDate&quot;</span>);</span><br><span class="line">Page&lt;AlarmContact&gt; alarmContact，Page = alarmContactRepository.findAll(specification, pageable);</span><br></pre></td></tr></table></figure><h4 id="3-集合分页"><a href="#3-集合分页" class="headerlink" title="3. 集合分页"></a>3. 集合分页</h4><p>业务场景：拥有用户的集合，需要将这个集合进行分页返回给前端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList;<span class="comment">//默认已经有List数据</span></span><br><span class="line"><span class="comment">//根据传进来的用户名字进行模糊筛选</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> != name.length())&#123;</span><br><span class="line">            List&lt;User&gt; temList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            temList.addAll(userList);</span><br><span class="line">            <span class="keyword">for</span>(User user : temList)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!user.getUsername().contains(name))&#123;</span><br><span class="line">                    userList.remove(user);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//集合转Page</span></span><br><span class="line"><span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageRequest</span>(page, limit, Sort.Direction.ASC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">// 当前页第一条数据在List中的位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> (<span class="type">int</span>)pageable.getOffset();</span><br><span class="line"><span class="comment">// 当前页最后一条数据在List中的位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> (start + pageable.getPageSize()) &gt; userList.size() ? userList.size() : ( start + pageable.getPageSize());</span><br><span class="line"><span class="comment">// 配置分页数据</span></span><br><span class="line">Page&lt;User&gt; userPagePage = <span class="keyword">new</span> <span class="title class_">PageImpl</span>&lt;&gt;(userList.subList(start, end), pageable, userList.size());</span><br></pre></td></tr></table></figure><h4 id="4-树的相关操作"><a href="#4-树的相关操作" class="headerlink" title="4. 树的相关操作"></a>4. 树的相关操作</h4><p>业务场景：在做权限控制的时候，权限是树的形式，根据前端需求需要提供不同的数据格式。</p><ol><li>求出当前用户的所有具体权限（叶子节点）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;Permission&gt; <span class="title function_">getEXactPermission</span><span class="params">()</span> &#123;</span><br><span class="line">    Set&lt;Role&gt; roles = userRoleRepository.findByUserId(userCache.getId()).stream().map(userRole -&gt; userRole.getRole()).collect(Collectors.toSet());</span><br><span class="line">    Set&lt;Permission&gt; permissions = roles.stream().flatMap(role -&gt; role.getPermissions().stream()).collect(Collectors.toSet());</span><br><span class="line">    Set&lt;Permission&gt; exactPermissions = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Permission permission : permissions)&#123;</span><br><span class="line">    Set&lt;Permission&gt; permissions1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    findTreeleafs(permission, permissions1);</span><br><span class="line">    exactPermissions.addAll(permissions1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exactPermissions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归遍历树的叶子节点，如果只有一个节点，它也是叶子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findTreeleafs</span><span class="params">(Permission permission, Set&lt;Permission&gt; permissionSet)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(permission.getChildren().size() == <span class="number">0</span>)&#123;</span><br><span class="line">        permissionSet.add(permission);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(Permission permission1 : permission.getChildren())&#123;</span><br><span class="line">        <span class="keyword">if</span> (permission.getChildren().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            permissionSet.addAll(permission.getChildren());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            findTreeleafs(permission1, permissionSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>获取权限子树。就是用户拥有权限的完整路径</li></ol><p>思路：获取用户的具体权限集合（叶子节点），删除完整树中没有达到集合中的路径。</p><h4 id="5-spring-boot-JPA多条件查询"><a href="#5-spring-boot-JPA多条件查询" class="headerlink" title="5. spring boot JPA多条件查询"></a>5. spring boot JPA多条件查询</h4><p>1）Repository需要继承JpaRepository和JpaSpecificationExecutor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">projectRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Project, Long&gt;, JpaSpecificationExecutor&lt;Project&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）构建筛选器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分页查询获取分页列表</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> companyId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> Page&lt;Project&gt; <span class="title function_">getListByCompanyPage</span><span class="params">(PageFilter pageFilter,String companyId,Date beginDate,Date endDate,String projectName)</span> &#123;</span><br><span class="line">       Page&lt;Project&gt; l=projectRepository.findAll(<span class="keyword">new</span> <span class="title class_">Specification</span>&lt;Project&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Predicate <span class="title function_">toPredicate</span><span class="params">(Root&lt;Project&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder cBuilder)</span> &#123;</span><br><span class="line">               <span class="comment">//开始，定义一个Predicate</span></span><br><span class="line">               Predicat  <span class="type">e</span> <span class="variable">p</span> <span class="operator">=</span> cBuilder.conjunction();</span><br><span class="line">               <span class="comment">/**精确查询**/</span></span><br><span class="line">               p = cBuilder.and(p, cBuilder.equal(root.get(<span class="string">&quot;companyId&quot;</span>), companyId));</span><br><span class="line">               <span class="comment">/**模糊查询**/</span></span><br><span class="line">               p = cBuilder.and(p, cBuilder.like(root.get(<span class="string">&quot;projectName&quot;</span>), <span class="string">&quot;%&quot;</span>+projectName+<span class="string">&quot;%&quot;</span>));</span><br><span class="line">               <span class="comment">/**时间段查询**/</span></span><br><span class="line">               <span class="comment">//大于等于开始时间</span></span><br><span class="line">               p = cBuilder.and(p, cBuilder.greaterThanOrEqualTo(root.get(<span class="string">&quot;createTime&quot;</span>), beginDate));</span><br><span class="line">               <span class="comment">//小于等于结束时间</span></span><br><span class="line">               p = cBuilder.and(p, cBuilder.lessThanOrEqualTo(root.get(<span class="string">&quot;createTime&quot;</span>), endDate));</span><br><span class="line">               <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, pageFilter.getPageRequest());</span><br><span class="line">       <span class="keyword">return</span> l;</span><br></pre></td></tr></table></figure><h4 id="6-jpa-delete无法删除"><a href="#6-jpa-delete无法删除" class="headerlink" title="6. jpa delete无法删除"></a>6. jpa delete无法删除</h4><p>问题描述：两张表表1和表2通过一张中间表表3关联，都是一对多关系。表1的一条记录 a 已经和表2的记录 b 关联起来了。逻辑删除 a 记录，现在需要删除 b 记录，表3的关联记录还存在，要先根据 b 记录删掉表3的关联记录，但是此时用 JPA 的 deleteAllBy… 不生效，非常疑惑，自定义 sql 删除生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query(&quot;delete from UserRole where role.id = ?1&quot;)</span></span><br></pre></td></tr></table></figure><p>解答：看到网上有说法说是 JPA 的 entity 对象生命周期问题，由于表 1 还存在记录的引用，之后会更新回来。。。</p><h4 id="7-分页查询结果集中某个属性等于某个值的元素排在前面"><a href="#7-分页查询结果集中某个属性等于某个值的元素排在前面" class="headerlink" title="7. 分页查询结果集中某个属性等于某个值的元素排在前面"></a>7. 分页查询结果集中某个属性等于某个值的元素排在前面</h4><p>业务场景：分页查询数据库，状态为 ON 的值排在前面，且根据最后修改时间排序。</p><p>分析讨论：Java分页查询的排序并不是很难，特别是使用Pagable时排序非常方便，但是一般的排序都市按照升序或者降序排序，根据某个属性的特定值排序很少看见，头疼。</p><p>问题解决：</p><p>1）偷懒办法，如果只有两种状态，仍然可以用升序降序进行排序，这时候比较的就是两种不同值的相对大小（数值、字符串类型等）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Sort</span> <span class="variable">sort</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Sort</span>(Sort.Direction.DESC, <span class="string">&quot;status&quot;</span>).and(<span class="keyword">new</span> <span class="title class_">Sort</span>(Sort.Direction.DESC, <span class="string">&quot;lastModifiedDate&quot;</span>));</span><br><span class="line"><span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageRequest</span>(page, limit, sort);</span><br></pre></td></tr></table></figure><p>2）有多种不同状态时，可以使用 sql 语句进行查询 </p><p>3）查询出元素集合列表，进行排序，然后对集合进行分页。</p><h4 id="8-读取-jar-包中MANIFEST-MF文件信息"><a href="#8-读取-jar-包中MANIFEST-MF文件信息" class="headerlink" title="8. 读取 jar 包中MANIFEST.MF文件信息"></a>8. 读取 jar 包中MANIFEST.MF文件信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过JarFile的getJarEntry方法读取META-INF/MANIFEST.MF</span></span><br><span class="line">jarFile = <span class="keyword">new</span> <span class="title class_">JarFile</span>(jarFilePath);</span><br><span class="line"><span class="type">JarEntry</span> <span class="variable">entry</span> <span class="operator">=</span> jarFile.getJarEntry(<span class="string">&quot;META-INF/MANIFEST.MF&quot;</span>);</span><br><span class="line"><span class="comment">// 如果读取到MANIFEST.   F文件内容，则转换为string</span></span><br><span class="line"><span class="keyword">if</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span>  jarFile.getInputStream(entry);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        sb.append(line+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="9-编写泛型方法"><a href="#9-编写泛型方法" class="headerlink" title="9. 编写泛型方法"></a>9. 编写泛型方法</h4><p>错误示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Page&lt;T&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> limit, List&lt;T&gt; data)</span>&#123;    <span class="comment">// ... &#125;</span></span><br></pre></td></tr></table></figure><p>实际使用时候会报类型无法匹配的错误。</p><p>正确写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; Page&lt;T&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> limit, List&lt;T&gt; data)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-Java中父类能不能强转为子类？"><a href="#10-Java中父类能不能强转为子类？" class="headerlink" title="10. Java中父类能不能强转为子类？"></a>10. Java中父类能不能强转为子类？</h4><p>一般来说父类是不能强转为子类对象的，因为子类中可能包含父类没有的属性或方法，父类强转子类会存在不确定性。</p><blockquote><p>《java面向对象程序设计（第2版）》，一个父类类型的对象如果是用子类new出来的时候, 就不能称之为父类对象，而是一个子类的上转型对象。这两者是有区别的，区别的其中一点就是父类对象不可强制转换为子类对象，而子类的上转型对象可以强制转换回子类对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">       <span class="type">Father</span> <span class="variable">father2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">       <span class="type">Son</span> <span class="variable">son1</span> <span class="operator">=</span> (Son) father1;<span class="comment">//报错</span></span><br><span class="line">       <span class="type">Son</span> <span class="variable">son2</span> <span class="operator">=</span> (Son) father2;<span class="comment">//不报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上看到很搞笑的一段描述：孙子可能会装大爷，大爷永远不会装孙子。</p><p>哈哈，非常贴切生动了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得到Instant格式的今天的最小日期，用于比对。&quot;&gt;&lt;a href=&quot;#1-数据库存储创建日期是Instant格式，后台需要根据今天日期查找今天创建的记录。主要是需要得</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/idea+maven+git%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/idea+maven+git%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-jdk安装"><a href="#1-jdk安装" class="headerlink" title="1. jdk安装"></a>1. jdk安装</h4><p>网上下载jdk，运行安装程序</p><p>配置环境变量：</p><ul><li>系统变量-&gt;新增-&gt;变量名：JAVA_HOME，变量值：java安装根目录</li><li>path变量-&gt;新增 -&gt;%JAVA_HOME%\bin</li></ul><p>控制台输入<code>java -version</code>验证</p><h4 id="2-idea安装"><a href="#2-idea安装" class="headerlink" title="2. idea安装"></a>2. idea安装</h4><p>百度搜索下载安装、破解，没啥好说的</p><h4 id="3-maven安装"><a href="#3-maven安装" class="headerlink" title="3. maven安装"></a>3. maven安装</h4><p><a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a> 下载二进制安装包，直接解压到磁盘</p><p>配置环境变量：</p><ul><li>系统变量-&gt;新增-&gt;变量名：MAVEN_HOME，变量值：maven根目录</li><li>path变量-&gt;新增 -&gt;%MAVEN_HOME%\bin</li></ul><p>控制台输入<code>mvn -v</code>验证</p><p>配置本地仓库和远程仓库：打开%MAVEN_HOME%\conf\settings.xml文件，编辑</p><ul><li>本地仓库：解开localRepository标签注释，将地址改为要设置的本地仓库地址</li><li>远程仓库：在mirrors标签中添加子标签如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;      </span><br><span class="line">  &lt;id&gt;nexus-aliyun&lt;/id&gt;    </span><br><span class="line">  &lt;name&gt;nexus-aliyun&lt;/name&gt;  </span><br><span class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;    </span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;      </span><br><span class="line">&lt;/mirror&gt;  </span><br></pre></td></tr></table></figure><h4 id="4-git安装"><a href="#4-git安装" class="headerlink" title="4. git安装"></a>4. git安装</h4><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 下载安装程序，会有很多安装选项，可以一路选择默认选项，安装完成</p><p>安装过程会自动添加git环境变量，不再需要手动配置</p><p>控制台输入<code>git --version</code>验证</p><p>配置git 用户和邮箱:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name [github注册用户名]</span><br><span class="line">git config --global user.email [github邮箱]</span><br><span class="line">git config --global user.password [用户密码]</span><br><span class="line">git config --list   查看当前配置</span><br><span class="line"># 需要修改信息的话重新运行以上命令即可</span><br></pre></td></tr></table></figure><p>常用命令：</p><ul><li>git init ：给项目添加仓库</li><li>git add . ：添加项目下的所有文件到仓库中，也可以指定文件</li><li>git commit -m [提交时的描述信息] ：提交时的附带信息</li><li>git remote add origin [自己的仓库url地址] ：将本地的仓库关联到github的仓库，需要先在github上创建仓库</li><li>git push -u origin master ：项目上传到github仓库中</li><li>git clone [github仓库url地址] :克隆项目到当前目录下</li></ul><h4 id="5-idea使用maven"><a href="#5-idea使用maven" class="headerlink" title="5. idea使用maven"></a>5. idea使用maven</h4><p>File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Maven :</p><ul><li>Maven home directory -&gt; 选择%MAVEN_HOME%</li><li>User settings file -&gt; 选择%MAVEN_HOME%\conf\settings</li><li>Local repository -&gt; 选择本地仓库</li></ul><p>出现版本不兼容的bug:<br>idea version：2019.1.1<br>maven version：3.6.3<br>问题描述：pom文件导入依赖包时报错<code>No implementation for org.apache.maven.model.path.PathTranslator was bound</code><br>解决办法：升级idea版本或者降低maven版本。</p><h4 id="6-idea使用git"><a href="#6-idea使用git" class="headerlink" title="6. idea使用git"></a>6. idea使用git</h4><p>从github仓库中下载项目到本地：</p><ul><li>settings -&gt; 配置git.exe</li><li>首页选择check out from version control，登录github，输入账号密码，就可以选择要下载的仓库了</li></ul><p>本地项目更新到gitbub仓库中：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-jdk安装&quot;&gt;&lt;a href=&quot;#1-jdk安装&quot; class=&quot;headerlink&quot; title=&quot;1. jdk安装&quot;&gt;&lt;/a&gt;1. jdk安装&lt;/h4&gt;&lt;p&gt;网上下载jdk，运行安装程序&lt;/p&gt;
&lt;p&gt;配置环境变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统变量-</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/idea%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/idea%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<p>说是心得，其实就是一些常用到，但是容易忘记，或者有一些坑的地方的记录</p><ol><li>全局替换查找<br>ctrl + shift + r: 在路径中替换，指的是在选定的目录下或者类包下，查找要被替换的字符，再在第二个输入框中输入要替换的字符，点击弹出框的右下角的replace或者replaceall即可。</li><li>大小写转换 有时候需要把一大串小写的字符串常转化为大写的，或者大写的切换为小写的。idea中选中内容后，快捷键 Ctrl+Shift+u即可实现大小写的快速切换，或者 Edit -&gt; Toggle Case.</li><li>快速生成测试类 <code>Ctrl+Shift+t</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;说是心得，其实就是一些常用到，但是容易忘记，或者有一些坑的地方的记录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局替换查找&lt;br&gt;ctrl + shift + r: 在路径中替换，指的是在选定的目录下或者类包下，查找要被替换的字符，再在第二个输入框中输入要替换的字符，点击弹出框的右下角的</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/lombok/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/lombok/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lombok简介"><a href="#lombok简介" class="headerlink" title="lombok简介"></a>lombok简介</h3><p>Lombok 是能自动接通编辑器和构建工具的一个Java库，对于简单的Java对象，通过注解的形式例如@Setter @Getter，可以替代代码中的getter和setter方法。Lombok中用到了注解，但是它并没有用到反射，而是在代码编译时期动态将注解替换为具体的代码。所以JVM实际运行的代码，和我们手动编写的包含了各种工具方法的类相同。</p><h4 id="lombok常用注解"><a href="#lombok常用注解" class="headerlink" title="lombok常用注解"></a>lombok常用注解</h4><ul><li>@Data：注解在类上，将类提供的所有属性都添加get、set方法，并添加、equals、canEquals、hashCode、toString方法</li><li>@Setter：注解在类上，为所有属性添加set方法、注解在属性上为该属性提供set方法</li><li>@Getter：注解在类上，为所有的属性添加get方法、注解在属性上为该属性提供get方法</li><li>@NotNull：在参数中使用时，如果调用时传了null值，就会抛出空指针异常</li><li>@NoArgsConstructor：创建一个无参构造函数</li><li>@toString：创建toString方法。</li><li>@UtilityClass:工具类</li></ul><h4 id="idea项目中使用lombok"><a href="#idea项目中使用lombok" class="headerlink" title="idea项目中使用lombok"></a>idea项目中使用lombok</h4><p>第一步： pom.xml中加入lombok依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.16.20&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure><p>第二步：加入lombok插件<br>File —&gt; Settings —&gt; Plugins：搜索lombok，点击安装install。然后会提示重启，重启。</p><p>第三步：idea配置<br>File —&gt; Settings —&gt; Build, Execution, Deployment —&gt; Compiler —&gt; Java Compiler —&gt; User compiler：选择javac<br>File —&gt; Settings —&gt; Build, Execution, Deployment —&gt; Compiler —&gt; Annotation Processors -&gt; Enable annotation processors -&gt; 勾选</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>1、使用 lombok.Data 注解实体类时，boolean类型的get方法，会变成is方法；若需要get方法，使用封装类Boolean。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;lombok简介&quot;&gt;&lt;a href=&quot;#lombok简介&quot; class=&quot;headerlink&quot; title=&quot;lombok简介&quot;&gt;&lt;/a&gt;lombok简介&lt;/h3&gt;&lt;p&gt;Lombok 是能自动接通编辑器和构建工具的一个Java库，对于简单的Java对象，通过注解</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/null==obj%20or%20obj==null%20%EF%BC%9F/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/null==obj%20or%20obj==null%20%EF%BC%9F/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<p>在比较操作中，有人提倡常量前置的写法，但是读起来就会怪怪的。</p><p>据说在 c++ 中，<code>if(obj = null)</code>是可以通过编译的，但是在运行时会报错，为了防止这种情况发生，所以提倡常量前置的写法。</p><p>但是在 Java 中 <code>if(obj = null)</code>是在编译时会报错的，所以不存在这一隐患。时候判断常量前置真的没有必要了呢？其实有两面性，有好有坏，具体要看个人和规范的要求。</p><h4 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h4><ol><li>可以避免<code>if(obj = null)</code>类似错误</li><li>类似<code>&quot;str&quot;.equals(obj)</code>的写法可以避免空指针错误</li></ol><h4 id="坏处："><a href="#坏处：" class="headerlink" title="坏处："></a>坏处：</h4><ol><li>影响代码可读性</li><li>使得代码存在隐患。出现了预料之外的空指针，应该积极去处理，而不是掩盖</li></ol><h4 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h4><p>Boolean 类情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Boolean obj = Boolean.FALSE;</span><br><span class="line">        if(null = obj)&#123;     // 编译器报错</span><br><span class="line">            //...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Boolean obj = Boolean.FALSE;</span><br><span class="line">        if(obj = null)&#123;     // 编译器不报错，运行时报错</span><br><span class="line">            //...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算是 Java 中的特例，值得注意</p><p>反正我是喜欢常量前置的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在比较操作中，有人提倡常量前置的写法，但是读起来就会怪怪的。&lt;/p&gt;
&lt;p&gt;据说在 c++ 中，&lt;code&gt;if(obj = null)&lt;/code&gt;是可以通过编译的，但是在运行时会报错，为了防止这种情况发生，所以提倡常量前置的写法。&lt;/p&gt;
&lt;p&gt;但是在 Java 中 &lt;</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/skywalking%20Jdbc%E6%8F%92%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/skywalking%20Jdbc%E6%8F%92%E4%BB%B6%E5%88%86%E6%9E%90/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql-8-x-plugin"><a href="#mysql-8-x-plugin" class="headerlink" title="mysql-8.x-plugin"></a>mysql-8.x-plugin</h2><table>   <tr>      <td>拦截形式</td>      <td>增强的类</td>      <td>增强方法</td>      <td>类型</td>      <td>方法说明</td>      <td>拦截器</td>      <td>执行前</td>      <td>执行后</td>      <td>报错</td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.CallableInstrumentation</td>      <td>com.mysql.cj.jdbc.CallableStatement</td>      <td>execute、executeQuery、executeUpdate</td>      <td>实例方法</td>      <td>调用存储过程类增强，拦截存储过程的执行方法</td>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.PreparedStatementExecuteMethodsInterceptor</td>      <td>创建ExitSpan，追踪本次数据库调用</td>      <td>ContextManager.stopSpan()，结束追踪</td>      <td>ContextManager.activeSpan().errorOccurred().log(t)，记录异常堆栈</td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.ConnectionImplCreateInstrumentation</td>      <td>com.mysql.cj.jdbc.ConnectionImpl</td>      <td>getInstance</td>      <td>静态方法</td>      <td>拦截获取数据库连接方法</td>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.ConnectionCreateInterceptor</td>      <td></td>      <td>记录数据库连接信息connectionInfo (dbType,dbName,dbPeer...)</td>      <td></td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.ConnectionInstrumentation</td>      <td>com.mysql.cj.jdbc.ConnectionImpl</td>      <td>prepareStatement</td>      <td>实例方法</td>      <td>创建一个PreparedStatement对象，该对象用于预编译和发送sql,获得执行结果</td>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.CreatePreparedStatementInterceptor</td>      <td></td>      <td>记录statement信息StatementEnhanceInfos（connectionInfo,statementName,sql...）</td>      <td></td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.ConnectionInstrumentation</td>      <td>com.mysql.cj.jdbc.ConnectionImpl</td>      <td>prepareCall</td>      <td>实例方法</td>      <td>创建一个CallableStatement。此对象用于调用数据库存储过程</td>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.CreateCallableStatementInterceptor</td>      <td></td>      <td>记录statement信息StatementEnhanceInfos（connectionInfo,statementName,sql...）</td>      <td></td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.ConnectionInstrumentation</td>      <td>com.mysql.cj.jdbc.ConnectionImpl</td>      <td>createStatement,参数数量为2</td>      <td>实例方法</td>      <td>创建一个Statement对象，Statement用于发送sql语句到数据库和获得返回结果</td>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.CreateStatementInterceptor</td>      <td></td>      <td>记录statement信息StatementEnhanceInfos（connectionInfo,statementName...）</td>      <td></td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.ConnectionInstrumentation</td>      <td>com.mysql.cj.jdbc.ConnectionImpl</td>      <td>commit、rollback、close、releaseSavepoint</td>      <td>实例方法</td>      <td>事务相关操作</td>      <td>org.apache.skywalking.apm.plugin.jdbc.ConnectionServiceMethodInterceptor</td>      <td>创建ExitSpan，追踪本次数据库调用</td>      <td>ContextManager.stopSpan()，结束追踪</td>      <td>ContextManager.activeSpan().errorOccurred().log(t)，记录异常堆栈</td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.ConnectionInstrumentation</td>      <td>com.mysql.cj.jdbc.ConnectionImpl</td>      <td>setCatalog</td>      <td>实例方法</td>      <td>设置给定目录名称，以便选择要在其中进行工作的此 Connection 对象数据库的子空间</td>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.SetCatalogInterceptor</td>      <td>获取connectionInfo，调用setDatabaseName(),记录目录名称catalog</td>      <td></td>      <td></td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.PreparedStatementInstrumentation</td>      <td>com.mysql.cj.jdbc.ClientPreparedStatement、com.mysql.cj.jdbc.ServerPreparedStatement</td>      <td>execute、executeQuery、executeUpdate、executeLargeUpdate</td>      <td>实例方法</td>      <td>ClientPreparedStatement是PreparedStatement接口的实现类，StatementImpl的子类；ServerPreparedStatement是ClientPreparedStatement的子类，预编译和发送sql的类</td>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.PreparedStatementExecuteMethodsInterceptor</td>      <td>创建ExitSpan，追踪本次数据库调用</td>      <td>ContextManager.stopSpan()，结束追踪</td>      <td>ContextManager.activeSpan().errorOccurred().log(t)，记录异常堆栈</td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.PreparedStatementIgnoredSetterInstrumentation</td>      <td>com.mysql.cj.jdbc.ClientPreparedStatement、com.mysql.cj.jdbc.ServerPreparedStatement</td>      <td>setAsciiStream, setBinaryStream, setBlob, setBytes, setCharacterStream, setClob, setNCharacterStream, setNClob, setRef, setSQLXML, setUnicodeStream</td>      <td>实例方法</td>      <td>参数绑定（长文本）</td>      <td>org.apache.skywalking.apm.plugin.jdbc.JDBCPreparedStatementIgnorableSetterInterceptor</td>      <td>statementEnhanceInfos.setParameter(index, "?")，记录参数信息，避免数据太大，用”?“代替</td>      <td></td>      <td></td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.PreparedStatementNullSetterInstrumentation</td>      <td>com.mysql.cj.jdbc.ClientPreparedStatement、com.mysql.cj.jdbc.ServerPreparedStatement</td>      <td>setNull</td>      <td>实例方法</td>      <td>参数绑定（null）</td>      <td>org.apache.skywalking.apm.plugin.jdbc.JDBCPreparedStatementNullSetterInterceptor</td>      <td>statementEnhanceInfos.setParameter(index, "NULL")，记录参数信息</td>      <td></td>      <td></td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.PreparedStatementSetterInstrumentation</td>      <td>com.mysql.cj.jdbc.ClientPreparedStatement、com.mysql.cj.jdbc.ServerPreparedStatement</td>      <td>setArray, setBigDecimal, setBoolean, setByte, setDate, setDouble, setFloat, setInt, setLong, setNString, setObject, setRowId, setShort, setString, setTime, setTimestamp, setURL</td>      <td>实例方法</td>      <td>参数绑定</td>      <td>org.apache.skywalking.apm.plugin.jdbc.JDBCPreparedStatementSetterInterceptor</td>      <td>statementEnhanceInfos.setParameter(index, parameter)，记录参数信息</td>      <td></td>      <td></td>   </tr>   <tr>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.v8.define.StatementInstrumentation</td>      <td>com.mysql.cj.jdbc.StatementImpl</td>      <td>execute、executeQuery、executeUpdate、executeLargeUpdate、executeBatchInternal、executeUpdateInternal、executeQuery、executeBatch</td>      <td>实例方法</td>      <td>StatementImpl是Statement接口的实现类，用于发送sql命令，获得查询结果。</td>      <td>org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor</td>      <td>创建ExitSpan，追踪本次数据库调用</td>      <td>ContextManager.stopSpan()，结束追踪</td>      <td>ContextManager.activeSpan().errorOccurred().log(t)，记录异常堆栈</td>   </tr>   <tr>      <td></td>   </tr></table><h2 id="postgresql-8-x-plugin"><a href="#postgresql-8-x-plugin" class="headerlink" title="postgresql-8.x-plugin"></a>postgresql-8.x-plugin</h2><table>   <tr>      <td>拦截形式</td>      <td>增强的类</td>      <td>增强方法</td>      <td>类型</td>      <td>方法说明</td>      <td>拦截器</td>      <td>执行前</td>      <td>执行后</td>      <td>报错</td>   </tr>   <tr>      <td>AbstractJdbc2StatementInstrumentation</td>      <td>org.postgresql.jdbc2.AbstractJdbc2Statement（发行版中该类已废弃）</td>      <td>无参的execute，executeQuery，executeUpdate</td>      <td>实例方法</td>      <td>sql语句执行方法</td>      <td>org.apache.skywalking.apm.plugin.jdbc.postgresql.PreparedStatementExecuteMethodsInterceptor</td>      <td>创建ExitSpan，追踪本次数据库调用</td>      <td>结束追踪</td>      <td>记录错误堆栈</td>   </tr>   <tr>      <td></td>      <td></td>      <td>入参数目为1的execute，executeQuery，executeUpdate</td>      <td>实例方法</td>      <td>sql语句执行方法</td>      <td>org.apache.skywalking.apm.plugin.jdbc.postgresql.StatementExecuteMethodsInterceptor</td>      <td>同上</td>      <td>同上</td>      <td>同上</td>   </tr>   <tr>      <td>ConnectionInstrumentation</td>      <td>"org.postgresql.jdbc.PgConnection，</td>   </tr>   <tr>      <td>org.postgresql.jdbc42.Jdbc42Connection（已废弃），</td>   </tr>   <tr>      <td>org.postgresql.jdbc3g.Jdbc3gConnection（已废弃），</td>   </tr>   <tr>      <td>org.postgresql.jdbc4.Jdbc4Connection（已废弃）</td>   </tr>   <tr>      <td></td>   </tr>   <tr>      <td>"</td>      <td>入参数目为4的prepareStatement</td>      <td>实例方法</td>      <td>创建一个PgPreparedStatement对象，该对象用于预编译和发送sql,获得执行结果</td>      <td>org.apache.skywalking.apm.plugin.jdbc.postgresql.CreatePreparedStatementInterceptor</td>      <td></td>      <td>记录statement信息StatementEnhanceInfos（connectionInfo,statementName,sql...）</td>      <td></td>   </tr>   <tr>      <td></td>      <td></td>      <td>第二个参数类型为String[]的prepareStatement</td>      <td>实例方法</td>      <td>同上</td>      <td>org.apache.skywalking.apm.plugin.jdbc.postgresql.JDBCPrepareStatementWithStringArrayInterceptor</td>      <td></td>      <td>记录statement信息StatementEnhanceInfos（connectionInfo,statementName,sql...）</td>      <td></td>   </tr>   <tr>      <td></td>      <td></td>      <td>入参数目为4的prepareCall</td>      <td>实例方法</td>      <td>创建一个CPgCallableStatement。此对象用于调用数据库存储过程</td>      <td>org.apache.skywalking.apm.plugin.jdbc.postgresql.CreateCallableStatementInterceptor</td>      <td></td>      <td>创建PreparedStatement的代理SWPreparedStatement，记录（connectionInfo,statementName,sql...）</td>      <td></td>   </tr>   <tr>      <td></td>      <td></td>      <td>入参数目为3的createStatement</td>      <td>实例方法</td>      <td>创建一个PgStatement，该对象用于预编译和发送sql,获得执行结果</td>      <td>org.apache.skywalking.apm.plugin.jdbc.postgresql.CreateStatementInterceptor</td>      <td></td>      <td>记录statement信息StatementEnhanceInfos（connectionInfo,statementName,sql...）</td>      <td></td>   </tr>   <tr>      <td></td>      <td></td>      <td>commit,rollback,close,releaseSavepoint</td>      <td>实例方法</td>      <td>数据库事务相关方法</td>      <td>org.apache.skywalking.apm.plugin.jdbc.ConnectionServiceMethodInterceptor</td>      <td>创建ExitSpan，追踪本次数据库调用</td>      <td>结束追踪</td>      <td>记录错误堆栈</td>   </tr>   <tr>      <td>Jdbc3ConnectionInstrumentation</td>      <td>org.postgresql.jdbc3.Jdbc3Connection（已废弃）</td>      <td>同ConnectionInstrumentation,应该是重复的</td>      <td>实例方法</td>      <td></td>      <td></td>      <td></td>      <td></td>      <td></td>   </tr>   <tr>      <td>Jdbc4ConnectionInstrumentation</td>      <td>org.postgresql.jdbc4.Jdbc4Connection（已废弃）</td>      <td>同上</td>      <td>实例方法</td>      <td></td>      <td></td>      <td></td>      <td></td>      <td></td>   </tr>   <tr>      <td>PgCallableStatementInstrumentation</td>      <td>org.postgresql.jdbc.PgCallableStatement</td>      <td>"第一个参数为int的executeWithFlags，</td>   </tr>   <tr>      <td>executeUpdate"</td>      <td>实例方法</td>      <td>执行sql方法</td>      <td>org.apache.skywalking.apm.plugin.jdbc.postgresql.PreparedStatementExecuteMethodsInterceptor</td>      <td>创建ExitSpan，追踪本次数据库调用</td>      <td>结束追踪</td>      <td>记录错误堆栈</td>   </tr>   <tr>      <td>PgPreparedStatementInstrumentation</td>      <td>org.postgresql.jdbc.PgPreparedStatement</td>      <td>"第一个参数为string的execute，</td>   </tr>   <tr>      <td>第一个参数为int的executeWithFlags,</td>   </tr>   <tr>      <td>executeQuery,</td>   </tr>   <tr>      <td>executeUpdate</td>   </tr>   <tr>      <td>"</td>      <td>实例方法</td>      <td>执行sql方法</td>      <td>同上</td>      <td>创建ExitSpan，追踪本次数据库调用</td>      <td>结束追踪</td>      <td>记录错误堆栈</td>   </tr>   <tr>      <td>PgPreparedStatementSetterInstrumentation</td>      <td>org.postgresql.jdbc.PgPreparedStatement</td>      <td>setAsciiStream, setBinaryStream, setBlob, setBytes, setCharacterStream, setClob, setNCharacterStream, setNClob, setRef, setSQLXML, setUnicodeStream</td>      <td>实例方法</td>      <td>参数绑定（长文本）</td>      <td>org.apache.skywalking.apm.plugin.jdbc.JDBCPreparedStatementIgnorableSetterInterceptor</td>      <td>statementEnhanceInfos.setParameter(index, "?")，记录参数信息，避免数据太大，用”?“代替</td>      <td></td>      <td></td>   </tr>   <tr>      <td>PgStatementInstrumentation</td>      <td>org.postgresql.jdbc.PgStatement</td>      <td>"第一个参数为stirng或string[]的execute，</td>   </tr>   <tr>      <td>executeQuery，</td>   </tr>   <tr>      <td>第一个参数为stirng或string[]的executeUpdate，</td>   </tr>   <tr>      <td>executeLargeUpdate，"</td>      <td>实例方法</td>      <td>执行sql方法</td>      <td>org.apache.skywalking.apm.plugin.jdbc.postgresql.StatementExecuteMethodsInterceptor</td>      <td>创建ExitSpan，追踪本次数据库调用</td>      <td>结束追踪</td>      <td>记录错误堆栈</td>   </tr>   <tr>      <td></td>   </tr></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mysql-8-x-plugin&quot;&gt;&lt;a href=&quot;#mysql-8-x-plugin&quot; class=&quot;headerlink&quot; title=&quot;mysql-8.x-plugin&quot;&gt;&lt;/a&gt;mysql-8.x-plugin&lt;/h2&gt;&lt;table&gt;
   &lt;tr&gt;
 </summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/spring%20boot%20+%20jasypt%E5%AE%9E%E7%8E%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%E5%8A%A0%E5%AF%86/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/spring%20boot%20+%20jasypt%E5%AE%9E%E7%8E%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%E5%8A%A0%E5%AF%86/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<p>配置文件敏感信息的加密，对于生产环境来说还是很有必要的。之前自己实现了一个粗糙的配置文件加密方案，详见<a href="https://note.youdao.com/ynoteshare1/index.html?id=0d316c739a394177dd492a8ff4710257&type=note">spring boot中代码修改配置文件</a>。后面有老师傅提出了有更成熟通过的方案，jasypt，本次就来使用它。</p><p>1、添加Maven依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>最新版本是2.1.1，但是只能spring-boot-2.x以上使用。因为我的程序中使用的是spring-boot-1.5.3,所以选择1.8版本。</p><p>2、编写加密脚本</p><p>下载jasypt-1.9.2.jar，添加依赖后，也可以从本地仓库中获取，如：LocalRepository\org\jasypt\jasypt\1.9.2</p><p>Windows脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0</span><br><span class="line">cd ..</span><br><span class="line">set /p user=请输入要加密的账户名称: </span><br><span class="line">java -cp lib/jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=%user% password=apusic.net algorithm=PBEWithMD5AndDES</span><br><span class="line">set /p password=请输入要加密的密码: </span><br><span class="line">java -cp lib/jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=%password% password=apusic.net algorithm=PBEWithMD5AndDES</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>Linux脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">BASE_DIR=$(cd `dirname $0`; pwd)/..</span><br><span class="line">cd $BASE_DIR</span><br><span class="line"></span><br><span class="line">read -p &quot;输入要加密的账户名称：&quot; user</span><br><span class="line">java -cp $BASE_DIR/lib/jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=$user password=apsuic.net algorithm=PBEWithMD5AndDES</span><br><span class="line"></span><br><span class="line">read -p &quot;输入要加密的账号密码：&quot; password</span><br><span class="line">java -cp $BASE_DIR/lib/jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=$password password=apsuic.net algorithm=PBEWithMD5AndDES</span><br></pre></td></tr></table></figure><p>运行脚本，根据提示输入账号密码后可以获得加密串</p><p>3、使用加密字符串</p><p>程序入口（main）添加注解：@EnableConfigurationProperties</p><p>配置文件中如下格式填写加密串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client.user=ENC(40+Fa4B+kj2wbOQHa+JuWQ==)</span><br><span class="line">client.password=ENC(qX2Its/37OKPVUgxM38I7qgEhitVnuPV)</span><br></pre></td></tr></table></figure><p>加密串用ENC()标注</p><p>填写加密key,即jasypt.encryptor.password，可以在注入到程序运行时变量中，也可以写在配置文件中，不推荐。</p><p>运行时变量方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar lib/exporter-aas-v9-0.0.1-SNAPSHOT.jar --spring.config.location=conf/application.properties --jasypt.encryptor.password=apusic.net</span><br></pre></td></tr></table></figure><p>配置文件方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asypt.encryptor.password=apusic.net</span><br></pre></td></tr></table></figure><p>这样在程序运行时候jasypt就会先解析加密串，程序获取到的是解析后的账号密码。</p><p>完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;配置文件敏感信息的加密，对于生产环境来说还是很有必要的。之前自己实现了一个粗糙的配置文件加密方案，详见&lt;a href=&quot;https://note.youdao.com/ynoteshare1/index.html?id=0d316c739a394177dd492a8ff47</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/spring%20boot%E4%BD%BF%E7%94%A8%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%97%9B/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/spring%20boot%E4%BD%BF%E7%94%A8%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%97%9B/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式好处多多，是工具类中经常使用的设计模式，但是笔者在spring boot中使用单例模式中，尝到了许多痛苦的滋味。。。</p><p>Spring注解给开发带来了很多便利，要使用到这种便利，就需要使用spring的IOC注入，即类的创建需要交由spring来管理。如@Autowired，一个类如果在使用@Autowired注入了另一个类，但是当这个类被new时，@Autowired注入将会失效，出现NPE报错。</p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class A&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class B&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    A a;</span><br><span class="line">    </span><br><span class="line">    private static volatile B instance;</span><br><span class="line">    private B();</span><br><span class="line">    public static B getInstance()&#123;</span><br><span class="line">        if(null == instance)&#123;</span><br><span class="line">             synchronized (B.class) &#123;</span><br><span class="line">                 instance = new B(); //B的@Autowired不生效，b.a==null</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些spring辅助类是必须要交由spring注入的，比如Environment，单例模式就很不方便了。</p><p>当然，办法也是有的，可以使用<code>ApplicationContext</code>来注入Bean：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class SpringUtil implements ApplicationContextAware &#123;</span><br><span class="line">    private static ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        SpringUtil.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //beanName是类名，第一个字母小写</span><br><span class="line">    public static &lt;T&gt; T getBean(String beanName) &#123;</span><br><span class="line">        if(applicationContext.containsBean(beanName))&#123;</span><br><span class="line">            return (T) applicationContext.getBean(beanName);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; Map&lt;String, T&gt; getBeansOfType(Class&lt;T&gt; baseType)&#123;</span><br><span class="line">        return applicationContext.getBeansOfType(baseType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要使用某一个类的时候<code>SpringUtil.getBean(beanName)</code>就可以的，坏处也是有的，无法使用全局变量，每个方法使用这个类时都需要注入一次。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;单例模式好处多多，是工具类中经常使用的设计模式，但是笔者在spring boot中使用单例模式中，尝到了许多痛苦的滋味。。。&lt;/p&gt;
&lt;p&gt;Spring注解给开发带来了很多便利，要使用到这种便利，就需要使用spring的IOC注入，即类的创建需要交由spring来管理。如@</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/spring%20boot%E4%B8%AD%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/spring%20boot%E4%B8%AD%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<p>配置文件中有用户的账号密码等信息，需要为用户保护信息。</p><p>怎么做呢？暂时没有想到很好的办法，现在设想是用户第一次使用程序时候，配置文件中明文填写账号密码等信息。启用程序连接成功后加密账号密码，输出加密字符串到配置文件中，以后使用密文进行连接。其实这也只是表面功夫，因为实际的连接需要用到明文的账号密码，必须使用对称加密还原账号密码，加密key是写在程序中的，解包后就能获取到。但是怎么说呢，世界上没有攻破不了的防御，只是这个成本问题而已，增加信息被泄漏成本，加密的本质而已。</p><p>废话不多说，开始实现：</p><ol><li>网上找到加密工具类EncryptUtil，这个加密工具类的好处是不用第三方jar包，简单方便，功能全面：</li><li></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用账号密码长度判断是否已经加密，当然也可以加密后向配置文件中加入额外加密标识</span></span><br><span class="line"><span class="keyword">if</span>(clientConfig.getUser().length() &gt; <span class="number">30</span> &amp;&amp; clientConfig.getPassword().length() &gt; <span class="number">30</span>)&#123;</span><br><span class="line">                    <span class="comment">//尝试使用解码后的账号密码进行连接</span></span><br><span class="line">                    user.put(JMXConnector.CREDENTIALS, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;encryptUtil.AESdecode(clientConfig.getUser(), ENCRYPT_AES_KEY), encryptUtil.AESdecode(clientConfig.getPassword(), ENCRYPT_AES_KEY) &#125;);</span><br><span class="line">                    jmxc = JMXConnectorFactory.connect(url,user);</span><br><span class="line">                    mbsc = jmxc.getMBeanServerConnection();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//尝试直接使用配置文件账号密码信息连接</span></span><br><span class="line">                    user.put(JMXConnector.CREDENTIALS, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; clientConfig.getUser(), clientConfig.getPassword() &#125;);</span><br><span class="line">                    jmxc = JMXConnectorFactory.connect(url,user);</span><br><span class="line">                    mbsc = jmxc.getMBeanServerConnection();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 若是能够连接成功，加密账号密码，输出到配置文件中</span></span><br><span class="line">                        <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> SpringUtil.getBean(<span class="string">&quot;environment&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">profilepath</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;application.file.path&quot;</span>);</span><br><span class="line">                        <span class="type">LinkedProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedProperties</span>();</span><br><span class="line">                        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(profilepath);</span><br><span class="line">                        properties.load(fileReader);</span><br><span class="line">                        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(profilepath);</span><br><span class="line"></span><br><span class="line">                        properties.setProperty(<span class="string">&quot;client.user&quot;</span>, encryptUtil.AESencode(clientConfig.getUser(), ENCRYPT_AES_KEY));</span><br><span class="line">                        properties.setProperty(<span class="string">&quot;client.password&quot;</span>, encryptUtil.AESencode(clientConfig.getPassword(), ENCRYPT_AES_KEY));</span><br><span class="line">                        properties.store(fileWriter, <span class="string">&quot;account and password is encrypted&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        fileReader.close();</span><br><span class="line">                        fileWriter.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException var2) &#123;</span><br><span class="line">                        var2.printStackTrace();</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>这里我使用了自定义的 LinkedProperties ，如果使用Properties读写配置文件的话会乱序。查看Properties源码，可以看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Properties</span> <span class="keyword">extends</span> <span class="title class_">Hashtable</span>&lt;Object,Object&gt; &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Properties其实是一个Hashtable，所以里面的键值对会乱序。要想实现顺序也比较简单，写入我们额外使用一个LinkHashMap来保存键值对，写出时使用LinkHashMap里的数据写出即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedProperties</span> <span class="keyword">extends</span> <span class="title class_">Properties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; linkedPropertiesMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getLinkedPropertiesMap</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedPropertiesMap;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(Reader reader)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        linkedPropertiesMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title function_">setProperty</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        linkedPropertiesMap.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">store</span><span class="params">(Writer writer, String comments)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry : linkedPropertiesMap.entrySet())&#123;&#125;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EncryptUtil工具类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Mac;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncryptUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MD5</span> <span class="operator">=</span> <span class="string">&quot;MD5&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHA1</span> <span class="operator">=</span> <span class="string">&quot;SHA1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HmacMD5</span> <span class="operator">=</span> <span class="string">&quot;HmacMD5&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HmacSHA1</span> <span class="operator">=</span> <span class="string">&quot;HmacSHA1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DES</span> <span class="operator">=</span> <span class="string">&quot;DES&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AES</span> <span class="operator">=</span> <span class="string">&quot;AES&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**编码格式；默认使用uft-8*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">charset</span> <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line">    <span class="comment">/**DES*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">keysizeDES</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**AES*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">keysizeAES</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EncryptUtil me;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EncryptUtil</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//单例</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//双重锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EncryptUtil <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (me==<span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (EncryptUtil.class) &#123;</span><br><span class="line">               <span class="keyword">if</span>(me == <span class="literal">null</span>)&#123;</span><br><span class="line">                   me = <span class="keyword">new</span> <span class="title class_">EncryptUtil</span>();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> me;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用MessageDigest进行单向加密（无密码）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 被加密的文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> algorithm 加密算法名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">messageDigest</span><span class="params">(String res,String algorithm)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(algorithm);</span><br><span class="line">            <span class="type">byte</span>[] resBytes = charset==<span class="literal">null</span>?res.getBytes():res.getBytes(charset);</span><br><span class="line">            <span class="keyword">return</span> base64(md.digest(resBytes));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用KeyGenerator进行单向/双向加密（可设密码）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 被加密的原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> algorithm  加密使用的算法名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 加密使用的秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">keyGeneratorMac</span><span class="params">(String res,String algorithm,String key)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">sk</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (key==<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">KeyGenerator</span> <span class="variable">kg</span> <span class="operator">=</span> KeyGenerator.getInstance(algorithm);</span><br><span class="line">                sk = kg.generateKey();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] keyBytes = charset==<span class="literal">null</span>?key.getBytes():key.getBytes(charset);</span><br><span class="line">                sk = <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(keyBytes, algorithm);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Mac</span> <span class="variable">mac</span> <span class="operator">=</span> Mac.getInstance(algorithm);</span><br><span class="line">            mac.init(sk);</span><br><span class="line">            <span class="type">byte</span>[] result = mac.doFinal(res.getBytes());</span><br><span class="line">            <span class="keyword">return</span> base64(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用KeyGenerator双向加密，DES/AES，注意这里转化为字符串的时候是将2进制转为16进制格式的字符串，不是直接转，因为会出错</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 加密的原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> algorithm 加密使用的算法名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  加密的秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keysize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isEncode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">keyGeneratorES</span><span class="params">(String res,String algorithm,String key,<span class="type">int</span> keysize,<span class="type">boolean</span> isEncode)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">KeyGenerator</span> <span class="variable">kg</span> <span class="operator">=</span> KeyGenerator.getInstance(algorithm);</span><br><span class="line">            <span class="keyword">if</span> (keysize == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">byte</span>[] keyBytes = charset==<span class="literal">null</span>?key.getBytes():key.getBytes(charset);</span><br><span class="line">                kg.init(<span class="keyword">new</span> <span class="title class_">SecureRandom</span>(keyBytes));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (key==<span class="literal">null</span>) &#123;</span><br><span class="line">                kg.init(keysize);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] keyBytes = charset==<span class="literal">null</span>?key.getBytes():key.getBytes(charset);</span><br><span class="line">                kg.init(keysize, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>(keyBytes));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">sk</span> <span class="operator">=</span> kg.generateKey();</span><br><span class="line">            <span class="type">SecretKeySpec</span> <span class="variable">sks</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(sk.getEncoded(), algorithm);</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(algorithm);</span><br><span class="line">            <span class="keyword">if</span> (isEncode) &#123;</span><br><span class="line">                cipher.init(Cipher.ENCRYPT_MODE, sks);</span><br><span class="line">                <span class="type">byte</span>[] resBytes = charset==<span class="literal">null</span>?res.getBytes():res.getBytes(charset);</span><br><span class="line">                <span class="keyword">return</span> parseByte2HexStr(cipher.doFinal(resBytes));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                cipher.init(Cipher.DECRYPT_MODE, sks);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(cipher.doFinal(parseHexStr2Byte(res)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">base64</span><span class="params">(<span class="type">byte</span>[] res)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64.encode(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**将二进制转换成16进制 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">parseByte2HexStr</span><span class="params">(<span class="type">byte</span> buf[])</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buf.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(buf[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hex = <span class="string">&#x27;0&#x27;</span> + hex;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(hex.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**将16进制转换为二进制*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] parseHexStr2Byte(String hexStr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hexStr.length() &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">byte</span>[hexStr.length()/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; hexStr.length()/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> Integer.parseInt(hexStr.substring(i*<span class="number">2</span>, i*<span class="number">2</span>+<span class="number">1</span>), <span class="number">16</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> Integer.parseInt(hexStr.substring(i*<span class="number">2</span>+<span class="number">1</span>, i*<span class="number">2</span>+<span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line">            result[i] = (<span class="type">byte</span>) (high * <span class="number">16</span> + low);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * md5加密算法进行加密（不可逆）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 需要加密的原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">MD5</span><span class="params">(String res)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageDigest(res, MD5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * md5加密算法进行加密（不可逆）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res  需要加密的原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">MD5</span><span class="params">(String res, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyGeneratorMac(res, HmacMD5, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用SHA1加密算法进行加密（不可逆）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 需要加密的原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">SHA1</span><span class="params">(String res)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageDigest(res, SHA1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用SHA1加密算法进行加密（不可逆）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 需要加密的原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">SHA1</span><span class="params">(String res, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyGeneratorMac(res, HmacSHA1, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用DES加密算法进行加密（可逆）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 需要加密的原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">DESencode</span><span class="params">(String res, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyGeneratorES(res, DES, key, keysizeDES, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对使用DES加密算法的密文进行解密（可逆）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 需要解密的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">DESdecode</span><span class="params">(String res, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyGeneratorES(res, DES, key, keysizeDES, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用AES加密算法经行加密（可逆）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 需要加密的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AESencode</span><span class="params">(String res, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyGeneratorES(res, AES, key, keysizeAES, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对使用AES加密算法的密文进行解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 需要解密的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AESdecode</span><span class="params">(String res, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyGeneratorES(res, AES, key, keysizeAES, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用异或进行加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 需要加密的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">XORencode</span><span class="params">(String res, String key)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bs = res.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bs.length; i++) &#123;</span><br><span class="line">            bs[i] = (<span class="type">byte</span>) ((bs[i]) ^ key.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseByte2HexStr(bs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用异或进行解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 需要解密的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">XORdecode</span><span class="params">(String res, String key)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bs = parseHexStr2Byte(res);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bs.length; i++) &#123;</span><br><span class="line">            bs[i] = (<span class="type">byte</span>) ((bs[i]) ^ key.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(bs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接使用异或（第一调用加密，第二次调用解密）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">XOR</span><span class="params">(<span class="type">int</span> res, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res ^ key.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Base64进行加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Base64Encode</span><span class="params">(String res)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Base64.encode(res.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Base64进行解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Base64Decode</span><span class="params">(String res)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.decode(res));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;配置文件中有用户的账号密码等信息，需要为用户保护信息。&lt;/p&gt;
&lt;p&gt;怎么做呢？暂时没有想到很好的办法，现在设想是用户第一次使用程序时候，配置文件中明文填写账号密码等信息。启用程序连接成功后加密账号密码，输出加密字符串到配置文件中，以后使用密文进行连接。其实这也只是表面功夫</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/spring%20boot%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/spring%20boot%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<p>业务场景：查询数据分页，每条数据需要添加上概览信息，获取概览信息需要调用一些http接口，有一定的等待时间，单线程查询效率较慢。现在需要在查出了数据库持久化数据的基础上，使用多线程给数据添加概览信息，而且在所有异步线程都完成后，再返回分页信息给前端。</p><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>应用主程序添加注解 @EnableAsync 来开启 Springboot 对于异步任务的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>配置类实现接口 AsyncConfigurator，返回一个 ThreadPoolTaskExecutor 线程池对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncTaskConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ThredPoolTaskExcutor的处理流程</span></span><br><span class="line">    <span class="comment">// 当池子大小小于corePoolSize，就新建线程，并处理请求</span></span><br><span class="line">    <span class="comment">// 当池子大小等于corePoolSize，把请求放入workQueue中，池子里的空闲线程就去workQueue中取任务并处理</span></span><br><span class="line">    <span class="comment">// 当workQueue放不下任务时，就新建线程入池，并处理请求，如果池子大小撑到了maximumPoolSize，就用RejectedExecutionHandler来做拒绝处理</span></span><br><span class="line">    <span class="comment">// 当池子的线程数大于corePoolSize时，多余的线程会等待keepAliveTime长时间，如果无请求可处理就自行销毁</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//设置核心线程数</span></span><br><span class="line">        threadPool.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//设置最大线程数</span></span><br><span class="line">        threadPool.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//线程池所使用的缓冲队列</span></span><br><span class="line">        threadPool.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 等待时间 （默认为0，此时立即停止），并没等待xx秒后强制停止</span></span><br><span class="line">        threadPool.setAwaitTerminationSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//  线程名称前缀</span></span><br><span class="line">        threadPool.setThreadNamePrefix(<span class="string">&quot;my-Async-&quot;</span>);</span><br><span class="line">        <span class="comment">// 初始化线程</span></span><br><span class="line">        threadPool.initialize();</span><br><span class="line">        <span class="keyword">return</span> threadPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p>异步调用的方法上添加注解@Async，表明该方法是异步方法，如果注解在类上，那表明这个类里面的所有方法都是异步的。异步方法必须是public修饰的，而且需要在另一个类中调用才会生效，否则无法实现异步。  </p><p>Service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Long&gt; <span class="title function_">addOverViewInfo</span><span class="params">(K8sClusterDTO k8sClusterDTO)</span> <span class="keyword">throws</span> ApiException &#123;</span><br><span class="line">    <span class="comment">// 添加概览信息</span></span><br><span class="line">    <span class="comment">// return CompletableFuture.completedFuture(k8sClusterId);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// result = 查询数据库得到的分页数据</span></span><br><span class="line">List&lt;CompletableFuture&lt;Long&gt;&gt; completableFutureList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 多线程添加集群概览数据</span></span><br><span class="line"><span class="keyword">for</span> (K8sClusterDTO k8sClusterDTO : result.getObjectList())&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        CompletableFuture&lt;Long&gt; completableFuture = k8sClusterService.addOverViewInfo(k8sClusterDTO);</span><br><span class="line">        completableFutureList.add(completableFuture);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Long&gt;[] completableFutureArray = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[completableFutureList.size()];</span><br><span class="line"><span class="comment">// 合并线程，确保子线程全部执行完</span></span><br><span class="line">CompletableFuture.allOf(completableFutureList.toArray(completableFutureArray)).join();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><p>至此，功能完成。查询效率确实有所提高。<br>这算是第一次成功在实际项目中使用多线程，网上查询了很多博客，spring boot中使用多线程是很方便的，但是关键是如何等待所有子线程执行完，像这种直接使用注解来声明一个异步方法，很多网上的方案都行不通，最后看到简书上的一篇文章才有了思路。  </p><p>使用了异步编程后，接口调用顺序大概是这样的：  </p><p>查询数据库分页数据<br>返回分页数据给前端<br>第一次调用异步方法<br>第二次调用异步方法<br>……</p><p>所以还没等到数据添加上概览信息，就已经返回了结果，这肯定是行不通的。</p><p>使用了CompletableFuture.allOf(…).jion() 方法后，顺序大概就是：</p><p>查询数据库分页数据<br>第一次调用异步方法<br>第二次调用异步方法<br>……<br>最后一个异步方法执行完毕<br>返回分页数据给前端</p><p>这样才能返回正确的结果</p><h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4><p>CompletableFuture allOf().jion():<br>法实现多实例的同时返回，如果allOf里面的所有线程未执行完毕，主线程会阻塞，直到allOf里面的所有线程都执行，主线程就会被唤醒，继续向下运行。总的来说就是保证了子线程之间的异步，又保证了主线程和子线程的同步。</p><h4 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h4><p>参考资料：  </p><ol><li>Spring Boot 创建及使用多线程。<a href="https://blog.csdn.net/asd136912/article/details/87716215">https://blog.csdn.net/asd136912/article/details/87716215</a></li><li>SpringBoot 多线程异步调用-提高程序执行效率。<a href="https://www.jianshu.com/p/d919f4372351">https://www.jianshu.com/p/d919f4372351</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;业务场景：查询数据分页，每条数据需要添加上概览信息，获取概览信息需要调用一些http接口，有一定的等待时间，单线程查询效率较慢。现在需要在查出了数据库持久化数据的基础上，使用多线程给数据添加概览信息，而且在所有异步线程都完成后，再返回分页信息给前端。&lt;/p&gt;
&lt;h4 id=</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/%E3%80%8AOn%20Java%208%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/%E3%80%8AOn%20Java%208%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《On-Java-8》读书笔记"><a href="#《On-Java-8》读书笔记" class="headerlink" title="《On Java 8》读书笔记"></a>《On Java 8》读书笔记</h1><h3 id="1-java-8-接口可以有默认方法和静态方法"><a href="#1-java-8-接口可以有默认方法和静态方法" class="headerlink" title="1. java 8 接口可以有默认方法和静态方法"></a>1. java 8 接口可以有默认方法和静态方法</h3><p>增加默认方法的极具说服力的理由是它允许在不破坏已使用接口的代码的情况下，在接口中增加新的方法。默认方法有时也被称为守卫方法或虚拟扩展方法。</p><p>默认方法的最佳实践是 java 8 的 stream api。</p><p>接口使用了默认方法，继承了这个接口的类可以不用实现接口中的默认方法。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interfaces/AnInterface.java</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AnInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">firstMethod</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">secondMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interfaces/AnImplementation.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnImplementation</span> <span class="keyword">implements</span> <span class="title class_">AnInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">firstMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;firstMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">secondMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;secondMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnInterface</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnImplementation</span>();</span><br><span class="line">        i.firstMethod();</span><br><span class="line">        i.secondMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们在 AnInterface 中增加一个新方法 newMethod()，而在 AnImplementation 中没有实现它，编译器就会报错。如果我们使用关键字 default 为 newMethod() 方法提供默认的实现，那么所有与接口有关的代码能正常工作，不受影响，而且这些代码还可以调用新的方法 newMethod()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interfaces/InterfaceWithDefault.java</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InterfaceWithDefault</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">firstMethod</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">secondMethod</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">newMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;newMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要修改接口，不用修改实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interfaces/Implementation2.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Implementation2</span> <span class="keyword">implements</span> <span class="title class_">InterfaceWithDefault</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">firstMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;firstMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">secondMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;secondMethod&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InterfaceWithDefault</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Implementation2</span>();</span><br><span class="line">        i.firstMethod();</span><br><span class="line">        i.secondMethod();</span><br><span class="line">        i.newMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-java-8-多继承"><a href="#2-java-8-多继承" class="headerlink" title="2. java 8 多继承"></a>2. java 8 多继承</h3><p>类可以实现多个接口，由于默认方法的加入，java class 有了多继承的特性，如果一个类实现的接口中有重复的方法签名相同（方法签名包括方法名和参数类型）的默认方法，类就需要覆写冲突的方法，或者重新实现方法。</p><h3 id="3-数组是保存一组对象最有效的方式"><a href="#3-数组是保存一组对象最有效的方式" class="headerlink" title="3. 数组是保存一组对象最有效的方式"></a>3. 数组是保存一组对象最有效的方式</h3><h3 id="4-关于集合类（Collection-）的写法"><a href="#4-关于集合类（Collection-）的写法" class="headerlink" title="4. 关于集合类（Collection ）的写法"></a>4. 关于集合类（Collection ）的写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; apples = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">LinkedList&lt;Apple&gt; apples = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>请注意， ArrayList 已经被向上转型为了 List接口，这是大多数情况下的写法。但是如果需要用到具体的集合类的功能特性时，就不能将它们向上转型为更通用的接口。</p><h3 id="5-优化是一个很棘手的问题，最好的策略就是置之不顾，直到发现必须要去担心它了（尽管去理解这些问题总是一个很好的主意）"><a href="#5-优化是一个很棘手的问题，最好的策略就是置之不顾，直到发现必须要去担心它了（尽管去理解这些问题总是一个很好的主意）" class="headerlink" title="5. 优化是一个很棘手的问题，最好的策略就是置之不顾，直到发现必须要去担心它了（尽管去理解这些问题总是一个很好的主意）"></a>5. 优化是一个很棘手的问题，最好的策略就是置之不顾，直到发现必须要去担心它了（尽管去理解这些问题总是一个很好的主意）</h3><h3 id="6-集合类中迭代器（Iterators）的理解"><a href="#6-集合类中迭代器（Iterators）的理解" class="headerlink" title="6 . 集合类中迭代器（Iterators）的理解"></a>6 . 集合类中迭代器（Iterators）的理解</h3><p>迭代器是一个对象，它在一个序列中移动并选择该序列中的每个对象，而客户端程序员不知道或不关心该序列的底层结构。另外，迭代器通常被称为轻量级对象（lightweight object）：创建它的代价小。ava 的 Iterator 只能单向移动。这个 Iterator 只能用来：</p><ol><li>使用 iterator() 方法要求集合返回一个 Iterator。 Iterator 将准备好返回序列中的第一个元素。</li><li>使用 next() 方法获得序列中的下一个元素。</li><li>使用 hasNext() 方法检查序列中是否还有元素。</li><li>使用 remove() 方法将迭代器最近返回的那个元素删除。</li></ol><p>有了 Iterator ，就不必再为集合中元素的数量操心了。这是由 hasNext() 和 next() 关心的事情。也可以不用考虑到集合的确切类型。迭代器能够将遍历序列的操作与该序列的底层结构分离，统一了对集合的访问方式。</p><p>用法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// collections/CrossCollectionIteration.java</span></span><br><span class="line"><span class="keyword">import</span> typeinfo.pets.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CrossCollectionIteration</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(Iterator&lt;Pet&gt; it)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">      <span class="type">Pet</span> <span class="variable">p</span> <span class="operator">=</span> it.next();</span><br><span class="line">      System.out.print(p.id() + <span class="string">&quot;:&quot;</span> + p + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Pet&gt; pets = Pets.list(<span class="number">8</span>);</span><br><span class="line">    LinkedList&lt;Pet&gt; petsLL = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(pets);</span><br><span class="line">    HashSet&lt;Pet&gt; petsHS = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(pets);</span><br><span class="line">    TreeSet&lt;Pet&gt; petsTS = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(pets);</span><br><span class="line">    display(pets.iterator());</span><br><span class="line">    display(petsLL.iterator());</span><br><span class="line">    display(petsHS.iterator());</span><br><span class="line">    display(petsTS.iterator());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug</span></span><br><span class="line"><span class="comment">7:Manx</span></span><br><span class="line"><span class="comment">0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug</span></span><br><span class="line"><span class="comment">7:Manx</span></span><br><span class="line"><span class="comment">0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug</span></span><br><span class="line"><span class="comment">7:Manx</span></span><br><span class="line"><span class="comment">5:Cymric 2:Cymric 7:Manx 1:Manx 3:Mutt 6:Pug 4:Pug</span></span><br><span class="line"><span class="comment">0:Rat</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>ListIterator 是一个更强大的 Iterator 子类型，它只能由各种 List 类生成。 Iterator 只能向前移动，而 ListIterator 可以双向移动。它还可以生成相对于迭代器在列表中指向的当前位置的后一个和前一个元素的索引，并且可以使用 set() 方法替换它访问过的最近一个元素。</p><h3 id="7-Java8-中的堆栈声明为"><a href="#7-Java8-中的堆栈声明为" class="headerlink" title="7. Java8 中的堆栈声明为"></a>7. Java8 中的堆栈声明为</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>之所以是 Deque 而不是Stack，这是因为 Java 1.0 中附带了一个 Stack 类，结果设计得很糟糕（为了向后兼容，后续保留了这个类）。Java 6 添加了 ArrayDeque。</p><h3 id="8-队列"><a href="#8-队列" class="headerlink" title="8. 队列"></a>8. 队列</h3><p>LinkedList 实现了 Queue 接口，并且提供了一些方法以支持队列行为，因此 LinkedList 可以用作 Queue 的一种实现。 通过将 LinkedList 向上转换为 Queue 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="9-for-in-语法糖"><a href="#9-for-in-语法糖" class="headerlink" title="9. for-in 语法糖"></a>9. for-in 语法糖</h3><p>Java 5 引入了一个名为 Iterable 的接口，该接口包含一个能够生成 Iterator 的 iterator() 方法。for-in 使用此 Iterable 接口来遍历序列。因此，如果创建了任何实现了 Iterable 的类，都可以将它用于 for-in 语句中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// collections/IterableClass.java</span></span><br><span class="line"><span class="comment">// Anything Iterable works with for-in</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IterableClass</span> <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;String&gt; &#123;</span><br><span class="line">  <span class="keyword">protected</span> String[] words = (<span class="string">&quot;And that is how &quot;</span> +</span><br><span class="line">    <span class="string">&quot;we know the Earth to be banana-shaped.&quot;</span></span><br><span class="line">    ).split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Iterator&lt;String&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;String&gt;() &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &lt; words.length;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> &#123; <span class="keyword">return</span> words[index++]; &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123; <span class="comment">// Not implemented</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(String s : <span class="keyword">new</span> <span class="title class_">IterableClass</span>())</span><br><span class="line">      System.out.print(s + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">And that is how we know the Earth to be banana-shaped.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="10-不要在新代码中使用遗留类-Vector-，Hashtable-和-Stack-。"><a href="#10-不要在新代码中使用遗留类-Vector-，Hashtable-和-Stack-。" class="headerlink" title="10. 不要在新代码中使用遗留类 Vector ，Hashtable 和 Stack 。"></a>10. 不要在新代码中使用遗留类 Vector ，Hashtable 和 Stack 。</h3><h3 id="11-Lambda-表达式"><a href="#11-Lambda-表达式" class="headerlink" title="11. Lambda 表达式"></a>11. Lambda 表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Body</span> <span class="variable">bod</span> <span class="operator">=</span> h -&gt; h + <span class="string">&quot; No Parens!&quot;</span>; <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="type">Body</span> <span class="variable">bod2</span> <span class="operator">=</span> (h) -&gt; h + <span class="string">&quot; More details&quot;</span>; <span class="comment">// [2]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="type">Description</span> <span class="variable">desc</span> <span class="operator">=</span> () -&gt; <span class="string">&quot;Short info&quot;</span>; <span class="comment">// [3]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="type">Multi</span> <span class="variable">mult</span> <span class="operator">=</span> (h, n) -&gt; h + n; <span class="comment">// [4]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="type">Description</span> <span class="variable">moreLines</span> <span class="operator">=</span> () -&gt; &#123; <span class="comment">// [5]</span></span><br><span class="line">    System.out.println(<span class="string">&quot;moreLines()&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;from moreLines()&quot;</span>;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>Lambda 表达式基本语法：</p><ul><li><ol><li>参数。</li><li>接着 -&gt;，可视为“产出”。</li><li>-&gt; 之后的内容都是方法体。</li></ol></li><li><p>当只用一个参数，可以不需要括号 ()。 然而，这是一个特例。</p></li><li><p>正常情况使用括号 () 包裹参数。 为了保持一致性，也可以使用括号 () 包裹单个参数，虽然这种情况并不常见。</p></li><li><p>如果没有参数，则必须使用括号 () 表示空参数列表。</p></li><li><p>对于多个参数，将参数列表放在括号 () 中。</p></li><li><p>到目前为止，所有 Lambda 表达式方法体都是单行。 该表达式的结果自动成为 Lambda 表达式的返回值，在此处使用 return 关键字是非法的。 这是 Lambda 表达式缩写用于描述功能的语法的另一种方式。</p></li><li><p>如果在 Lambda 表达式中确实需要多行，则必须将这些行放在花括号中。 在这种情况下，就 需要使用 return。Lambda 表达式通常比匿名内部类产生更易读的代码，尽可能使用它们。</p></li></ul><p>Fibonacci 序列改为使用递归 Lambda 表达式来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IntCall</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">call</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursiveFibonacci</span> &#123;</span><br><span class="line">  IntCall fib;</span><br><span class="line"></span><br><span class="line">  RecursiveFibonacci() &#123;</span><br><span class="line">    fib = n -&gt; n == <span class="number">0</span> ? <span class="number">0</span> :</span><br><span class="line">               n == <span class="number">1</span> ? <span class="number">1</span> :</span><br><span class="line">               fib.call(n - <span class="number">1</span>) + fib.call(n - <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123; <span class="keyword">return</span> fib.call(n); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">RecursiveFibonacci</span> <span class="variable">rf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecursiveFibonacci</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">      System.out.println(rf.fibonacci(i));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-流操作"><a href="#12-流操作" class="headerlink" title="12. 流操作"></a>12. 流操作</h3><p>流操作的类型有三种：创建流，修改流元素（中间操作， Intermediate Operations），消费流元素（终端操作， Terminal Operations），收集流元素（通常是到集合中）。</p><h3 id="13-异常处理"><a href="#13-异常处理" class="headerlink" title="13. 异常处理"></a>13. 异常处理</h3><p>finally 子句永远会执行，即使前面有 return 语句。由于 Java 有垃圾回收机制，所以 finally 语句主要是用来恢复内存之外的资源回到初始状态，需要清理的资源包括：已经打开的文件或网络连接，在屏幕上画的图形，甚至可以是外部世界的某个开关。</p><h3 id="14-永恒真理"><a href="#14-永恒真理" class="headerlink" title="14. 永恒真理"></a>14. 永恒真理</h3><p><a href="https://lingcoder.github.io/OnJava8/#/book/16-Validating-Your-Code?id=%E4%BD%A0%E6%B0%B8%E8%BF%9C%E4%B8%8D%E8%83%BD%E4%BF%9D%E8%AF%81%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84%EF%BC%8C%E4%BD%A0%E5%8F%AA%E8%83%BD%E8%AF%81%E6%98%8E%E5%AE%83%E6%98%AF%E9%94%99%E7%9A%84%E3%80%82">你永远不能保证你的代码是正确的，你只能证明它是错的。</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《On-Java-8》读书笔记&quot;&gt;&lt;a href=&quot;#《On-Java-8》读书笔记&quot; class=&quot;headerlink&quot; title=&quot;《On Java 8》读书笔记&quot;&gt;&lt;/a&gt;《On Java 8》读书笔记&lt;/h1&gt;&lt;h3 id=&quot;1-java-8-接口可以</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/%E5%85%B3%E4%BA%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <id>https://tianxiafeiyu.github.io/2022/12/16/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/%E5%85%B3%E4%BA%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</id>
    <published>2022-12-16T07:22:54.808Z</published>
    <updated>2022-12-16T07:22:54.808Z</updated>
    
    <content type="html"><![CDATA[<p>关于线程安全（摘自<a href="https://www.cnblogs.com/nizuimeiabc1/p/4254127.html%EF%BC%89">https://www.cnblogs.com/nizuimeiabc1/p/4254127.html）</a></p><p>1）常量始终是线程安全的，因为只存在读操作。 </p><p>2）每次调用方法前都新建一个实例是线程安全的，因为不会访问共享的资源。</p><p>3）局部变量是线程安全的。因为每执行一个方法，都会在独立的空间创建局部变量，它不是共享的资源。局部变量包括方法的参数变量和方法内变量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于线程安全（摘自&lt;a href=&quot;https://www.cnblogs.com/nizuimeiabc1/p/4254127.html%EF%BC%89&quot;&gt;https://www.cnblogs.com/nizuimeiabc1/p/4254127.html）&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="技术开发" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://tianxiafeiyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java/"/>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dalin blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-13T04:38:23.541Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dalin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/12/13/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/Apdex%20%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E6%8C%87%E6%95%B0/"/>
    <id>http://example.com/2022/12/13/开发笔记/Apdex 应用性能指数/</id>
    <published>2022-12-13T04:38:23.541Z</published>
    <updated>2022-12-13T04:38:23.541Z</updated>
    
    <content type="html"><![CDATA[<p>Apdex 应用性能指数是站在用户角度衡量用户对应用满意度的数值。</p><p>假设用户对于服务的响应容忍度权值为 T</p><table><thead><tr><th>满意（1分）</th><th>容忍（0.5分）</th><th>失望（0分）</th></tr></thead><tbody><tr><td>0~T</td><td>T~4T</td><td>4T~</td></tr></tbody></table><p>Apdex指数 &#x3D; (满意样本 x 1 + 容忍样本 x 0.5)&#x2F; 样本总数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Apdex 应用性能指数是站在用户角度衡量用户对应用满意度的数值。&lt;/p&gt;
&lt;p&gt;假设用户对于服务的响应容忍度权值为 T&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;满意（1分）&lt;/th&gt;
&lt;th&gt;容忍（0.5分）&lt;/th&gt;
&lt;th&gt;失望（0分）&lt;/th&gt;
&lt;
      
    
    </summary>
    
      <category term="开发笔记" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/12/13/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/dalin%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/12/13/开发笔记/dalin的服务器配置记录/</id>
    <published>2022-12-13T04:38:23.541Z</published>
    <updated>2022-12-13T04:38:23.541Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云上重新买了台穷鬼t5，菜是菜了点，但是该折腾还是要折腾的。。。</p><h2 id="设置虚拟内存"><a href="#设置虚拟内存" class="headerlink" title="设置虚拟内存"></a>设置虚拟内存</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>free -m</code> 查看内存状态, <code>Swap</code> 的值都是0，说明还没有安装虚拟内存</p><p>在 &#x2F;opt 下创建虚拟内存文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=/opt/swap bs=2048 count=2048000</span><br></pre></td></tr></table></figure><p>将swap文件设置为swap分区文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /opt/swap    //注意更改swap文件的权限</span><br><span class="line">mkswap /opt/swap</span><br></pre></td></tr></table></figure><p>激活swap,启用分区交换文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /opt/swap</span><br></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 opt]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1829        1329         169           0         330         357</span><br><span class="line">Swap:          3999         429        3570</span><br></pre></td></tr></table></figure><p>重启自动启用设置，否则机器重启后分区就失效了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.local</span><br></pre></td></tr></table></figure><p>底部添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /home/swap</span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>停止swap分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff /opt/swap</span><br></pre></td></tr></table></figure><p>删除掉swap文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /opt/swap</span><br></pre></td></tr></table></figure><p>查看磁盘情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 opt]# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        900M     0  900M   0% /dev</span><br><span class="line">tmpfs           915M     0  915M   0% /dev/shm</span><br><span class="line">tmpfs           915M  612K  915M   1% /run</span><br><span class="line">tmpfs           915M     0  915M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1        40G  9.5G   31G  24% /</span><br><span class="line">tmpfs           183M     0  183M   0% /run/user/1000</span><br><span class="line">overlay          40G  9.5G   31G  24% /var/lib/docker/overlay2/cb6202d7408b52de4ca486b57263e33e6dbb34d3adf35e86bfdffe62b9d33339/merged</span><br><span class="line">overlay          40G  9.5G   31G  24% /var/lib/docker/overlay2/25f9d8b78fa8906f7b379efce90fdd90f8e5771399f537988cf15ca450641596/merged</span><br></pre></td></tr></table></figure><h2 id="mysql-安装"><a href="#mysql-安装" class="headerlink" title="mysql 安装"></a>mysql 安装</h2><p>上一次鄙人的mysql开启了远程访问，并且没有注意安全防范，被比特币勒索了。。。但是使用远程msql服务的需求还是需要的，毕竟真的是方便，这次注意一下安全方面的配置，应该不至于再没了吧。。。</p><h4 id="1-centos8-安装mysql8"><a href="#1-centos8-安装mysql8" class="headerlink" title="1. centos8 安装mysql8"></a>1. centos8 安装mysql8</h4><p>使用最新的包管理器安装MySQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install @mysql</span><br></pre></td></tr></table></figure><p>设置开机自启并启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable --now mysqld</span><br></pre></td></tr></table></figure><p>运行mysql_secure_installation脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p>按提示往下走即可，注意在 <code>Disallow root login remotely?</code>选项中选择 <code>n</code></p><h4 id="2-更换-mysql-默认端口"><a href="#2-更换-mysql-默认端口" class="headerlink" title="2. 更换 mysql 默认端口"></a>2. 更换 mysql 默认端口</h4><p><code>vim /etc/my.cnf</code>，添加字段 <code>port=6612</code></p><p><code>systemctl restart mysqld</code> 重启 mysql</p><p>防火墙添加6612端口白名单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=6612/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>centos默认使用的是firewall作为防火墙，一些常用命令：</p><ol><li>firewall-cmd –list-ports       ##查看已开放的端口</li><li>firewall-cmd –add-port&#x3D;6612&#x2F;tcp –permanent ##永久开放6612端口</li><li>firewall-cmd –remove-port&#x3D;6612&#x2F;tcp –permanent ##永久关闭6612端口</li><li>firewall-cmd –reload ##刷新</li></ol><p>阿里云控制台安全组开放 6612 端口</p><h4 id="3-mysql-允许远程主机访问"><a href="#3-mysql-允许远程主机访问" class="headerlink" title="3. mysql 允许远程主机访问"></a>3. mysql 允许远程主机访问</h4><p>登录mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p&lt;密码&gt;</span><br></pre></td></tr></table></figure><p>将 <code>mysql.user</code> 中的 <code>root</code> 的 <code>host</code> 字段设为<code>&#39;%&#39;</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h4 id="4-使用脚本自动备份数据"><a href="#4-使用脚本自动备份数据" class="headerlink" title="4. 使用脚本自动备份数据"></a>4. 使用脚本自动备份数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#数据库服务器</span><br><span class="line">dbserver=&#x27;localhost&#x27;</span><br><span class="line">#数据库用户名</span><br><span class="line">dbuser=&#x27;root&#x27;</span><br><span class="line">#数据库用密码</span><br><span class="line">dbpasswd=&#x27;********&#x27;</span><br><span class="line">#需要备份的数据库，多个数据库用空格分开</span><br><span class="line">dbname=&#x27;backdata01 backdata02&#x27;</span><br><span class="line">#备份时间</span><br><span class="line">backtime=`date +%Y%m%d`</span><br><span class="line">#日志备份路径</span><br><span class="line">logpath=&#x27;/opt/data/mysqlbak/&#x27;</span><br><span class="line">#数据备份路径</span><br><span class="line">datapath=&#x27;/opt/data/mysqlbak/&#x27;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">echo &#x27;##################$backtime##########################&#x27;</span><br><span class="line"> </span><br><span class="line">#日志记录头部</span><br><span class="line">echo ‘&quot;备份时间为$&#123;backtime&#125;,备份数据库表 $&#123;dbname&#125; 开始&quot; &gt;&gt; $&#123;logpath&#125;/mysqlback.log</span><br><span class="line">#正式备份数据库</span><br><span class="line">for table in $dbname; do</span><br><span class="line">source=`mysqldump -h $&#123;dbserver&#125; -u $&#123;dbuser&#125; -p$&#123;dbpasswd&#125; $&#123;table&#125; &gt; $&#123;logpath&#125;/$&#123;backtime&#125;.sql` 2&gt;&gt; $&#123;logpath&#125;/mysqlback.log;</span><br><span class="line">#备份成功以下操作</span><br><span class="line">if [ &quot;$?&quot; == 0 ];then</span><br><span class="line">cd $datapath</span><br><span class="line">#为节约硬盘空间，将数据库压缩</span><br><span class="line">tar zcf $&#123;table&#125;$&#123;backtime&#125;.tar.gz $&#123;backtime&#125;.sql &gt; /dev/null</span><br><span class="line">#删除原始文件，只留压缩后文件</span><br><span class="line">rm -f $&#123;datapath&#125;/$&#123;backtime&#125;.sql</span><br><span class="line">#删除七天前备份，也就是只保存7天内的备份</span><br><span class="line">find $datapath -name &quot;*.tar.gz&quot; -type f -mtime +7 -exec rm -rf &#123;&#125; \; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">echo &quot;数据库表 $&#123;dbname&#125; 备份成功!!&quot; &gt;&gt; $&#123;logpath&#125;/mysqlback.log</span><br><span class="line">else</span><br><span class="line">#备份失败则进行以下操作</span><br><span class="line">echo &quot;数据库表 $&#123;dbname&#125; 备份失败!!&quot; &gt;&gt; $&#123;logpath&#125;/mysqlback.log</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"> </span><br><span class="line">echo &#x27;##################完成############################&#x27;</span><br></pre></td></tr></table></figure><p>创建定时任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">59 23 * * * ./opt/mysqldata/mysqlbak.sh  ## 每天23:59执行命令</span><br></pre></td></tr></table></figure><h2 id="redis-安装"><a href="#redis-安装" class="headerlink" title="redis 安装"></a>redis 安装</h2><h4 id="5-安装redis并且设置远程访问和密码配置"><a href="#5-安装redis并且设置远程访问和密码配置" class="headerlink" title="5. 安装redis并且设置远程访问和密码配置"></a>5. 安装redis并且设置远程访问和密码配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# yum -y install redis</span><br><span class="line">[root@dalin1 ~]# systemctl enable --now redis</span><br></pre></td></tr></table></figure><p>修改redis端口、设置密码、允许远程访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# vim /etc/redis.conf</span><br></pre></td></tr></table></figure><p>修改 <code>port 6369</code></p><p>注释掉 <code>bind 127.0.0.1</code>，以便让外网访问</p><p>去掉 <code>#requirepass foobared</code> 注释，foobared改为自己的密码</p><p>防火墙添加6369端口白名单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=6369/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>阿里云控制台安全组开放 6369 端口</p><h4 id="6-创建普通用户，以后尽量使用普通用户操作"><a href="#6-创建普通用户，以后尽量使用普通用户操作" class="headerlink" title="6. 创建普通用户，以后尽量使用普通用户操作"></a>6. 创建普通用户，以后尽量使用普通用户操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# adduser dalin  #创建普通用户 dalin</span><br><span class="line">[root@dalin1 ~]# passwd dalin   #修改密码</span><br><span class="line">[root@dalin1 ~]# su dalin   #切换用户</span><br></pre></td></tr></table></figure><p>普通用户只在 <code>/home/&lt;username&gt;</code> 目录下有完整权限</p><h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h2><p>docker这么方便的东西怎么能不用呢，但是因为服务器实在太菜了，可能会卡顿，而且要时刻注意内存使用情况</p><h4 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1. 安装依赖包"></a>1. 安装依赖包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# yum install -y yum-utils   device-mapper-persistent-data   lvm2</span><br></pre></td></tr></table></figure><h4 id="2-设置Docker源"><a href="#2-设置Docker源" class="headerlink" title="2. 设置Docker源"></a>2. 设置Docker源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="3-安装Docker-CE"><a href="#3-安装Docker-CE" class="headerlink" title="3. 安装Docker CE"></a>3. 安装Docker CE</h4><h5 id="3-1-docker安装版本查看"><a href="#3-1-docker安装版本查看" class="headerlink" title="3.1 docker安装版本查看"></a>3.1 docker安装版本查看</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><h4 id="3-2-安装docker"><a href="#3-2-安装docker" class="headerlink" title="3.2 安装docker"></a>3.2 安装docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# yum install docker-ce-18.09.6 docker-ce-cli-18.09.6 containerd.io</span><br></pre></td></tr></table></figure><p>指定安装的docker版本为18.09.6，由于该版本目前为最新版，故可以直接安装，不用指定版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h4 id="4-启动Docker并设置开机自启"><a href="#4-启动Docker并设置开机自启" class="headerlink" title="4. 启动Docker并设置开机自启"></a>4. 启动Docker并设置开机自启</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# systemctl enable --now docker</span><br></pre></td></tr></table></figure><h4 id="5-镜像加速"><a href="#5-镜像加速" class="headerlink" title="5. 镜像加速"></a>5. 镜像加速</h4><p>使用阿里云镜像加速地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# mkdir -p /etc/docker</span><br><span class="line">[root@dalin1 ~]# tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://khv87vsk.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="docker-下安装Elasticsearch和Kibana"><a href="#docker-下安装Elasticsearch和Kibana" class="headerlink" title="docker 下安装Elasticsearch和Kibana"></a>docker 下安装Elasticsearch和Kibana</h2><p>服务器太菜，基本跑不动</p><h3 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h3><p>下载镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# docker pull elasticsearch:7.2.0</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# docker run --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -d elasticsearch:7.2.0</span><br></pre></td></tr></table></figure><p>大概率启动失败，查看日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 temp]# docker logs elasticsearch</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: starting java failed with [1]</span><br><span class="line">output:</span><br><span class="line">#</span><br><span class="line"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.</span><br><span class="line"># An error report file with more information is saved as:</span><br><span class="line"># logs/hs_err_pid132.log</span><br><span class="line">error:</span><br><span class="line">OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error=&#x27;Not enough space&#x27; (errno=12)</span><br><span class="line">at org.elasticsearch.tools.launchers.JvmErgonomics.flagsFinal(JvmErgonomics.java:126)</span><br><span class="line">at org.elasticsearch.tools.launchers.JvmErgonomics.finalJvmOptions(JvmErgonomics.java:88)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>jvm内存不足。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1]# find / -name jvm.options</span><br><span class="line">/var/lib/docker/overlay2/aa7a9ac9f293452ddf8947e9fdf3af24d602566d54b6278284751239b43e37e5/diff/usr/share/elasticsearch/config/jvm.options</span><br><span class="line">[root@dalin1]# vim /var/lib/docker/overlay2/aa7a9ac9f293452ddf8947e9fdf3af24d602566d54b6278284751239b43e37e5/diff/usr/share/elasticsearch/config/jvm.options</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">## JVM configuration</span><br><span class="line"></span><br><span class="line">################################################################</span><br><span class="line">## IMPORTANT: JVM heap size</span><br><span class="line">################################################################</span><br><span class="line">##</span><br><span class="line">## You should always set the min and max JVM heap</span><br><span class="line">## size to the same value. For example, to set</span><br><span class="line">## the heap to 4 GB, set:</span><br><span class="line">##</span><br><span class="line">## -Xms4g</span><br><span class="line">## -Xmx4g</span><br><span class="line">##</span><br><span class="line">## See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html</span><br><span class="line">## for more information</span><br><span class="line">##</span><br><span class="line">################################################################</span><br><span class="line"></span><br><span class="line"># Xms represents the initial size of total heap space</span><br><span class="line"># Xmx represents the maximum size of total heap space</span><br><span class="line"></span><br><span class="line">-Xms1g      #服务器实在太菜了，我改成256m</span><br><span class="line">-Xmx1g      #服务器实在太菜了，我改成256m</span><br><span class="line"></span><br><span class="line">################################################################</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重新启动容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# docker start elasticsearch</span><br></pre></td></tr></table></figure><p>检测是否启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# curl http://localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;c19d1882a695&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;-zKpqN7TQMqmPULGgdMz3w&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.2.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;508c38a&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2019-06-20T15:54:18.811730Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.0.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决跨域访问问题</p><p>进入容器，修改elasticsearch.yml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dalin1 ~]# docker exec -it elasticsearch /bin/bash</span><br><span class="line">vim /usr/share/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure><p>在elasticsearch.yml的文件末尾加上:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><p>es自带的分词器对中文分词不是很友好，所以我们下载开源的IK分词器来解决这个问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">`exit` 退出容器后 `docker restart elasticsearch` 重启容器</span><br><span class="line"></span><br><span class="line">#### kibana安装</span><br><span class="line">下载镜像</span><br></pre></td></tr></table></figure><p>[root@dalin1 ~]# docker pull kibana:7.2.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">启动kibana</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>[root@dalin1 ~]# docker run –name kibana –link&#x3D;elasticsearch:es -e ELASTICSEARCH_URL&#x3D;<a href="http://172.17.0.2:9200/">http://172.17.0.2:9200</a>  -p 5601:5601 -d kibana:7.7.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用--link连接到elasticsearch容器，并添加环境变量，指定安装es的容器地址</span><br><span class="line"></span><br><span class="line">当然也可以进入容器内部修改配置文件来设置es访问地址</span><br></pre></td></tr></table></figure><p>[root@dalin1 ~]# docker exec -it kibana &#x2F;bin&#x2F;bash<br>vi config&#x2F;kibana.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kibana默认是优先使用环境变量的地址，然后才是配置文件kibana.yml</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">如何查询容器地址？</span><br></pre></td></tr></table></figure><h1 id="获取到容器的元数据信息"><a href="#获取到容器的元数据信息" class="headerlink" title="获取到容器的元数据信息"></a>获取到容器的元数据信息</h1><p>[root@dalin1 ~]# docker inspect [id&#x2F;name]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">最后，配置安全组和防火墙，开放9200、5601端口</span><br></pre></td></tr></table></figure><p>[root@dalin1 ~]# firewall-cmd –add-port&#x3D;5601&#x2F;tcp –permanent<br>[root@dalin1 ~]# firewall-cmd –add-port&#x3D;9200&#x2F;tcp –permanent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这就结束了吗？是的，网上几乎所有的关于docker下安装kibana教程都是到了这一步就说完事收工、开始体验。。。但是！！！我遇到的情况是访问 `http//:ip:5601`，只会给我冰冷的大字：</span><br></pre></td></tr></table></figure><p>Kibana server is not ready yet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`docker logs kibana`打印日志，报错：</span><br></pre></td></tr></table></figure><p>{“type”:”log”,”@timestamp”:”2020-06-04T08:25:57Z”,”tags”:[“warning”,”elasticsearch”,”admin”],”pid”:6,”message”:”Unable to revive connection: <a href="http://172.17.0.2:9200/%22%7D">http://172.17.0.2:9200/&quot;}</a><br>{“type”:”log”,”@timestamp”:”2020-06-04T08:25:57Z”,”tags”:[“warning”,”elasticsearch”,”admin”],”pid”:6,”message”:”No living connections”}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip地址是没问题的，es服务也确实起了，为什么呢？？这个问题花了我大半天的时间，找遍了网上的教程都没有相关的介绍，官网上关于docker安装kibana的教程更是少。 </span><br><span class="line"></span><br><span class="line">进入kibana容器中</span><br></pre></td></tr></table></figure><p>[root@dalin1 ~]# docker exec -it kibana &#x2F;bin&#x2F;bash<br>bash-4.2$ ping 172.17.0.2    #没有问题，能ping通<br>bash-4.2$ curl <a href="http://120.79.43.44:9200/">http://120.79.43.44:9200</a><br>curl: (7) Failed connect to 120.79.43.44:9200; No route to host</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">问题就出在这里！应该是防火墙的原因导致容器之间无法进行通信</span><br><span class="line"></span><br><span class="line">解决方法，依次执行以下命令</span><br></pre></td></tr></table></figure><p>[root@dalin1 ~]# nmcli connection modify docker0 connection.zone trusted</p><p>[root@dalin1 ~]# systemctl stop NetworkManager.service</p><p>[root@dalin1 ~]# firewall-cmd –permanent –zone&#x3D;trusted –change-interface&#x3D;docker0</p><p>[root@dalin1 ~]# systemctl start NetworkManager.service</p><p>[root@dalin1 ~]# nmcli connection modify docker0 connection.zone trusted</p><p>[root@dalin1 ~]# systemctl restart docker.service</p><p>&#96;&#96;&#96;<br>把 <code>docker0</code> 加入防火墙白名单</p><p>重新启动容器，访问地址 <a href="http://ip:5601/">http://ip:5601</a> ，总算没有了 <code>Kibana server is not ready yet</code>,显示正在加载的图像，稍作等候即可，部署完成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阿里云上重新买了台穷鬼t5，菜是菜了点，但是该折腾还是要折腾的。。。&lt;/p&gt;
&lt;h2 id=&quot;设置虚拟内存&quot;&gt;&lt;a href=&quot;#设置虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;设置虚拟内存&quot;&gt;&lt;/a&gt;设置虚拟内存&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="开发笔记" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/12/13/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/golang/%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
    <id>http://example.com/2022/12/13/开发笔记/golang/学习大纲/</id>
    <published>2022-12-13T04:38:23.541Z</published>
    <updated>2022-12-13T04:38:23.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="todo…"><a href="#todo…" class="headerlink" title="todo…"></a>todo…</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;todo…&quot;&gt;&lt;a href=&quot;#todo…&quot; class=&quot;headerlink&quot; title=&quot;todo…&quot;&gt;&lt;/a&gt;todo…&lt;/h1&gt;
      
    
    </summary>
    
      <category term="开发笔记" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="golang" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/golang/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/12/13/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/java/%E5%85%B3%E4%BA%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <id>http://example.com/2022/12/13/开发笔记/java/关于线程安全/</id>
    <published>2022-12-13T04:38:23.541Z</published>
    <updated>2022-12-13T04:38:23.541Z</updated>
    
    <content type="html"><![CDATA[<p>关于线程安全（摘自<a href="https://www.cnblogs.com/nizuimeiabc1/p/4254127.html%EF%BC%89">https://www.cnblogs.com/nizuimeiabc1/p/4254127.html）</a></p><p>1）常量始终是线程安全的，因为只存在读操作。 </p><p>2）每次调用方法前都新建一个实例是线程安全的，因为不会访问共享的资源。</p><p>3）局部变量是线程安全的。因为每执行一个方法，都会在独立的空间创建局部变量，它不是共享的资源。局部变量包括方法的参数变量和方法内变量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于线程安全（摘自&lt;a href=&quot;https://www.cnblogs.com/nizuimeiabc1/p/4254127.html%EF%BC%89&quot;&gt;https://www.cnblogs.com/nizuimeiabc1/p/4254127.html）&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="开发笔记" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/12/13/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/git%20%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/12/13/开发笔记/工具/git 笔记/</id>
    <published>2022-12-13T04:38:23.541Z</published>
    <updated>2022-12-13T04:38:23.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="删除本地文件后从远程仓库获取问题"><a href="#删除本地文件后从远程仓库获取问题" class="headerlink" title="删除本地文件后从远程仓库获取问题"></a>删除本地文件后从远程仓库获取问题</h3><p>在本地删除文件后，<code>git pull</code>从远程仓库获取，但是一直提示 <code>up-to-date</code>，无法获取被删除的文件。</p><p>原因：当前本地库处于另一个分支中，需将本分支发Head重置至master。</p><p>将本分支发Head重置至master:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master </span><br><span class="line">$ git reset --hard</span><br></pre></td></tr></table></figure><p>强行pull并覆盖本地文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch --all  </span><br><span class="line">$ git reset --hard origin/master </span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;删除本地文件后从远程仓库获取问题&quot;&gt;&lt;a href=&quot;#删除本地文件后从远程仓库获取问题&quot; class=&quot;headerlink&quot; title=&quot;删除本地文件后从远程仓库获取问题&quot;&gt;&lt;/a&gt;删除本地文件后从远程仓库获取问题&lt;/h3&gt;&lt;p&gt;在本地删除文件后，&lt;code
      
    
    </summary>
    
      <category term="开发笔记" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="工具" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/12/13/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E3%80%81redis%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2022/12/13/开发笔记/数据库/mysql、redis开启远程访问/</id>
    <published>2022-12-13T04:38:23.541Z</published>
    <updated>2022-12-13T04:38:23.541Z</updated>
    
    <content type="html"><![CDATA[<p>要在本地使用云服务器中的mysql、redis服务，需要开启远程访问，阿里云还需要在控制台中开放3306、6379访问端口。</p><h4 id="1、mysql开启远程访问"><a href="#1、mysql开启远程访问" class="headerlink" title="1、mysql开启远程访问"></a>1、mysql开启远程访问</h4><p>默认情况下，mysql帐号不允许从远程登陆，只能在localhost登录。 在localhost登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，将”localhost”改为”%”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">   Enter password:</span><br><span class="line">    ……</span><br><span class="line">   mysql&gt;</span><br><span class="line">　　mysql&gt;update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">　　mysql&gt;select host, user from user;</span><br><span class="line">　</span><br></pre></td></tr></table></figure><h4 id="2、redis开启远程访问"><a href="#2、redis开启远程访问" class="headerlink" title="2、redis开启远程访问"></a>2、redis开启远程访问</h4><p>防火墙开放6379端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line">添加字段：</span><br><span class="line">-A RH-Firewall-1-INPUT -m state NEW -m tcp -dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure><p>修改redis配置文件<br>vim &#x2F;etc&#x2F;redis.conf</p><ul><li><code>bind127.0.0.1</code> 这一行注释掉</li><li><code>protected-mode yes</code> 改为 <code>protected-mode no</code></li></ul><p>保存后重启：<br>sysremctl restart redis</p><p><strong>2020-6-1：由于鄙人暴露了mysql到公网上，不加约束、放荡不羁，如今数据库已遭到比特币勒索，血与泪的教训，以后要多加规范，防火防盗防小人</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要在本地使用云服务器中的mysql、redis服务，需要开启远程访问，阿里云还需要在控制台中开放3306、6379访问端口。&lt;/p&gt;
&lt;h4 id=&quot;1、mysql开启远程访问&quot;&gt;&lt;a href=&quot;#1、mysql开启远程访问&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="开发笔记" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/12/13/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/es/Elasticsearch%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2022/12/13/开发笔记/数据库/es/Elasticsearch版本特性/</id>
    <published>2022-12-13T04:38:23.541Z</published>
    <updated>2022-12-13T04:38:23.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elasticsearch-各版本特性"><a href="#elasticsearch-各版本特性" class="headerlink" title="elasticsearch 各版本特性"></a>elasticsearch 各版本特性</h1><h2 id="5-0"><a href="#5-0" class="headerlink" title="5.0"></a>5.0</h2><p>支持Lucene 6.x</p><p>Instant Aggregations，在Shard层面提供了Aggregation缓存</p><p>新增 Sliced Scroll类型，现在Scroll接口可以并发来进行数据遍历了。每个Scroll请求，可以分成多个Slice请求，可以理解为切片，各Slice独立并行，利用Scroll重建或者遍历要快很多倍。</p><p>新增了Profile API</p><p>同时支持search和aggregation的profile</p><p>有一个新的 Search After 机制，其实和 scroll 类似，也是游标的机制，它的原理是对文档按照多个字段进行排序，然后利用上一个结果的最后一个文档作为起始值，拿 size 个文档，一般我们建议使用 _uid 这个字段，它的值是唯一的 id</p><p>新增Shrink API</p><p>新增了Rollover API</p><p>新增Reindex</p><p>提供了第一个Java原生的REST客户端SDK 基于HTTP协议的客户端对Elasticsearch的依赖解耦，没有jar包冲突，提供了集群节点自动发现、日志处理、节点请求失败自动进行请求轮询，充分发挥Elasticsearch的高可用能力</p><p>新增Wait for refresh，提供了文档级别的Refresh</p><p>新增Ingest Node</p><p>新增Painless Scripting</p><p>新增Task Manager</p><p>新增Depreated logging</p><p>新增Cluster allocation explain API</p><p>新增 half_float 类型</p><p>新增 :Matrix Stats Aggregation</p><p>为索引写操作添加顺序号</p><p>引入新的字段类型 Text&#x2F;Keyword 来替换 String</p><p>关于 Index Settings 现在，配置验证更加严格和保证原子性，如果其中一项失败，那个整个都会更新请求都会失败，不会一半成功一半失败。下面主要说两点： 1.设置可以重设会默认值，只需要设置为 null即可 2.获取设置接口新增参数include_defaults,可以直接返回所有设置和默认值</p><p>集群管理方面，新增Deleted Index Tombstones</p><p>Cluster state 的修改现在会和所有节点进行 ack 确认。</p><p>Shard 的一个副本如果失败了， Primary 标记失败的时候会和 Master 节点确认完毕再返回。</p><p>使用 UUID 来作为索引的物理的路径名，有很多好处，避免命名的冲突。</p><p>_timestamp 和 _ttl 已经移除，需要在 Ingest 或者程序端处理。</p><p>ES 可直接用 HDFS 来进行备份还原（ Snapshot&#x2F;Restore ）了</p><p>Delete-by-query 和 Update-by-query 重新回到 core ，以前是插件，现在可以直接使用了，也是构建在 Reindex 机制之上。(es1.x版本是直接支持，在es2.x中提取为插件，5.x继续回归直接支持)</p><p>HTTP 请求默认支持压缩，当然 http 调用端需要在 header 信息里面传对应的支持信息。</p><p>创建索引不会再让集群变红了，不会因为这个卡死集群了。</p><p>默认使用 BM25 评分算法，效果更佳，之前是 TF&#x2F;IDF。</p><p>快照 Snapshots 添加 UUID 解决冲突</p><p>限制索引请求大小，避免大量并发请求压垮 ES</p><p>限制单个请求的 shards 数量，默认 1000 个</p><p>移除 site plugins ，就是说 head 、 bigdesk 都不能直接装 es 里面了，不过可以部署独立站点（反正都是静态文件）或开发 kibana 插件</p><p>允许现有 parent 类型新增 child 类型</p><p>这个功能对于使用parent-child特性的人应该非常有用。</p><p>支持分号（；）来分割 url 参数，与符号（ &amp; ）一样</p><h2 id="6-0"><a href="#6-0" class="headerlink" title="6.0"></a>6.0</h2><p>无宕机升级 使之能够从 5 的最后一个版本滚动升级到 6 的最后一个版本，不需要集群的完整重启。无宕机在线升级，无缝滚动升级</p><p>跨多个 Elasticsearch 群集搜索 和以前一样，Elasticsearch 6.0 能够读取在 5.x 中创建的 Indices ，但不能读取在 2.x 中创建的 Indices 。不同的是，现在不必重新索引所有的旧 Indices ，你可以选择将其保留在 5.x 群集中，并使用跨群集搜索同时在 6.x 和 5.x 群集上进行搜索</p><p>迁移助手 Kibana X-Pack 插件提供了一个简单的用户界面，可帮助重新索引旧 Indices ，以及将 Kibana、Security 和 Watcher 索引升级到 6.0 。 群集检查助手在现有群集上运行一系列检查，以帮助在升级之前更正任何问题。 你还应该查阅弃用日志，以确保您没有使用 6.0 版中已删除的功能</p><p>使用序列号更快地重启和还原 6.0 版本中最大的一个新特性就是序列 ID，它允许基于操作的分片恢复。 以前，如果由于网络问题或节点重启而从集群断开连接的节点，则节点上的每个分区都必须通过将分段文件与主分片进行比较并复制任何不同的分段来重新同步。 这可能是一个漫长而昂贵的过程，甚至使节点的滚动重新启动非常缓慢。 使用序列 ID，每个分片将只能重放该分片中缺少的操作，使恢复过程更加高效</p><p>使用排序索引更快查询 通过索引排序，只要收集到足够的命中，搜索就可以终止。它对通常用作过滤器的低基数字段（例如 age, gender, is_published）进行排序时可以更高效的搜索，因为所有潜在的匹配文档都被分组在一起。</p><p>稀疏区域改进 以前，每个列中的每个字段都预留了一个存储空间。如果只有少数文档出现很多字段，则可能会导致磁盘空间的巨大浪费。现在，你付出你使用的东西。密集字段将使用与以前相同的空间量，但稀疏字段将显着减小。这不仅可以减少磁盘空间使用量，还可以减少合并时间并提高查询吞吐量，因为可以更好地利用文件系统缓存</p><h2 id="7-x"><a href="#7-x" class="headerlink" title="7.x"></a>7.x</h2><p>集群连接变化：TransportClient被废弃 以至于，es7的java代码，只能使用restclient。然后，个人综合了一下，对于java编程，建议采用 High-level-rest-client 的方式操作ES集群</p><p>ES数据存储结构变化：去除了Type es6时，官方就提到了es7会删除type，并且es6时已经规定每一个index只能有一个type。在es7中使用默认的_doc作为type，官方说在8.x版本会彻底移除type。 api请求方式也发送变化，如获得某索引的某ID的文档：GET index&#x2F;_doc&#x2F;id其中index和id为具体的值</p><p>High-level REST client 改变 已删除接受Header参数的API方法；Cluster Health API默认为集群级别；</p><p>ES程序包默认打包jdk：以至于7.x版本的程序包大小突然边300MB+ 对比6.x发现，包大了200MB+， 正是JDK的大小</p><p>默认配置变化：默认节点名称为主机名，默认分片数改为1，不再是5。</p><p>查询相关性速度优化：Weak-AND算法 啥是weak-and算法？ 核心原理：取TOP N结果集，估算命中记录数。</p><p>简单来说，一般我们在计算文本相关性的时候，会通过倒排索引的方式进行查询，通过倒排索引已经要比全量遍历节约大量时间，但是有时候仍然很慢。 原因是很多时候我们其实只是想要top n个结果，一些结果明显较差的也进行了复杂的相关性计算， 而weak-and算法通过计算每个词的贡献上限来估计文档的相关性上限，从而建立一个阈值对倒排中的结果进行减枝，从而得到提速的效果。</p><p>间隔查询(Intervals queries)： 某些搜索用例（例如，法律和专利搜索）引入了查找单词或短语彼此相距一定距离的记录的需要。 Elasticsearch 7.0中的间隔查询引入了一种构建此类查询的全新方式，与之前的方法（跨度查询span queries）相比，使用和定义更加简单。</p><p>与跨度查询相比，间隔查询对边缘情况的适应性更强。</p><p>引入新的集群协调子系统 移除 minimum_master_nodes 参数，让 Elasticsearch 自己选择可以形成仲裁的节点。 典型的主节点选举现在只需要很短的时间就可以完成。 集群的伸缩变得更安全、更容易，并且可能造成丢失数据的系统配置选项更少了。</p><p>节点更清楚地记录它们的状态，有助于诊断为什么它们不能加入集群或为什么无法选举出主节点。</p><p>时间戳纳秒级支持，提升数据精度 加粗样式</p><p>不再内存溢出 新的 Circuit Breaker 在JVM 堆栈层面监测内存使用，Elasticsearch 比之前更加健壮。</p><p>设置indices.breaker.fielddata.limit的默认值已从JVM堆大小的60％降低到40％。</p><h2 id="ES7与旧版本的区别"><a href="#ES7与旧版本的区别" class="headerlink" title="ES7与旧版本的区别"></a>ES7与旧版本的区别</h2><h4 id="1-关于-type（类型）"><a href="#1-关于-type（类型）" class="headerlink" title="1. 关于 type（类型）"></a>1. 关于 type（类型）</h4><p>使用 kibana 开发工具查询时候，指定类型查询会出现下面的提示：</p><blockquote><p>Deprecation: [types removal] Specifying types in document get requests is deprecated, use the &#x2F;{index}&#x2F;_doc&#x2F;{id} endpoint instead.</p></blockquote><p>es6时，官方就提到了es7会删除type，并且es6时已经规定每一个index只能有一个type。在es7中使用默认的_doc作为type，官方说在8.x版本会彻底移除type。 api请求方式也发送变化，如获得某索引的某ID的文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET index/_doc/id</span><br></pre></td></tr></table></figure><p>其中index和id为具体的值</p><h4 id="2-弃用-“string”-使用-“text”-域"><a href="#2-弃用-“string”-使用-“text”-域" class="headerlink" title="2. 弃用 “string”, 使用 “text” 域"></a>2. 弃用 “string”, 使用 “text” 域</h4><p>指定映射的时候使用 String 的话将会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No handler for type [string] declared on field xxx</span><br></pre></td></tr></table></figure><p>使用 text 替代 string</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;elasticsearch-各版本特性&quot;&gt;&lt;a href=&quot;#elasticsearch-各版本特性&quot; class=&quot;headerlink&quot; title=&quot;elasticsearch 各版本特性&quot;&gt;&lt;/a&gt;elasticsearch 各版本特性&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="开发笔记" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="es" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/es/"/>
    
    
  </entry>
  
</feed>
